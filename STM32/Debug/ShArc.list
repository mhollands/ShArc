
ShArc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003d68  08003d68  00013d68  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003de0  08003de0  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08003de0  08003de0  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003de0  08003de0  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003de0  08003de0  00013de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003de4  08003de4  00013de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08003de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001218  20000184  08003f6c  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000139c  08003f6c  0002139c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e33  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003742  00000000  00000000  00036fdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b48  00000000  00000000  0003a728  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001288  00000000  00000000  0003b270  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000173f1  00000000  00000000  0003c4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e957  00000000  00000000  000538e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072a38  00000000  00000000  00062240  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d4c78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ef0  00000000  00000000  000d4cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000096ed  00000000  00000000  000d6be4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000184 	.word	0x20000184
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d50 	.word	0x08003d50

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000188 	.word	0x20000188
 8000104:	08003d50 	.word	0x08003d50

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uhi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5a09      	ldrh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024a:	2410      	movs	r4, #16
{
 800024c:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	2230      	movs	r2, #48	; 0x30
 8000250:	2100      	movs	r1, #0
 8000252:	a80c      	add	r0, sp, #48	; 0x30
 8000254:	f003 fd73 	bl	8003d3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	0022      	movs	r2, r4
 800025a:	2100      	movs	r1, #0
 800025c:	a801      	add	r0, sp, #4
 800025e:	f003 fd6e 	bl	8003d3e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000262:	2218      	movs	r2, #24
 8000264:	2100      	movs	r1, #0
 8000266:	a805      	add	r0, sp, #20
 8000268:	f003 fd69 	bl	8003d3e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	2501      	movs	r5, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800026e:	2322      	movs	r3, #34	; 0x22
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000270:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000272:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000274:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000276:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000278:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f001 fc65 	bl	8001b48 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027e:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000280:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000282:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000284:	0029      	movs	r1, r5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000286:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000288:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800028a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028c:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800028e:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000290:	f001 feec 	bl	800206c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000294:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <SystemClock_Config+0x60>)
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000296:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000298:	9305      	str	r3, [sp, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800029a:	9408      	str	r4, [sp, #32]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800029c:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800029e:	f001 ff71 	bl	8002184 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80002a2:	b019      	add	sp, #100	; 0x64
 80002a4:	bd30      	pop	{r4, r5, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	00020020 	.word	0x00020020

080002ac <main>:
{
 80002ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ae:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 80002b0:	f000 f9ca 	bl	8000648 <HAL_Init>
  SystemClock_Config();
 80002b4:	f7ff ffc8 	bl	8000248 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b8:	2214      	movs	r2, #20
 80002ba:	2100      	movs	r1, #0
 80002bc:	a80b      	add	r0, sp, #44	; 0x2c
 80002be:	f003 fd3e 	bl	8003d3e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002c2:	2080      	movs	r0, #128	; 0x80
 80002c4:	4b74      	ldr	r3, [pc, #464]	; (8000498 <main+0x1ec>)
 80002c6:	03c0      	lsls	r0, r0, #15
 80002c8:	6959      	ldr	r1, [r3, #20]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : RDY_Pin */
  GPIO_InitStruct.Pin = RDY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002ca:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002cc:	4301      	orrs	r1, r0
 80002ce:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d0:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002d2:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d4:	0289      	lsls	r1, r1, #10
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002d6:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002d8:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002da:	9209      	str	r2, [sp, #36]	; 0x24
 80002dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002de:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002e0:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e2:	430a      	orrs	r2, r1
 80002e4:	615a      	str	r2, [r3, #20]
 80002e6:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ea:	400b      	ands	r3, r1
 80002ec:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002ee:	2110      	movs	r1, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002f2:	f000 fac9 	bl	8000888 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RDY_GPIO_Port, &GPIO_InitStruct);
 80002f6:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = RDY_Pin;
 80002f8:	2701      	movs	r7, #1
  HAL_GPIO_Init(RDY_GPIO_Port, &GPIO_InitStruct);
 80002fa:	a90b      	add	r1, sp, #44	; 0x2c
 80002fc:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = RDY_Pin;
 80002fe:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000300:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000302:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(RDY_GPIO_Port, &GPIO_InitStruct);
 8000304:	f000 fa12 	bl	800072c <HAL_GPIO_Init>
  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000308:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = LED_Pin;
 800030a:	2310      	movs	r3, #16
  HAL_I2C_Mem_Write(&hi2c1, AD_ADDR, 0xBF, 1, 0x00, 1, HAL_MAX_DELAY);
 800030c:	2501      	movs	r5, #1
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800030e:	a90b      	add	r1, sp, #44	; 0x2c
 8000310:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LED_Pin;
 8000312:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000314:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000316:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000318:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800031a:	f000 fa07 	bl	800072c <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 800031e:	4e5f      	ldr	r6, [pc, #380]	; (800049c <main+0x1f0>)
 8000320:	4b5f      	ldr	r3, [pc, #380]	; (80004a0 <main+0x1f4>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000322:	0030      	movs	r0, r6
  hi2c1.Instance = I2C1;
 8000324:	6033      	str	r3, [r6, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000326:	4b5f      	ldr	r3, [pc, #380]	; (80004a4 <main+0x1f8>)
  hi2c1.Init.OwnAddress1 = 0;
 8000328:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.Timing = 0x0000020B;
 800032a:	6073      	str	r3, [r6, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800032c:	60f7      	str	r7, [r6, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800032e:	6134      	str	r4, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000330:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000332:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000334:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000336:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000338:	f000 fbf2 	bl	8000b20 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800033c:	0021      	movs	r1, r4
 800033e:	0030      	movs	r0, r6
 8000340:	f000 fdb8 	bl	8000eb4 <HAL_I2CEx_ConfigAnalogFilter>
  HAL_I2C_Mem_Write(&hi2c1, AD_ADDR, 0xBF, 1, 0x00, 1, HAL_MAX_DELAY);
 8000344:	426d      	negs	r5, r5
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000346:	0021      	movs	r1, r4
 8000348:	0030      	movs	r0, r6
 800034a:	f000 fdd9 	bl	8000f00 <HAL_I2CEx_ConfigDigitalFilter>
  MX_USB_DEVICE_Init();
 800034e:	f003 fa83 	bl	8003858 <MX_USB_DEVICE_Init>
  HAL_I2C_Mem_Write(&hi2c1, AD_ADDR, 0xBF, 1, 0x00, 1, HAL_MAX_DELAY);
 8000352:	003b      	movs	r3, r7
 8000354:	22bf      	movs	r2, #191	; 0xbf
 8000356:	0030      	movs	r0, r6
 8000358:	9502      	str	r5, [sp, #8]
 800035a:	9701      	str	r7, [sp, #4]
 800035c:	9400      	str	r4, [sp, #0]
 800035e:	2190      	movs	r1, #144	; 0x90
 8000360:	f000 fc34 	bl	8000bcc <HAL_I2C_Mem_Write>
  uint8_t mode = 0x05;
 8000364:	2313      	movs	r3, #19
 8000366:	aa02      	add	r2, sp, #8
 8000368:	189b      	adds	r3, r3, r2
 800036a:	2205      	movs	r2, #5
 800036c:	701a      	strb	r2, [r3, #0]
	  for(pixel_data[0] = 0; pixel_data[0] < 4; pixel_data[0]++)
 800036e:	466b      	mov	r3, sp
  uint8_t pixel_data[4] = {0x00, 0x00, 0x00, 0x00};
 8000370:	9407      	str	r4, [sp, #28]
  uint8_t capdac_calA[4] = {0x00, 0x00, 0x00, 0x00};
 8000372:	9408      	str	r4, [sp, #32]
  uint8_t capdac_calB[4] = {0x00, 0x00, 0x00, 0x00};
 8000374:	940b      	str	r4, [sp, #44]	; 0x2c
	  for(pixel_data[0] = 0; pixel_data[0] < 4; pixel_data[0]++)
 8000376:	ae07      	add	r6, sp, #28
 8000378:	75dc      	strb	r4, [r3, #23]
 800037a:	466b      	mov	r3, sp
			  HAL_I2C_Mem_Write(&hi2c1, AD_ADDR, 0x0D, 1, (uint8_t *)&capdac_calA[pixel_data[0]], 1, HAL_MAX_DELAY);
 800037c:	2401      	movs	r4, #1
	  for(pixel_data[0] = 0; pixel_data[0] < 4; pixel_data[0]++)
 800037e:	7ddb      	ldrb	r3, [r3, #23]
 8000380:	7033      	strb	r3, [r6, #0]
 8000382:	2213      	movs	r2, #19
 8000384:	7833      	ldrb	r3, [r6, #0]
 8000386:	a902      	add	r1, sp, #8
 8000388:	1852      	adds	r2, r2, r1
 800038a:	2b03      	cmp	r3, #3
 800038c:	d902      	bls.n	8000394 <main+0xe8>
	  mode = 0x02;
 800038e:	2302      	movs	r3, #2
 8000390:	7013      	strb	r3, [r2, #0]
	  for(pixel_data[0] = 0; pixel_data[0] < 4; pixel_data[0]++)
 8000392:	e7f2      	b.n	800037a <main+0xce>
		  if(mode == 0x02)
 8000394:	7812      	ldrb	r2, [r2, #0]
 8000396:	2a02      	cmp	r2, #2
 8000398:	d117      	bne.n	80003ca <main+0x11e>
			  HAL_I2C_Mem_Write(&hi2c1, AD_ADDR, 0x0D, 1, (uint8_t *)&capdac_calA[pixel_data[0]], 1, HAL_MAX_DELAY);
 800039a:	4f40      	ldr	r7, [pc, #256]	; (800049c <main+0x1f0>)
 800039c:	aa08      	add	r2, sp, #32
 800039e:	18d3      	adds	r3, r2, r3
 80003a0:	9300      	str	r3, [sp, #0]
 80003a2:	220d      	movs	r2, #13
 80003a4:	2301      	movs	r3, #1
 80003a6:	2190      	movs	r1, #144	; 0x90
 80003a8:	9502      	str	r5, [sp, #8]
 80003aa:	9401      	str	r4, [sp, #4]
 80003ac:	0038      	movs	r0, r7
 80003ae:	f000 fc0d 	bl	8000bcc <HAL_I2C_Mem_Write>
			  HAL_I2C_Mem_Write(&hi2c1, AD_ADDR, 0x0E, 1, (uint8_t *)&capdac_calB[pixel_data[0]], 1, HAL_MAX_DELAY);
 80003b2:	9502      	str	r5, [sp, #8]
 80003b4:	9401      	str	r4, [sp, #4]
 80003b6:	7833      	ldrb	r3, [r6, #0]
 80003b8:	aa0b      	add	r2, sp, #44	; 0x2c
 80003ba:	18d3      	adds	r3, r2, r3
 80003bc:	9300      	str	r3, [sp, #0]
 80003be:	220e      	movs	r2, #14
 80003c0:	2301      	movs	r3, #1
 80003c2:	2190      	movs	r1, #144	; 0x90
 80003c4:	0038      	movs	r0, r7
 80003c6:	f000 fc01 	bl	8000bcc <HAL_I2C_Mem_Write>
		  HAL_I2C_Mem_Write(&hi2c1, AD_ADDR, CAP_SETUP, 1, &CAP_SETUP_SETTINGS[pixel_data[0]], 1, HAL_MAX_DELAY);
 80003ca:	9502      	str	r5, [sp, #8]
 80003cc:	9401      	str	r4, [sp, #4]
 80003ce:	7832      	ldrb	r2, [r6, #0]
 80003d0:	4b35      	ldr	r3, [pc, #212]	; (80004a8 <main+0x1fc>)
 80003d2:	4f32      	ldr	r7, [pc, #200]	; (800049c <main+0x1f0>)
 80003d4:	189b      	adds	r3, r3, r2
 80003d6:	9300      	str	r3, [sp, #0]
 80003d8:	2207      	movs	r2, #7
 80003da:	2301      	movs	r3, #1
 80003dc:	2190      	movs	r1, #144	; 0x90
 80003de:	0038      	movs	r0, r7
 80003e0:	f000 fbf4 	bl	8000bcc <HAL_I2C_Mem_Write>
		  HAL_I2C_Mem_Write(&hi2c1, AD_ADDR, EXC_SETUP, 1, &EXC_SETUP_SETTINGS[pixel_data[0]], 1, HAL_MAX_DELAY);
 80003e4:	9502      	str	r5, [sp, #8]
 80003e6:	9401      	str	r4, [sp, #4]
 80003e8:	7832      	ldrb	r2, [r6, #0]
 80003ea:	4b30      	ldr	r3, [pc, #192]	; (80004ac <main+0x200>)
 80003ec:	2190      	movs	r1, #144	; 0x90
 80003ee:	189b      	adds	r3, r3, r2
 80003f0:	9300      	str	r3, [sp, #0]
 80003f2:	2209      	movs	r2, #9
 80003f4:	2301      	movs	r3, #1
 80003f6:	0038      	movs	r0, r7
 80003f8:	f000 fbe8 	bl	8000bcc <HAL_I2C_Mem_Write>
		  HAL_I2C_Mem_Write(&hi2c1, AD_ADDR, 0x0a, 1, &mode, 1, HAL_MAX_DELAY);
 80003fc:	2313      	movs	r3, #19
 80003fe:	aa02      	add	r2, sp, #8
 8000400:	189b      	adds	r3, r3, r2
 8000402:	9300      	str	r3, [sp, #0]
 8000404:	220a      	movs	r2, #10
 8000406:	9502      	str	r5, [sp, #8]
 8000408:	9401      	str	r4, [sp, #4]
 800040a:	2301      	movs	r3, #1
 800040c:	2190      	movs	r1, #144	; 0x90
 800040e:	0038      	movs	r0, r7
 8000410:	f000 fbdc 	bl	8000bcc <HAL_I2C_Mem_Write>
		  while((RDY_GPIO_Port->IDR & RDY_Pin) != 0){}
 8000414:	2290      	movs	r2, #144	; 0x90
 8000416:	05d2      	lsls	r2, r2, #23
 8000418:	6913      	ldr	r3, [r2, #16]
 800041a:	4223      	tst	r3, r4
 800041c:	d1fc      	bne.n	8000418 <main+0x16c>
		  HAL_I2C_Mem_Read(&hi2c1, AD_ADDR, CAP_DATA, 1, &pixel_data[1], 3, HAL_MAX_DELAY);
 800041e:	2303      	movs	r3, #3
 8000420:	aa02      	add	r2, sp, #8
 8000422:	9301      	str	r3, [sp, #4]
 8000424:	3312      	adds	r3, #18
 8000426:	189b      	adds	r3, r3, r2
 8000428:	9300      	str	r3, [sp, #0]
 800042a:	0022      	movs	r2, r4
 800042c:	0023      	movs	r3, r4
 800042e:	9502      	str	r5, [sp, #8]
 8000430:	2190      	movs	r1, #144	; 0x90
 8000432:	0038      	movs	r0, r7
 8000434:	f000 fc80 	bl	8000d38 <HAL_I2C_Mem_Read>
		  if(mode == 0x05)
 8000438:	2313      	movs	r3, #19
 800043a:	aa02      	add	r2, sp, #8
 800043c:	189b      	adds	r3, r3, r2
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b05      	cmp	r3, #5
 8000442:	d117      	bne.n	8000474 <main+0x1c8>
			  HAL_I2C_Mem_Read(&hi2c1, AD_ADDR, 0x0D, 1, (uint8_t *)&capdac_calA[pixel_data[0]], 1, HAL_MAX_DELAY);
 8000444:	9502      	str	r5, [sp, #8]
 8000446:	9401      	str	r4, [sp, #4]
 8000448:	7833      	ldrb	r3, [r6, #0]
 800044a:	aa08      	add	r2, sp, #32
 800044c:	18d3      	adds	r3, r2, r3
 800044e:	9300      	str	r3, [sp, #0]
 8000450:	220d      	movs	r2, #13
 8000452:	0023      	movs	r3, r4
 8000454:	2190      	movs	r1, #144	; 0x90
 8000456:	0038      	movs	r0, r7
 8000458:	f000 fc6e 	bl	8000d38 <HAL_I2C_Mem_Read>
			  HAL_I2C_Mem_Read(&hi2c1, AD_ADDR, 0x0E, 1, (uint8_t *)&capdac_calB[pixel_data[0]], 1, HAL_MAX_DELAY);
 800045c:	9502      	str	r5, [sp, #8]
 800045e:	9401      	str	r4, [sp, #4]
 8000460:	7833      	ldrb	r3, [r6, #0]
 8000462:	aa0b      	add	r2, sp, #44	; 0x2c
 8000464:	18d3      	adds	r3, r2, r3
 8000466:	9300      	str	r3, [sp, #0]
 8000468:	220e      	movs	r2, #14
 800046a:	0023      	movs	r3, r4
 800046c:	2190      	movs	r1, #144	; 0x90
 800046e:	0038      	movs	r0, r7
 8000470:	f000 fc62 	bl	8000d38 <HAL_I2C_Mem_Read>
		  CDC_Transmit_FS(&pixel_data, 4);
 8000474:	2104      	movs	r1, #4
 8000476:	0030      	movs	r0, r6
 8000478:	f003 fa40 	bl	80038fc <CDC_Transmit_FS>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800047c:	2090      	movs	r0, #144	; 0x90
 800047e:	2110      	movs	r1, #16
 8000480:	05c0      	lsls	r0, r0, #23
 8000482:	f000 fa07 	bl	8000894 <HAL_GPIO_TogglePin>
		  while((RDY_GPIO_Port->IDR & RDY_Pin) == 0){}
 8000486:	2290      	movs	r2, #144	; 0x90
 8000488:	05d2      	lsls	r2, r2, #23
 800048a:	6913      	ldr	r3, [r2, #16]
 800048c:	4223      	tst	r3, r4
 800048e:	d0fc      	beq.n	800048a <main+0x1de>
	  for(pixel_data[0] = 0; pixel_data[0] < 4; pixel_data[0]++)
 8000490:	7833      	ldrb	r3, [r6, #0]
 8000492:	3301      	adds	r3, #1
 8000494:	7033      	strb	r3, [r6, #0]
 8000496:	e774      	b.n	8000382 <main+0xd6>
 8000498:	40021000 	.word	0x40021000
 800049c:	200003c4 	.word	0x200003c4
 80004a0:	40005400 	.word	0x40005400
 80004a4:	0000020b 	.word	0x0000020b
 80004a8:	20000000 	.word	0x20000000
 80004ac:	20000004 	.word	0x20000004

080004b0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004b0:	4770      	bx	lr
	...

080004b4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b4:	2001      	movs	r0, #1
 80004b6:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <HAL_MspInit+0x34>)
{
 80004b8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ba:	6999      	ldr	r1, [r3, #24]
 80004bc:	4301      	orrs	r1, r0
 80004be:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c0:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c2:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c4:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c6:	4002      	ands	r2, r0
 80004c8:	9200      	str	r2, [sp, #0]
 80004ca:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004cc:	69da      	ldr	r2, [r3, #28]
 80004ce:	430a      	orrs	r2, r1
 80004d0:	61da      	str	r2, [r3, #28]
 80004d2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 80004d4:	4a05      	ldr	r2, [pc, #20]	; (80004ec <HAL_MspInit+0x38>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d6:	400b      	ands	r3, r1
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	9b01      	ldr	r3, [sp, #4]
  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 80004dc:	2310      	movs	r3, #16
 80004de:	6811      	ldr	r1, [r2, #0]
 80004e0:	430b      	orrs	r3, r1
 80004e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e4:	b002      	add	sp, #8
 80004e6:	4770      	bx	lr
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40010000 	.word	0x40010000

080004f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004f0:	b510      	push	{r4, lr}
 80004f2:	0004      	movs	r4, r0
 80004f4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f6:	2214      	movs	r2, #20
 80004f8:	2100      	movs	r1, #0
 80004fa:	a803      	add	r0, sp, #12
 80004fc:	f003 fc1f 	bl	8003d3e <memset>
  if(hi2c->Instance==I2C1)
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <HAL_I2C_MspInit+0x5c>)
 8000502:	6822      	ldr	r2, [r4, #0]
 8000504:	429a      	cmp	r2, r3
 8000506:	d11e      	bne.n	8000546 <HAL_I2C_MspInit+0x56>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000508:	2180      	movs	r1, #128	; 0x80
 800050a:	4c11      	ldr	r4, [pc, #68]	; (8000550 <HAL_I2C_MspInit+0x60>)
 800050c:	03c9      	lsls	r1, r1, #15
 800050e:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000510:	4810      	ldr	r0, [pc, #64]	; (8000554 <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000512:	430a      	orrs	r2, r1
 8000514:	6162      	str	r2, [r4, #20]
 8000516:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000518:	2203      	movs	r2, #3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800051a:	400b      	ands	r3, r1
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000520:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000522:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000524:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000526:	3b11      	subs	r3, #17
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000528:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800052a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800052c:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800052e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000530:	f000 f8fc 	bl	800072c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000534:	2180      	movs	r1, #128	; 0x80
 8000536:	69e2      	ldr	r2, [r4, #28]
 8000538:	0389      	lsls	r1, r1, #14
 800053a:	430a      	orrs	r2, r1
 800053c:	61e2      	str	r2, [r4, #28]
 800053e:	69e3      	ldr	r3, [r4, #28]
 8000540:	400b      	ands	r3, r1
 8000542:	9302      	str	r3, [sp, #8]
 8000544:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000546:	b008      	add	sp, #32
 8000548:	bd10      	pop	{r4, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	40005400 	.word	0x40005400
 8000550:	40021000 	.word	0x40021000
 8000554:	48001400 	.word	0x48001400

08000558 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000558:	4770      	bx	lr

0800055a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055a:	e7fe      	b.n	800055a <HardFault_Handler>

0800055c <SVC_Handler>:
 800055c:	4770      	bx	lr

0800055e <PendSV_Handler>:
 800055e:	4770      	bx	lr

08000560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000560:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000562:	f000 f881 	bl	8000668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000566:	bd10      	pop	{r4, pc}

08000568 <USB_IRQHandler>:

/**
  * @brief This function handles USB global Interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000568:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800056a:	4802      	ldr	r0, [pc, #8]	; (8000574 <USB_IRQHandler+0xc>)
 800056c:	f000 fd7e 	bl	800106c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000570:	bd10      	pop	{r4, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	200010a8 	.word	0x200010a8

08000578 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000578:	4770      	bx	lr
	...

0800057c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800057c:	4813      	ldr	r0, [pc, #76]	; (80005cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800057e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000580:	4813      	ldr	r0, [pc, #76]	; (80005d0 <LoopForever+0x6>)
    LDR R1, [R0]
 8000582:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000584:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000586:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <LoopForever+0xa>)
    CMP R1, R2
 8000588:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800058a:	d105      	bne.n	8000598 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800058c:	4812      	ldr	r0, [pc, #72]	; (80005d8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800058e:	4913      	ldr	r1, [pc, #76]	; (80005dc <LoopForever+0x12>)
    STR R1, [R0]
 8000590:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000592:	4813      	ldr	r0, [pc, #76]	; (80005e0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000594:	4913      	ldr	r1, [pc, #76]	; (80005e4 <LoopForever+0x1a>)
    STR R1, [R0]
 8000596:	6001      	str	r1, [r0, #0]

08000598 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000598:	4813      	ldr	r0, [pc, #76]	; (80005e8 <LoopForever+0x1e>)
  ldr r1, =_edata
 800059a:	4914      	ldr	r1, [pc, #80]	; (80005ec <LoopForever+0x22>)
  ldr r2, =_sidata
 800059c:	4a14      	ldr	r2, [pc, #80]	; (80005f0 <LoopForever+0x26>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a0:	e002      	b.n	80005a8 <LoopCopyDataInit>

080005a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a6:	3304      	adds	r3, #4

080005a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ac:	d3f9      	bcc.n	80005a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ae:	4a11      	ldr	r2, [pc, #68]	; (80005f4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80005b0:	4c11      	ldr	r4, [pc, #68]	; (80005f8 <LoopForever+0x2e>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b4:	e001      	b.n	80005ba <LoopFillZerobss>

080005b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b8:	3204      	adds	r2, #4

080005ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005bc:	d3fb      	bcc.n	80005b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005be:	f7ff ffdb 	bl	8000578 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80005c2:	f003 fb8f 	bl	8003ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005c6:	f7ff fe71 	bl	80002ac <main>

080005ca <LoopForever>:

LoopForever:
    b LoopForever
 80005ca:	e7fe      	b.n	80005ca <LoopForever>
  ldr   r0, =_estack
 80005cc:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80005d0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80005d4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80005d8:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80005dc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80005e0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80005e4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80005e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ec:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80005f0:	08003de8 	.word	0x08003de8
  ldr r2, =_sbss
 80005f4:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80005f8:	2000139c 	.word	0x2000139c

080005fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC1_IRQHandler>
	...

08000600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000604:	20fa      	movs	r0, #250	; 0xfa
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <HAL_InitTick+0x3c>)
 8000608:	0080      	lsls	r0, r0, #2
 800060a:	7819      	ldrb	r1, [r3, #0]
 800060c:	f7ff fd90 	bl	8000130 <__udivsi3>
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <HAL_InitTick+0x40>)
 8000612:	0001      	movs	r1, r0
 8000614:	6818      	ldr	r0, [r3, #0]
 8000616:	f7ff fd8b 	bl	8000130 <__udivsi3>
 800061a:	f000 f86d 	bl	80006f8 <HAL_SYSTICK_Config>
 800061e:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000620:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000622:	2c00      	cmp	r4, #0
 8000624:	d109      	bne.n	800063a <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000626:	2d03      	cmp	r5, #3
 8000628:	d807      	bhi.n	800063a <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800062a:	3802      	subs	r0, #2
 800062c:	0022      	movs	r2, r4
 800062e:	0029      	movs	r1, r5
 8000630:	f000 f82c 	bl	800068c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000634:	0020      	movs	r0, r4
 8000636:	4b03      	ldr	r3, [pc, #12]	; (8000644 <HAL_InitTick+0x44>)
 8000638:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	2000000c 	.word	0x2000000c
 8000640:	20000008 	.word	0x20000008
 8000644:	20000010 	.word	0x20000010

08000648 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000648:	2310      	movs	r3, #16
 800064a:	4a06      	ldr	r2, [pc, #24]	; (8000664 <HAL_Init+0x1c>)
{
 800064c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800064e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000650:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000652:	430b      	orrs	r3, r1
 8000654:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000656:	f7ff ffd3 	bl	8000600 <HAL_InitTick>
  HAL_MspInit();
 800065a:	f7ff ff2b 	bl	80004b4 <HAL_MspInit>
}
 800065e:	2000      	movs	r0, #0
 8000660:	bd10      	pop	{r4, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	40022000 	.word	0x40022000

08000668 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000668:	4a03      	ldr	r2, [pc, #12]	; (8000678 <HAL_IncTick+0x10>)
 800066a:	4b04      	ldr	r3, [pc, #16]	; (800067c <HAL_IncTick+0x14>)
 800066c:	6811      	ldr	r1, [r2, #0]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	185b      	adds	r3, r3, r1
 8000672:	6013      	str	r3, [r2, #0]
}
 8000674:	4770      	bx	lr
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	20000410 	.word	0x20000410
 800067c:	2000000c 	.word	0x2000000c

08000680 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000680:	4b01      	ldr	r3, [pc, #4]	; (8000688 <HAL_GetTick+0x8>)
 8000682:	6818      	ldr	r0, [r3, #0]
}
 8000684:	4770      	bx	lr
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	20000410 	.word	0x20000410

0800068c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800068c:	b530      	push	{r4, r5, lr}
 800068e:	25ff      	movs	r5, #255	; 0xff
 8000690:	2403      	movs	r4, #3
 8000692:	002a      	movs	r2, r5
 8000694:	b2c3      	uxtb	r3, r0
 8000696:	401c      	ands	r4, r3
 8000698:	00e4      	lsls	r4, r4, #3
 800069a:	40a2      	lsls	r2, r4
 800069c:	0189      	lsls	r1, r1, #6
 800069e:	4029      	ands	r1, r5
 80006a0:	43d2      	mvns	r2, r2
 80006a2:	40a1      	lsls	r1, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80006a4:	2800      	cmp	r0, #0
 80006a6:	db0a      	blt.n	80006be <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006a8:	24c0      	movs	r4, #192	; 0xc0
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <HAL_NVIC_SetPriority+0x4c>)
 80006ac:	0880      	lsrs	r0, r0, #2
 80006ae:	0080      	lsls	r0, r0, #2
 80006b0:	18c0      	adds	r0, r0, r3
 80006b2:	00a4      	lsls	r4, r4, #2
 80006b4:	5903      	ldr	r3, [r0, r4]
 80006b6:	401a      	ands	r2, r3
 80006b8:	4311      	orrs	r1, r2
 80006ba:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80006bc:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006be:	200f      	movs	r0, #15
 80006c0:	4003      	ands	r3, r0
 80006c2:	3b08      	subs	r3, #8
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <HAL_NVIC_SetPriority+0x50>)
 80006c6:	089b      	lsrs	r3, r3, #2
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	181b      	adds	r3, r3, r0
 80006cc:	69d8      	ldr	r0, [r3, #28]
 80006ce:	4002      	ands	r2, r0
 80006d0:	4311      	orrs	r1, r2
 80006d2:	61d9      	str	r1, [r3, #28]
 80006d4:	e7f2      	b.n	80006bc <HAL_NVIC_SetPriority+0x30>
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	e000e100 	.word	0xe000e100
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006e0:	2800      	cmp	r0, #0
 80006e2:	db05      	blt.n	80006f0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e4:	231f      	movs	r3, #31
 80006e6:	4018      	ands	r0, r3
 80006e8:	3b1e      	subs	r3, #30
 80006ea:	4083      	lsls	r3, r0
 80006ec:	4a01      	ldr	r2, [pc, #4]	; (80006f4 <HAL_NVIC_EnableIRQ+0x14>)
 80006ee:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80006f0:	4770      	bx	lr
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	e000e100 	.word	0xe000e100

080006f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f8:	4a09      	ldr	r2, [pc, #36]	; (8000720 <HAL_SYSTICK_Config+0x28>)
 80006fa:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80006fc:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d80d      	bhi.n	800071e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000702:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000704:	4a07      	ldr	r2, [pc, #28]	; (8000724 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000706:	4808      	ldr	r0, [pc, #32]	; (8000728 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000708:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800070a:	6a03      	ldr	r3, [r0, #32]
 800070c:	0609      	lsls	r1, r1, #24
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	0a1b      	lsrs	r3, r3, #8
 8000712:	430b      	orrs	r3, r1
 8000714:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000716:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000718:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800071a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800071e:	4770      	bx	lr
 8000720:	00ffffff 	.word	0x00ffffff
 8000724:	e000e010 	.word	0xe000e010
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800072c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800072e:	680b      	ldr	r3, [r1, #0]
{ 
 8000730:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000732:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 8000734:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000736:	9a03      	ldr	r2, [sp, #12]
 8000738:	40da      	lsrs	r2, r3
 800073a:	d101      	bne.n	8000740 <HAL_GPIO_Init+0x14>
      }
    }

    position++;
  } 
}
 800073c:	b007      	add	sp, #28
 800073e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000740:	2201      	movs	r2, #1
 8000742:	409a      	lsls	r2, r3
 8000744:	4694      	mov	ip, r2
 8000746:	4664      	mov	r4, ip
 8000748:	9a03      	ldr	r2, [sp, #12]
 800074a:	4022      	ands	r2, r4
 800074c:	9201      	str	r2, [sp, #4]
    if (iocurrent != 0x00u)
 800074e:	d100      	bne.n	8000752 <HAL_GPIO_Init+0x26>
 8000750:	e08e      	b.n	8000870 <HAL_GPIO_Init+0x144>
 8000752:	2503      	movs	r5, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000754:	684a      	ldr	r2, [r1, #4]
 8000756:	005e      	lsls	r6, r3, #1
 8000758:	0017      	movs	r7, r2
 800075a:	9200      	str	r2, [sp, #0]
 800075c:	40b5      	lsls	r5, r6
 800075e:	2210      	movs	r2, #16
 8000760:	4397      	bics	r7, r2
 8000762:	43ea      	mvns	r2, r5
 8000764:	9202      	str	r2, [sp, #8]
 8000766:	1e7a      	subs	r2, r7, #1
 8000768:	2a01      	cmp	r2, #1
 800076a:	d810      	bhi.n	800078e <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR;
 800076c:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800076e:	9a02      	ldr	r2, [sp, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000770:	2501      	movs	r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000772:	4014      	ands	r4, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000774:	68ca      	ldr	r2, [r1, #12]
 8000776:	40b2      	lsls	r2, r6
 8000778:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 800077a:	6082      	str	r2, [r0, #8]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800077c:	4662      	mov	r2, ip
        temp = GPIOx->OTYPER;
 800077e:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000780:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000782:	9a00      	ldr	r2, [sp, #0]
 8000784:	0912      	lsrs	r2, r2, #4
 8000786:	402a      	ands	r2, r5
 8000788:	409a      	lsls	r2, r3
 800078a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 800078c:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800078e:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000790:	9a02      	ldr	r2, [sp, #8]
 8000792:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000794:	688a      	ldr	r2, [r1, #8]
 8000796:	40b2      	lsls	r2, r6
 8000798:	4322      	orrs	r2, r4
      GPIOx->PUPDR = temp;
 800079a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800079c:	2f02      	cmp	r7, #2
 800079e:	d10d      	bne.n	80007bc <HAL_GPIO_Init+0x90>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007a0:	2407      	movs	r4, #7
 80007a2:	250f      	movs	r5, #15
 80007a4:	401c      	ands	r4, r3
 80007a6:	00a4      	lsls	r4, r4, #2
 80007a8:	40a5      	lsls	r5, r4
        temp = GPIOx->AFR[position >> 3u];
 80007aa:	08da      	lsrs	r2, r3, #3
 80007ac:	0092      	lsls	r2, r2, #2
 80007ae:	1882      	adds	r2, r0, r2
 80007b0:	6a17      	ldr	r7, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007b2:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80007b4:	690d      	ldr	r5, [r1, #16]
 80007b6:	40a5      	lsls	r5, r4
 80007b8:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 80007ba:	6217      	str	r7, [r2, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007bc:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 80007be:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80007c0:	9d02      	ldr	r5, [sp, #8]
 80007c2:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007c4:	9a00      	ldr	r2, [sp, #0]
 80007c6:	4022      	ands	r2, r4
 80007c8:	40b2      	lsls	r2, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007ca:	2480      	movs	r4, #128	; 0x80
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007cc:	4315      	orrs	r5, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007ce:	9a00      	ldr	r2, [sp, #0]
 80007d0:	0564      	lsls	r4, r4, #21
      GPIOx->MODER = temp;
 80007d2:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007d4:	4222      	tst	r2, r4
 80007d6:	d04b      	beq.n	8000870 <HAL_GPIO_Init+0x144>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d8:	2501      	movs	r5, #1
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80007da:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007dc:	4a25      	ldr	r2, [pc, #148]	; (8000874 <HAL_GPIO_Init+0x148>)
 80007de:	6994      	ldr	r4, [r2, #24]
 80007e0:	432c      	orrs	r4, r5
 80007e2:	6194      	str	r4, [r2, #24]
 80007e4:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 80007e6:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e8:	402a      	ands	r2, r5
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80007ea:	3502      	adds	r5, #2
 80007ec:	401d      	ands	r5, r3
 80007ee:	00ad      	lsls	r5, r5, #2
 80007f0:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	9205      	str	r2, [sp, #20]
 80007f4:	9a05      	ldr	r2, [sp, #20]
 80007f6:	4a20      	ldr	r2, [pc, #128]	; (8000878 <HAL_GPIO_Init+0x14c>)
 80007f8:	00a4      	lsls	r4, r4, #2
 80007fa:	18a4      	adds	r4, r4, r2
        temp = SYSCFG->EXTICR[position >> 2u];
 80007fc:	68a6      	ldr	r6, [r4, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80007fe:	2200      	movs	r2, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000800:	43be      	bics	r6, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000802:	2790      	movs	r7, #144	; 0x90
 8000804:	05ff      	lsls	r7, r7, #23
 8000806:	42b8      	cmp	r0, r7
 8000808:	d008      	beq.n	800081c <HAL_GPIO_Init+0xf0>
 800080a:	4f1c      	ldr	r7, [pc, #112]	; (800087c <HAL_GPIO_Init+0x150>)
 800080c:	3201      	adds	r2, #1
 800080e:	42b8      	cmp	r0, r7
 8000810:	d004      	beq.n	800081c <HAL_GPIO_Init+0xf0>
 8000812:	4f1b      	ldr	r7, [pc, #108]	; (8000880 <HAL_GPIO_Init+0x154>)
 8000814:	3204      	adds	r2, #4
 8000816:	42b8      	cmp	r0, r7
 8000818:	d100      	bne.n	800081c <HAL_GPIO_Init+0xf0>
 800081a:	3a03      	subs	r2, #3
 800081c:	40aa      	lsls	r2, r5
 800081e:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000820:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000822:	4a18      	ldr	r2, [pc, #96]	; (8000884 <HAL_GPIO_Init+0x158>)
        temp &= ~(iocurrent);
 8000824:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 8000826:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000828:	9d01      	ldr	r5, [sp, #4]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800082a:	9f00      	ldr	r7, [sp, #0]
        temp &= ~(iocurrent);
 800082c:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800082e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000830:	03ff      	lsls	r7, r7, #15
 8000832:	d401      	bmi.n	8000838 <HAL_GPIO_Init+0x10c>
        temp &= ~(iocurrent);
 8000834:	0035      	movs	r5, r6
 8000836:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8000838:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800083a:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800083c:	9d01      	ldr	r5, [sp, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800083e:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8000840:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000842:	03bf      	lsls	r7, r7, #14
 8000844:	d401      	bmi.n	800084a <HAL_GPIO_Init+0x11e>
        temp &= ~(iocurrent);
 8000846:	0035      	movs	r5, r6
 8000848:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 800084a:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800084c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800084e:	9d01      	ldr	r5, [sp, #4]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000850:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8000852:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000854:	02ff      	lsls	r7, r7, #11
 8000856:	d401      	bmi.n	800085c <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8000858:	0035      	movs	r5, r6
 800085a:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 800085c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800085e:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000860:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000862:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8000864:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000866:	02bf      	lsls	r7, r7, #10
 8000868:	d401      	bmi.n	800086e <HAL_GPIO_Init+0x142>
        temp &= ~(iocurrent);
 800086a:	4025      	ands	r5, r4
 800086c:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 800086e:	60d6      	str	r6, [r2, #12]
    position++;
 8000870:	3301      	adds	r3, #1
 8000872:	e760      	b.n	8000736 <HAL_GPIO_Init+0xa>
 8000874:	40021000 	.word	0x40021000
 8000878:	40010000 	.word	0x40010000
 800087c:	48000400 	.word	0x48000400
 8000880:	48000800 	.word	0x48000800
 8000884:	40010400 	.word	0x40010400

08000888 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000888:	2a00      	cmp	r2, #0
 800088a:	d001      	beq.n	8000890 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800088c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800088e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000890:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000892:	e7fc      	b.n	800088e <HAL_GPIO_WritePin+0x6>

08000894 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000894:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000896:	0013      	movs	r3, r2
 8000898:	400b      	ands	r3, r1
 800089a:	041b      	lsls	r3, r3, #16
 800089c:	4391      	bics	r1, r2
 800089e:	4319      	orrs	r1, r3
 80008a0:	6181      	str	r1, [r0, #24]
}
 80008a2:	4770      	bx	lr

080008a4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80008a4:	6803      	ldr	r3, [r0, #0]
 80008a6:	699a      	ldr	r2, [r3, #24]
 80008a8:	0792      	lsls	r2, r2, #30
 80008aa:	d501      	bpl.n	80008b0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80008ac:	2200      	movs	r2, #0
 80008ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80008b0:	2201      	movs	r2, #1
 80008b2:	6999      	ldr	r1, [r3, #24]
 80008b4:	4211      	tst	r1, r2
 80008b6:	d102      	bne.n	80008be <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80008b8:	6999      	ldr	r1, [r3, #24]
 80008ba:	430a      	orrs	r2, r1
 80008bc:	619a      	str	r2, [r3, #24]
  }
}
 80008be:	4770      	bx	lr

080008c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80008c0:	b530      	push	{r4, r5, lr}
 80008c2:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80008c4:	0412      	lsls	r2, r2, #16
 80008c6:	6800      	ldr	r0, [r0, #0]
 80008c8:	4322      	orrs	r2, r4
 80008ca:	4313      	orrs	r3, r2
 80008cc:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <I2C_TransferConfig+0x24>)
 80008ce:	6845      	ldr	r5, [r0, #4]
 80008d0:	0589      	lsls	r1, r1, #22
 80008d2:	0d64      	lsrs	r4, r4, #21
 80008d4:	0d89      	lsrs	r1, r1, #22
 80008d6:	4314      	orrs	r4, r2
 80008d8:	43a5      	bics	r5, r4
 80008da:	430b      	orrs	r3, r1
 80008dc:	432b      	orrs	r3, r5
 80008de:	6043      	str	r3, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80008e0:	bd30      	pop	{r4, r5, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	03ff63ff 	.word	0x03ff63ff

080008e8 <I2C_IsAcknowledgeFailed>:
{
 80008e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80008ea:	6803      	ldr	r3, [r0, #0]
{
 80008ec:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80008ee:	6998      	ldr	r0, [r3, #24]
 80008f0:	2310      	movs	r3, #16
{
 80008f2:	000e      	movs	r6, r1
 80008f4:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80008f6:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80008f8:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80008fa:	2800      	cmp	r0, #0
 80008fc:	d118      	bne.n	8000930 <I2C_IsAcknowledgeFailed+0x48>
}
 80008fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000900:	1c72      	adds	r2, r6, #1
 8000902:	d016      	beq.n	8000932 <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000904:	f7ff febc 	bl	8000680 <HAL_GetTick>
 8000908:	1bc0      	subs	r0, r0, r7
 800090a:	42b0      	cmp	r0, r6
 800090c:	d801      	bhi.n	8000912 <I2C_IsAcknowledgeFailed+0x2a>
 800090e:	2e00      	cmp	r6, #0
 8000910:	d10e      	bne.n	8000930 <I2C_IsAcknowledgeFailed+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000912:	2220      	movs	r2, #32
 8000914:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000916:	4313      	orrs	r3, r2
 8000918:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800091a:	0023      	movs	r3, r4
 800091c:	3341      	adds	r3, #65	; 0x41
 800091e:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000920:	0022      	movs	r2, r4
 8000922:	2300      	movs	r3, #0
 8000924:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8000926:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000928:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 800092a:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 800092c:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 800092e:	e7e6      	b.n	80008fe <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000930:	6823      	ldr	r3, [r4, #0]
 8000932:	699a      	ldr	r2, [r3, #24]
 8000934:	422a      	tst	r2, r5
 8000936:	d0e3      	beq.n	8000900 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000938:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 800093a:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800093c:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800093e:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000940:	f7ff ffb0 	bl	80008a4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000944:	6822      	ldr	r2, [r4, #0]
 8000946:	4906      	ldr	r1, [pc, #24]	; (8000960 <I2C_IsAcknowledgeFailed+0x78>)
 8000948:	6853      	ldr	r3, [r2, #4]
 800094a:	400b      	ands	r3, r1
 800094c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800094e:	2304      	movs	r3, #4
 8000950:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000952:	4313      	orrs	r3, r2
 8000954:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000956:	0023      	movs	r3, r4
 8000958:	3341      	adds	r3, #65	; 0x41
 800095a:	701d      	strb	r5, [r3, #0]
 800095c:	e7e0      	b.n	8000920 <I2C_IsAcknowledgeFailed+0x38>
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	fe00e800 	.word	0xfe00e800

08000964 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000966:	0004      	movs	r4, r0
 8000968:	000d      	movs	r5, r1
 800096a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800096c:	2720      	movs	r7, #32
 800096e:	6823      	ldr	r3, [r4, #0]
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	423b      	tst	r3, r7
 8000974:	d001      	beq.n	800097a <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8000976:	2000      	movs	r0, #0
}
 8000978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800097a:	0032      	movs	r2, r6
 800097c:	0029      	movs	r1, r5
 800097e:	0020      	movs	r0, r4
 8000980:	f7ff ffb2 	bl	80008e8 <I2C_IsAcknowledgeFailed>
 8000984:	2800      	cmp	r0, #0
 8000986:	d113      	bne.n	80009b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000988:	f7ff fe7a 	bl	8000680 <HAL_GetTick>
 800098c:	1b80      	subs	r0, r0, r6
 800098e:	42a8      	cmp	r0, r5
 8000990:	d801      	bhi.n	8000996 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8000992:	2d00      	cmp	r5, #0
 8000994:	d1eb      	bne.n	800096e <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000996:	2220      	movs	r2, #32
 8000998:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800099a:	4313      	orrs	r3, r2
 800099c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800099e:	0023      	movs	r3, r4
 80009a0:	3341      	adds	r3, #65	; 0x41
 80009a2:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80009a4:	0022      	movs	r2, r4
 80009a6:	2300      	movs	r3, #0
 80009a8:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 80009aa:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80009ac:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 80009ae:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80009b0:	2001      	movs	r0, #1
 80009b2:	e7e1      	b.n	8000978 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

080009b4 <I2C_WaitOnFlagUntilTimeout>:
{
 80009b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009b6:	0004      	movs	r4, r0
 80009b8:	000e      	movs	r6, r1
 80009ba:	0017      	movs	r7, r2
 80009bc:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80009be:	6822      	ldr	r2, [r4, #0]
 80009c0:	6993      	ldr	r3, [r2, #24]
 80009c2:	4033      	ands	r3, r6
 80009c4:	1b9b      	subs	r3, r3, r6
 80009c6:	4259      	negs	r1, r3
 80009c8:	414b      	adcs	r3, r1
 80009ca:	42bb      	cmp	r3, r7
 80009cc:	d001      	beq.n	80009d2 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80009ce:	2000      	movs	r0, #0
 80009d0:	e017      	b.n	8000a02 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80009d2:	1c6b      	adds	r3, r5, #1
 80009d4:	d0f4      	beq.n	80009c0 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009d6:	f7ff fe53 	bl	8000680 <HAL_GetTick>
 80009da:	9b06      	ldr	r3, [sp, #24]
 80009dc:	1ac0      	subs	r0, r0, r3
 80009de:	42a8      	cmp	r0, r5
 80009e0:	d801      	bhi.n	80009e6 <I2C_WaitOnFlagUntilTimeout+0x32>
 80009e2:	2d00      	cmp	r5, #0
 80009e4:	d1eb      	bne.n	80009be <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80009e6:	2220      	movs	r2, #32
 80009e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 80009ea:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80009ec:	4313      	orrs	r3, r2
 80009ee:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80009f0:	0023      	movs	r3, r4
 80009f2:	3341      	adds	r3, #65	; 0x41
 80009f4:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80009f6:	0022      	movs	r2, r4
 80009f8:	2300      	movs	r3, #0
 80009fa:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 80009fc:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80009fe:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8000a00:	7023      	strb	r3, [r4, #0]
}
 8000a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000a04 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a06:	0004      	movs	r4, r0
 8000a08:	000d      	movs	r5, r1
 8000a0a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000a0c:	2702      	movs	r7, #2
 8000a0e:	6823      	ldr	r3, [r4, #0]
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	423b      	tst	r3, r7
 8000a14:	d001      	beq.n	8000a1a <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8000a16:	2000      	movs	r0, #0
}
 8000a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000a1a:	0032      	movs	r2, r6
 8000a1c:	0029      	movs	r1, r5
 8000a1e:	0020      	movs	r0, r4
 8000a20:	f7ff ff62 	bl	80008e8 <I2C_IsAcknowledgeFailed>
 8000a24:	2800      	cmp	r0, #0
 8000a26:	d115      	bne.n	8000a54 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000a28:	1c6b      	adds	r3, r5, #1
 8000a2a:	d0f0      	beq.n	8000a0e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a2c:	f7ff fe28 	bl	8000680 <HAL_GetTick>
 8000a30:	1b80      	subs	r0, r0, r6
 8000a32:	42a8      	cmp	r0, r5
 8000a34:	d801      	bhi.n	8000a3a <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	d1e9      	bne.n	8000a0e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000a3a:	2220      	movs	r2, #32
 8000a3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000a42:	0023      	movs	r3, r4
 8000a44:	3341      	adds	r3, #65	; 0x41
 8000a46:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a48:	0022      	movs	r2, r4
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8000a4e:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a50:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8000a52:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8000a54:	2001      	movs	r0, #1
 8000a56:	e7df      	b.n	8000a18 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08000a58 <I2C_RequestMemoryWrite>:
{
 8000a58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000a5a:	0014      	movs	r4, r2
 8000a5c:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <I2C_RequestMemoryWrite+0x60>)
{
 8000a62:	0005      	movs	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2380      	movs	r3, #128	; 0x80
 8000a68:	045b      	lsls	r3, r3, #17
 8000a6a:	f7ff ff29 	bl	80008c0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000a6e:	9a07      	ldr	r2, [sp, #28]
 8000a70:	9906      	ldr	r1, [sp, #24]
 8000a72:	0028      	movs	r0, r5
 8000a74:	f7ff ffc6 	bl	8000a04 <I2C_WaitOnTXISFlagUntilTimeout>
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	d001      	beq.n	8000a80 <I2C_RequestMemoryWrite+0x28>
    return HAL_ERROR;
 8000a7c:	2001      	movs	r0, #1
}
 8000a7e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8000a80:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000a82:	2e01      	cmp	r6, #1
 8000a84:	d10d      	bne.n	8000aa2 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000a86:	b2e4      	uxtb	r4, r4
 8000a88:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8000a8a:	9b07      	ldr	r3, [sp, #28]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	9b06      	ldr	r3, [sp, #24]
 8000a94:	0028      	movs	r0, r5
 8000a96:	f7ff ff8d 	bl	80009b4 <I2C_WaitOnFlagUntilTimeout>
 8000a9a:	1e43      	subs	r3, r0, #1
 8000a9c:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8000a9e:	b2c0      	uxtb	r0, r0
 8000aa0:	e7ed      	b.n	8000a7e <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000aa2:	0a22      	lsrs	r2, r4, #8
 8000aa4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000aa6:	9906      	ldr	r1, [sp, #24]
 8000aa8:	9a07      	ldr	r2, [sp, #28]
 8000aaa:	0028      	movs	r0, r5
 8000aac:	f7ff ffaa 	bl	8000a04 <I2C_WaitOnTXISFlagUntilTimeout>
 8000ab0:	2800      	cmp	r0, #0
 8000ab2:	d1e3      	bne.n	8000a7c <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000ab4:	682b      	ldr	r3, [r5, #0]
 8000ab6:	e7e6      	b.n	8000a86 <I2C_RequestMemoryWrite+0x2e>
 8000ab8:	80002000 	.word	0x80002000

08000abc <I2C_RequestMemoryRead>:
{
 8000abc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000abe:	0005      	movs	r5, r0
 8000ac0:	0014      	movs	r4, r2
 8000ac2:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <I2C_RequestMemoryRead+0x60>)
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2300      	movs	r3, #0
 8000acc:	f7ff fef8 	bl	80008c0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ad0:	9a07      	ldr	r2, [sp, #28]
 8000ad2:	9906      	ldr	r1, [sp, #24]
 8000ad4:	0028      	movs	r0, r5
 8000ad6:	f7ff ff95 	bl	8000a04 <I2C_WaitOnTXISFlagUntilTimeout>
 8000ada:	2800      	cmp	r0, #0
 8000adc:	d001      	beq.n	8000ae2 <I2C_RequestMemoryRead+0x26>
    return HAL_ERROR;
 8000ade:	2001      	movs	r0, #1
}
 8000ae0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8000ae2:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000ae4:	2e01      	cmp	r6, #1
 8000ae6:	d10d      	bne.n	8000b04 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000ae8:	b2e4      	uxtb	r4, r4
 8000aea:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000aec:	9b07      	ldr	r3, [sp, #28]
 8000aee:	2200      	movs	r2, #0
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	2140      	movs	r1, #64	; 0x40
 8000af4:	9b06      	ldr	r3, [sp, #24]
 8000af6:	0028      	movs	r0, r5
 8000af8:	f7ff ff5c 	bl	80009b4 <I2C_WaitOnFlagUntilTimeout>
 8000afc:	1e43      	subs	r3, r0, #1
 8000afe:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8000b00:	b2c0      	uxtb	r0, r0
 8000b02:	e7ed      	b.n	8000ae0 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000b04:	0a22      	lsrs	r2, r4, #8
 8000b06:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b08:	9906      	ldr	r1, [sp, #24]
 8000b0a:	9a07      	ldr	r2, [sp, #28]
 8000b0c:	0028      	movs	r0, r5
 8000b0e:	f7ff ff79 	bl	8000a04 <I2C_WaitOnTXISFlagUntilTimeout>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	d1e3      	bne.n	8000ade <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000b16:	682b      	ldr	r3, [r5, #0]
 8000b18:	e7e6      	b.n	8000ae8 <I2C_RequestMemoryRead+0x2c>
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	80002000 	.word	0x80002000

08000b20 <HAL_I2C_Init>:
{
 8000b20:	b570      	push	{r4, r5, r6, lr}
 8000b22:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000b24:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8000b26:	2c00      	cmp	r4, #0
 8000b28:	d03f      	beq.n	8000baa <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b2a:	0025      	movs	r5, r4
 8000b2c:	3541      	adds	r5, #65	; 0x41
 8000b2e:	782b      	ldrb	r3, [r5, #0]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d105      	bne.n	8000b42 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8000b36:	0022      	movs	r2, r4
 8000b38:	3240      	adds	r2, #64	; 0x40
 8000b3a:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8000b3c:	0020      	movs	r0, r4
 8000b3e:	f7ff fcd7 	bl	80004f0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b42:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000b44:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b46:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8000b48:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b4a:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	68a6      	ldr	r6, [r4, #8]
 8000b50:	438a      	bics	r2, r1
 8000b52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000b54:	6861      	ldr	r1, [r4, #4]
 8000b56:	4a1a      	ldr	r2, [pc, #104]	; (8000bc0 <HAL_I2C_Init+0xa0>)
 8000b58:	400a      	ands	r2, r1
 8000b5a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000b5c:	6899      	ldr	r1, [r3, #8]
 8000b5e:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <HAL_I2C_Init+0xa4>)
 8000b60:	4011      	ands	r1, r2
 8000b62:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b64:	2801      	cmp	r0, #1
 8000b66:	d121      	bne.n	8000bac <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000b68:	2180      	movs	r1, #128	; 0x80
 8000b6a:	0209      	lsls	r1, r1, #8
 8000b6c:	4331      	orrs	r1, r6
 8000b6e:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000b70:	6858      	ldr	r0, [r3, #4]
 8000b72:	4915      	ldr	r1, [pc, #84]	; (8000bc8 <HAL_I2C_Init+0xa8>)
 8000b74:	4301      	orrs	r1, r0
 8000b76:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000b78:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b7a:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000b7c:	400a      	ands	r2, r1
 8000b7e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000b80:	6961      	ldr	r1, [r4, #20]
 8000b82:	6922      	ldr	r2, [r4, #16]
 8000b84:	430a      	orrs	r2, r1
 8000b86:	69a1      	ldr	r1, [r4, #24]
 8000b88:	0209      	lsls	r1, r1, #8
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000b8e:	6a21      	ldr	r1, [r4, #32]
 8000b90:	69e2      	ldr	r2, [r4, #28]
 8000b92:	430a      	orrs	r2, r1
 8000b94:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000b96:	2201      	movs	r2, #1
 8000b98:	6819      	ldr	r1, [r3, #0]
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000b9e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ba0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ba2:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ba4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ba6:	3442      	adds	r4, #66	; 0x42
 8000ba8:	7020      	strb	r0, [r4, #0]
}
 8000baa:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000bac:	2184      	movs	r1, #132	; 0x84
 8000bae:	0209      	lsls	r1, r1, #8
 8000bb0:	4331      	orrs	r1, r6
 8000bb2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000bb4:	2802      	cmp	r0, #2
 8000bb6:	d1db      	bne.n	8000b70 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000bb8:	2180      	movs	r1, #128	; 0x80
 8000bba:	0109      	lsls	r1, r1, #4
 8000bbc:	6059      	str	r1, [r3, #4]
 8000bbe:	e7d7      	b.n	8000b70 <HAL_I2C_Init+0x50>
 8000bc0:	f0ffffff 	.word	0xf0ffffff
 8000bc4:	ffff7fff 	.word	0xffff7fff
 8000bc8:	02008000 	.word	0x02008000

08000bcc <HAL_I2C_Mem_Write>:
{
 8000bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bce:	0007      	movs	r7, r0
{
 8000bd0:	b089      	sub	sp, #36	; 0x24
 8000bd2:	9307      	str	r3, [sp, #28]
 8000bd4:	ab0e      	add	r3, sp, #56	; 0x38
 8000bd6:	9206      	str	r2, [sp, #24]
 8000bd8:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bda:	3741      	adds	r7, #65	; 0x41
{
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	9204      	str	r2, [sp, #16]
 8000be0:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000be2:	783b      	ldrb	r3, [r7, #0]
{
 8000be4:	0004      	movs	r4, r0
 8000be6:	000d      	movs	r5, r1
    return HAL_BUSY;
 8000be8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bea:	2b20      	cmp	r3, #32
 8000bec:	d108      	bne.n	8000c00 <HAL_I2C_Mem_Write+0x34>
    if ((pData == NULL) || (Size == 0U))
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	d002      	beq.n	8000bf8 <HAL_I2C_Mem_Write+0x2c>
 8000bf2:	9b05      	ldr	r3, [sp, #20]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d105      	bne.n	8000c04 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000bfe:	2001      	movs	r0, #1
}
 8000c00:	b009      	add	sp, #36	; 0x24
 8000c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8000c04:	0023      	movs	r3, r4
 8000c06:	3340      	adds	r3, #64	; 0x40
 8000c08:	9303      	str	r3, [sp, #12]
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d0f7      	beq.n	8000c00 <HAL_I2C_Mem_Write+0x34>
 8000c10:	2201      	movs	r2, #1
 8000c12:	9b03      	ldr	r3, [sp, #12]
 8000c14:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000c16:	f7ff fd33 	bl	8000680 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000c1a:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8000c1c:	9002      	str	r0, [sp, #8]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000c1e:	9000      	str	r0, [sp, #0]
 8000c20:	2319      	movs	r3, #25
 8000c22:	2201      	movs	r2, #1
 8000c24:	0209      	lsls	r1, r1, #8
 8000c26:	0020      	movs	r0, r4
 8000c28:	f7ff fec4 	bl	80009b4 <I2C_WaitOnFlagUntilTimeout>
 8000c2c:	1e06      	subs	r6, r0, #0
 8000c2e:	d1e6      	bne.n	8000bfe <HAL_I2C_Mem_Write+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000c30:	2321      	movs	r3, #33	; 0x21
 8000c32:	703b      	strb	r3, [r7, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000c34:	0027      	movs	r7, r4
 8000c36:	331f      	adds	r3, #31
 8000c38:	3742      	adds	r7, #66	; 0x42
 8000c3a:	703b      	strb	r3, [r7, #0]
    hi2c->pBuffPtr  = pData;
 8000c3c:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c3e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000c40:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8000c42:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8000c44:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000c46:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000c48:	9b02      	ldr	r3, [sp, #8]
 8000c4a:	9a06      	ldr	r2, [sp, #24]
 8000c4c:	9301      	str	r3, [sp, #4]
 8000c4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000c50:	0029      	movs	r1, r5
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	0020      	movs	r0, r4
 8000c56:	9b07      	ldr	r3, [sp, #28]
 8000c58:	f7ff fefe 	bl	8000a58 <I2C_RequestMemoryWrite>
 8000c5c:	2800      	cmp	r0, #0
 8000c5e:	d002      	beq.n	8000c66 <HAL_I2C_Mem_Write+0x9a>
      __HAL_UNLOCK(hi2c);
 8000c60:	9b03      	ldr	r3, [sp, #12]
 8000c62:	701e      	strb	r6, [r3, #0]
 8000c64:	e7cb      	b.n	8000bfe <HAL_I2C_Mem_Write+0x32>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000c66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000c68:	2bff      	cmp	r3, #255	; 0xff
 8000c6a:	d953      	bls.n	8000d14 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000c6c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000c6e:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000c70:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000c72:	045b      	lsls	r3, r3, #17
 8000c74:	9000      	str	r0, [sp, #0]
 8000c76:	0029      	movs	r1, r5
 8000c78:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000c7a:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000c7c:	f7ff fe20 	bl	80008c0 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000c80:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c82:	9a02      	ldr	r2, [sp, #8]
 8000c84:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000c86:	0020      	movs	r0, r4
 8000c88:	f7ff febc 	bl	8000a04 <I2C_WaitOnTXISFlagUntilTimeout>
 8000c8c:	2800      	cmp	r0, #0
 8000c8e:	d1b6      	bne.n	8000bfe <HAL_I2C_Mem_Write+0x32>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c92:	6822      	ldr	r2, [r4, #0]
 8000c94:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8000c96:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000c98:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000c9a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000c9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000c9e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000ca6:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000ca8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000caa:	b292      	uxth	r2, r2
 8000cac:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d017      	beq.n	8000ce2 <HAL_I2C_Mem_Write+0x116>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	d115      	bne.n	8000ce2 <HAL_I2C_Mem_Write+0x116>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000cb6:	9b02      	ldr	r3, [sp, #8]
 8000cb8:	2180      	movs	r1, #128	; 0x80
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	0020      	movs	r0, r4
 8000cbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000cc0:	f7ff fe78 	bl	80009b4 <I2C_WaitOnFlagUntilTimeout>
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d19a      	bne.n	8000bfe <HAL_I2C_Mem_Write+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000cc8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000cca:	2bff      	cmp	r3, #255	; 0xff
 8000ccc:	d92a      	bls.n	8000d24 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000cce:	23ff      	movs	r3, #255	; 0xff
 8000cd0:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	22ff      	movs	r2, #255	; 0xff
 8000cd6:	9000      	str	r0, [sp, #0]
 8000cd8:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000cda:	0029      	movs	r1, r5
 8000cdc:	0020      	movs	r0, r4
 8000cde:	f7ff fdef 	bl	80008c0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8000ce2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1cc      	bne.n	8000c82 <HAL_I2C_Mem_Write+0xb6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ce8:	9a02      	ldr	r2, [sp, #8]
 8000cea:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000cec:	0020      	movs	r0, r4
 8000cee:	f7ff fe39 	bl	8000964 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000cf2:	2800      	cmp	r0, #0
 8000cf4:	d000      	beq.n	8000cf8 <HAL_I2C_Mem_Write+0x12c>
 8000cf6:	e782      	b.n	8000bfe <HAL_I2C_Mem_Write+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8000cfc:	4d0d      	ldr	r5, [pc, #52]	; (8000d34 <HAL_I2C_Mem_Write+0x168>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cfe:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	402a      	ands	r2, r5
 8000d04:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000d06:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8000d08:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000d0a:	3341      	adds	r3, #65	; 0x41
 8000d0c:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000d0e:	7038      	strb	r0, [r7, #0]
    __HAL_UNLOCK(hi2c);
 8000d10:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8000d12:	e775      	b.n	8000c00 <HAL_I2C_Mem_Write+0x34>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000d14:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 8000d16:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000d18:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8000d1a:	b292      	uxth	r2, r2
 8000d1c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	9000      	str	r0, [sp, #0]
 8000d22:	e7a8      	b.n	8000c76 <HAL_I2C_Mem_Write+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8000d24:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000d26:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 8000d28:	b292      	uxth	r2, r2
 8000d2a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	9000      	str	r0, [sp, #0]
 8000d30:	e7d3      	b.n	8000cda <HAL_I2C_Mem_Write+0x10e>
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	fe00e800 	.word	0xfe00e800

08000d38 <HAL_I2C_Mem_Read>:
{
 8000d38:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d3a:	0007      	movs	r7, r0
{
 8000d3c:	b089      	sub	sp, #36	; 0x24
 8000d3e:	9307      	str	r3, [sp, #28]
 8000d40:	ab0e      	add	r3, sp, #56	; 0x38
 8000d42:	9206      	str	r2, [sp, #24]
 8000d44:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d46:	3741      	adds	r7, #65	; 0x41
{
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	9204      	str	r2, [sp, #16]
 8000d4c:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d4e:	783b      	ldrb	r3, [r7, #0]
{
 8000d50:	0004      	movs	r4, r0
 8000d52:	000d      	movs	r5, r1
    return HAL_BUSY;
 8000d54:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d56:	2b20      	cmp	r3, #32
 8000d58:	d108      	bne.n	8000d6c <HAL_I2C_Mem_Read+0x34>
    if ((pData == NULL) || (Size == 0U))
 8000d5a:	2a00      	cmp	r2, #0
 8000d5c:	d002      	beq.n	8000d64 <HAL_I2C_Mem_Read+0x2c>
 8000d5e:	9b05      	ldr	r3, [sp, #20]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d105      	bne.n	8000d70 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000d6a:	2001      	movs	r0, #1
}
 8000d6c:	b009      	add	sp, #36	; 0x24
 8000d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8000d70:	0023      	movs	r3, r4
 8000d72:	3340      	adds	r3, #64	; 0x40
 8000d74:	9303      	str	r3, [sp, #12]
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d0f7      	beq.n	8000d6c <HAL_I2C_Mem_Read+0x34>
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	9b03      	ldr	r3, [sp, #12]
 8000d80:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000d82:	f7ff fc7d 	bl	8000680 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000d86:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8000d88:	9002      	str	r0, [sp, #8]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000d8a:	9000      	str	r0, [sp, #0]
 8000d8c:	2319      	movs	r3, #25
 8000d8e:	2201      	movs	r2, #1
 8000d90:	0209      	lsls	r1, r1, #8
 8000d92:	0020      	movs	r0, r4
 8000d94:	f7ff fe0e 	bl	80009b4 <I2C_WaitOnFlagUntilTimeout>
 8000d98:	1e06      	subs	r6, r0, #0
 8000d9a:	d1e6      	bne.n	8000d6a <HAL_I2C_Mem_Read+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000d9c:	2322      	movs	r3, #34	; 0x22
 8000d9e:	703b      	strb	r3, [r7, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000da0:	0027      	movs	r7, r4
 8000da2:	331e      	adds	r3, #30
 8000da4:	3742      	adds	r7, #66	; 0x42
 8000da6:	703b      	strb	r3, [r7, #0]
    hi2c->pBuffPtr  = pData;
 8000da8:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000daa:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000dac:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8000dae:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8000db0:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000db2:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000db4:	9b02      	ldr	r3, [sp, #8]
 8000db6:	9a06      	ldr	r2, [sp, #24]
 8000db8:	9301      	str	r3, [sp, #4]
 8000dba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000dbc:	0029      	movs	r1, r5
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	0020      	movs	r0, r4
 8000dc2:	9b07      	ldr	r3, [sp, #28]
 8000dc4:	f7ff fe7a 	bl	8000abc <I2C_RequestMemoryRead>
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d002      	beq.n	8000dd2 <HAL_I2C_Mem_Read+0x9a>
      __HAL_UNLOCK(hi2c);
 8000dcc:	9b03      	ldr	r3, [sp, #12]
 8000dce:	701e      	strb	r6, [r3, #0]
 8000dd0:	e7cb      	b.n	8000d6a <HAL_I2C_Mem_Read+0x32>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000dd2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000dd4:	4b35      	ldr	r3, [pc, #212]	; (8000eac <HAL_I2C_Mem_Read+0x174>)
 8000dd6:	2aff      	cmp	r2, #255	; 0xff
 8000dd8:	d958      	bls.n	8000e8c <HAL_I2C_Mem_Read+0x154>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000dda:	22ff      	movs	r2, #255	; 0xff
 8000ddc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	045b      	lsls	r3, r3, #17
 8000de4:	0029      	movs	r1, r5
 8000de6:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000de8:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000dea:	f7ff fd69 	bl	80008c0 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000dee:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8000df0:	9b02      	ldr	r3, [sp, #8]
 8000df2:	2200      	movs	r2, #0
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2104      	movs	r1, #4
 8000df8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000dfa:	0020      	movs	r0, r4
 8000dfc:	f7ff fdda 	bl	80009b4 <I2C_WaitOnFlagUntilTimeout>
 8000e00:	2800      	cmp	r0, #0
 8000e02:	d1b2      	bne.n	8000d6a <HAL_I2C_Mem_Read+0x32>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000e04:	6823      	ldr	r3, [r4, #0]
 8000e06:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0a:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8000e0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8000e0e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000e10:	3301      	adds	r3, #1
 8000e12:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000e14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000e16:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000e1e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000e20:	b292      	uxth	r2, r2
 8000e22:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d018      	beq.n	8000e5a <HAL_I2C_Mem_Read+0x122>
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	d116      	bne.n	8000e5a <HAL_I2C_Mem_Read+0x122>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000e2c:	9b02      	ldr	r3, [sp, #8]
 8000e2e:	2180      	movs	r1, #128	; 0x80
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	0020      	movs	r0, r4
 8000e34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000e36:	f7ff fdbd 	bl	80009b4 <I2C_WaitOnFlagUntilTimeout>
 8000e3a:	2800      	cmp	r0, #0
 8000e3c:	d000      	beq.n	8000e40 <HAL_I2C_Mem_Read+0x108>
 8000e3e:	e794      	b.n	8000d6a <HAL_I2C_Mem_Read+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e42:	2bff      	cmp	r3, #255	; 0xff
 8000e44:	d92a      	bls.n	8000e9c <HAL_I2C_Mem_Read+0x164>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e46:	23ff      	movs	r3, #255	; 0xff
 8000e48:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	22ff      	movs	r2, #255	; 0xff
 8000e4e:	9000      	str	r0, [sp, #0]
 8000e50:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e52:	0029      	movs	r1, r5
 8000e54:	0020      	movs	r0, r4
 8000e56:	f7ff fd33 	bl	80008c0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8000e5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1c7      	bne.n	8000df0 <HAL_I2C_Mem_Read+0xb8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e60:	9a02      	ldr	r2, [sp, #8]
 8000e62:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000e64:	0020      	movs	r0, r4
 8000e66:	f7ff fd7d 	bl	8000964 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d000      	beq.n	8000e70 <HAL_I2C_Mem_Read+0x138>
 8000e6e:	e77c      	b.n	8000d6a <HAL_I2C_Mem_Read+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e70:	2120      	movs	r1, #32
 8000e72:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8000e74:	4d0e      	ldr	r5, [pc, #56]	; (8000eb0 <HAL_I2C_Mem_Read+0x178>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e76:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	402a      	ands	r2, r5
 8000e7c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000e7e:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8000e80:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000e82:	3341      	adds	r3, #65	; 0x41
 8000e84:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000e86:	7038      	strb	r0, [r7, #0]
    __HAL_UNLOCK(hi2c);
 8000e88:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8000e8a:	e76f      	b.n	8000d6c <HAL_I2C_Mem_Read+0x34>
      hi2c->XferSize = hi2c->XferCount;
 8000e8c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000e8e:	b292      	uxth	r2, r2
 8000e90:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	049b      	lsls	r3, r3, #18
 8000e9a:	e7a3      	b.n	8000de4 <HAL_I2C_Mem_Read+0xac>
          hi2c->XferSize = hi2c->XferCount;
 8000e9c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e9e:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 8000ea0:	b292      	uxth	r2, r2
 8000ea2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	9000      	str	r0, [sp, #0]
 8000ea8:	e7d3      	b.n	8000e52 <HAL_I2C_Mem_Read+0x11a>
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	80002400 	.word	0x80002400
 8000eb0:	fe00e800 	.word	0xfe00e800

08000eb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000eb6:	0004      	movs	r4, r0
 8000eb8:	3441      	adds	r4, #65	; 0x41
 8000eba:	7822      	ldrb	r2, [r4, #0]
{
 8000ebc:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ebe:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000ec0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ec2:	2a20      	cmp	r2, #32
 8000ec4:	d118      	bne.n	8000ef8 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8000ec6:	001d      	movs	r5, r3
 8000ec8:	3540      	adds	r5, #64	; 0x40
 8000eca:	782e      	ldrb	r6, [r5, #0]
 8000ecc:	2e01      	cmp	r6, #1
 8000ece:	d013      	beq.n	8000ef8 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8000ed0:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ed2:	3022      	adds	r0, #34	; 0x22
 8000ed4:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000ed6:	681e      	ldr	r6, [r3, #0]
 8000ed8:	3823      	subs	r0, #35	; 0x23
 8000eda:	4386      	bics	r6, r0
 8000edc:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000ede:	681e      	ldr	r6, [r3, #0]
 8000ee0:	4f06      	ldr	r7, [pc, #24]	; (8000efc <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8000ee2:	403e      	ands	r6, r7
 8000ee4:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8000ee6:	681e      	ldr	r6, [r3, #0]
 8000ee8:	4331      	orrs	r1, r6
 8000eea:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000eec:	6819      	ldr	r1, [r3, #0]
 8000eee:	4308      	orrs	r0, r1
 8000ef0:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000ef2:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000ef4:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8000ef6:	7028      	strb	r0, [r5, #0]
  }
}
 8000ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	ffffefff 	.word	0xffffefff

08000f00 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000f00:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f02:	0005      	movs	r5, r0
 8000f04:	3541      	adds	r5, #65	; 0x41
 8000f06:	782a      	ldrb	r2, [r5, #0]
{
 8000f08:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f0a:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000f0c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f0e:	2a20      	cmp	r2, #32
 8000f10:	d117      	bne.n	8000f42 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8000f12:	001c      	movs	r4, r3
 8000f14:	3440      	adds	r4, #64	; 0x40
 8000f16:	7826      	ldrb	r6, [r4, #0]
 8000f18:	2e01      	cmp	r6, #1
 8000f1a:	d012      	beq.n	8000f42 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8000f1c:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f1e:	3022      	adds	r0, #34	; 0x22
 8000f20:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000f22:	681e      	ldr	r6, [r3, #0]
 8000f24:	3823      	subs	r0, #35	; 0x23
 8000f26:	4386      	bics	r6, r0
 8000f28:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8000f2a:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8000f2c:	4f05      	ldr	r7, [pc, #20]	; (8000f44 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8000f2e:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8000f30:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8000f32:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8000f34:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000f36:	6819      	ldr	r1, [r3, #0]
 8000f38:	4308      	orrs	r0, r1
 8000f3a:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000f3c:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000f3e:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000f40:	7020      	strb	r0, [r4, #0]
  }
}
 8000f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f44:	fffff0ff 	.word	0xfffff0ff

08000f48 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f4a:	0004      	movs	r4, r0
 8000f4c:	b087      	sub	sp, #28
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 8000f4e:	2501      	movs	r5, #1
  if (hpcd == NULL)
 8000f50:	2800      	cmp	r0, #0
 8000f52:	d032      	beq.n	8000fba <HAL_PCD_Init+0x72>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f54:	4d31      	ldr	r5, [pc, #196]	; (800101c <HAL_PCD_Init+0xd4>)
 8000f56:	5d43      	ldrb	r3, [r0, r5]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d104      	bne.n	8000f68 <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f5e:	22aa      	movs	r2, #170	; 0xaa
 8000f60:	0092      	lsls	r2, r2, #2
 8000f62:	5483      	strb	r3, [r0, r2]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f64:	f002 fd5c 	bl	8003a20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f68:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f6a:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f6c:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_DISABLE(hpcd);
 8000f6e:	f001 f9a9 	bl	80022c4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f72:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f74:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f76:	0019      	movs	r1, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f78:	6860      	ldr	r0, [r4, #4]
 8000f7a:	4283      	cmp	r3, r0
 8000f7c:	d320      	bcc.n	8000fc0 <HAL_PCD_Init+0x78>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f7e:	2200      	movs	r2, #0
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f80:	2628      	movs	r6, #40	; 0x28
 8000f82:	0011      	movs	r1, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f84:	4290      	cmp	r0, r2
 8000f86:	d834      	bhi.n	8000ff2 <HAL_PCD_Init+0xaa>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000f88:	0023      	movs	r3, r4
 8000f8a:	466a      	mov	r2, sp
 8000f8c:	3310      	adds	r3, #16
 8000f8e:	cb43      	ldmia	r3!, {r0, r1, r6}
 8000f90:	c243      	stmia	r2!, {r0, r1, r6}
 8000f92:	cb03      	ldmia	r3!, {r0, r1}
 8000f94:	c203      	stmia	r2!, {r0, r1}
 8000f96:	68a2      	ldr	r2, [r4, #8]
 8000f98:	68e3      	ldr	r3, [r4, #12]
 8000f9a:	6861      	ldr	r1, [r4, #4]
 8000f9c:	6820      	ldr	r0, [r4, #0]
 8000f9e:	f001 f99b 	bl	80022d8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	1d62      	adds	r2, r4, #5
 8000fa6:	77d3      	strb	r3, [r2, #31]
  hpcd->State = HAL_PCD_STATE_READY;
 8000fa8:	2201      	movs	r2, #1
 8000faa:	5562      	strb	r2, [r4, r5]
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 8000fac:	001d      	movs	r5, r3
  if (hpcd->Init.lpm_enable == 1U)
 8000fae:	69e3      	ldr	r3, [r4, #28]
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d102      	bne.n	8000fba <HAL_PCD_Init+0x72>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000fb4:	0020      	movs	r0, r4
 8000fb6:	f000 fdb2 	bl	8001b1e <HAL_PCDEx_ActivateLPM>
}
 8000fba:	0028      	movs	r0, r5
 8000fbc:	b007      	add	sp, #28
 8000fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 8000fc0:	2629      	movs	r6, #41	; 0x29
 8000fc2:	2228      	movs	r2, #40	; 0x28
 8000fc4:	46b4      	mov	ip, r6
 8000fc6:	435a      	muls	r2, r3
 8000fc8:	18a2      	adds	r2, r4, r2
 8000fca:	4494      	add	ip, r2
 8000fcc:	4666      	mov	r6, ip
 8000fce:	7037      	strb	r7, [r6, #0]
    hpcd->IN_ep[i].num = i;
 8000fd0:	2628      	movs	r6, #40	; 0x28
 8000fd2:	46b4      	mov	ip, r6
 8000fd4:	4494      	add	ip, r2
 8000fd6:	4666      	mov	r6, ip
 8000fd8:	7033      	strb	r3, [r6, #0]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fda:	262b      	movs	r6, #43	; 0x2b
 8000fdc:	46b4      	mov	ip, r6
 8000fde:	4494      	add	ip, r2
 8000fe0:	4666      	mov	r6, ip
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fe2:	86d3      	strh	r3, [r2, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fe4:	3301      	adds	r3, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fe6:	7031      	strb	r1, [r6, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fe8:	b2db      	uxtb	r3, r3
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fea:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fec:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fee:	6411      	str	r1, [r2, #64]	; 0x40
 8000ff0:	e7c3      	b.n	8000f7a <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 8000ff2:	0033      	movs	r3, r6
 8000ff4:	4353      	muls	r3, r2
 8000ff6:	18e3      	adds	r3, r4, r3
 8000ff8:	001f      	movs	r7, r3
 8000ffa:	376a      	adds	r7, #106	; 0x6a
 8000ffc:	37ff      	adds	r7, #255	; 0xff
 8000ffe:	7039      	strb	r1, [r7, #0]
    hpcd->OUT_ep[i].num = i;
 8001000:	3f01      	subs	r7, #1
 8001002:	703a      	strb	r2, [r7, #0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001004:	70f9      	strb	r1, [r7, #3]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001006:	3381      	adds	r3, #129	; 0x81
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001008:	3f6c      	subs	r7, #108	; 0x6c
 800100a:	67f9      	str	r1, [r7, #124]	; 0x7c
    hpcd->OUT_ep[i].xfer_len = 0U;
 800100c:	33ff      	adds	r3, #255	; 0xff
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800100e:	3780      	adds	r7, #128	; 0x80
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001010:	3201      	adds	r2, #1
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001012:	6039      	str	r1, [r7, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001014:	b2d2      	uxtb	r2, r2
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001016:	6019      	str	r1, [r3, #0]
 8001018:	e7b4      	b.n	8000f84 <HAL_PCD_Init+0x3c>
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	000002a9 	.word	0x000002a9

08001020 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001020:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8001022:	25aa      	movs	r5, #170	; 0xaa
 8001024:	00ad      	lsls	r5, r5, #2
 8001026:	5d43      	ldrb	r3, [r0, r5]
{
 8001028:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 800102a:	2002      	movs	r0, #2
 800102c:	2b01      	cmp	r3, #1
 800102e:	d009      	beq.n	8001044 <HAL_PCD_Start+0x24>
 8001030:	2301      	movs	r3, #1
  __HAL_PCD_ENABLE(hpcd);
 8001032:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001034:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_ENABLE(hpcd);
 8001036:	f001 f93b 	bl	80022b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800103a:	6820      	ldr	r0, [r4, #0]
 800103c:	f001 fb87 	bl	800274e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001040:	2000      	movs	r0, #0
 8001042:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 8001044:	bd70      	pop	{r4, r5, r6, pc}

08001046 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001046:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8001048:	25aa      	movs	r5, #170	; 0xaa
 800104a:	00ad      	lsls	r5, r5, #2
 800104c:	5d43      	ldrb	r3, [r0, r5]
{
 800104e:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8001050:	2002      	movs	r0, #2
 8001052:	2b01      	cmp	r3, #1
 8001054:	d008      	beq.n	8001068 <HAL_PCD_SetAddress+0x22>
 8001056:	2301      	movs	r3, #1
 8001058:	5563      	strb	r3, [r4, r5]
  hpcd->USB_Address = address;
 800105a:	1d63      	adds	r3, r4, #5
 800105c:	77d9      	strb	r1, [r3, #31]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800105e:	6820      	ldr	r0, [r4, #0]
 8001060:	f001 fb6e 	bl	8002740 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001064:	2000      	movs	r0, #0
 8001066:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 8001068:	bd70      	pop	{r4, r5, r6, pc}
	...

0800106c <HAL_PCD_IRQHandler>:
{
 800106c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800106e:	0004      	movs	r4, r0
 8001070:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001072:	6800      	ldr	r0, [r0, #0]
 8001074:	f001 fb73 	bl	800275e <USB_ReadInterrupts>
 8001078:	0403      	lsls	r3, r0, #16
 800107a:	d500      	bpl.n	800107e <HAL_PCD_IRQHandler+0x12>
 800107c:	e0d8      	b.n	8001230 <HAL_PCD_IRQHandler+0x1c4>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800107e:	6820      	ldr	r0, [r4, #0]
 8001080:	f001 fb6d 	bl	800275e <USB_ReadInterrupts>
 8001084:	0543      	lsls	r3, r0, #21
 8001086:	d50c      	bpl.n	80010a2 <HAL_PCD_IRQHandler+0x36>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001088:	6823      	ldr	r3, [r4, #0]
 800108a:	49af      	ldr	r1, [pc, #700]	; (8001348 <HAL_PCD_IRQHandler+0x2dc>)
 800108c:	3306      	adds	r3, #6
 800108e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResetCallback(hpcd);
 8001090:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001092:	400a      	ands	r2, r1
 8001094:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResetCallback(hpcd);
 8001096:	f002 fd07 	bl	8003aa8 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800109a:	2100      	movs	r1, #0
 800109c:	0020      	movs	r0, r4
 800109e:	f7ff ffd2 	bl	8001046 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80010a2:	6820      	ldr	r0, [r4, #0]
 80010a4:	f001 fb5b 	bl	800275e <USB_ReadInterrupts>
 80010a8:	0443      	lsls	r3, r0, #17
 80010aa:	d505      	bpl.n	80010b8 <HAL_PCD_IRQHandler+0x4c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	49a7      	ldr	r1, [pc, #668]	; (800134c <HAL_PCD_IRQHandler+0x2e0>)
 80010b0:	3306      	adds	r3, #6
 80010b2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80010b4:	400a      	ands	r2, r1
 80010b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80010b8:	6820      	ldr	r0, [r4, #0]
 80010ba:	f001 fb50 	bl	800275e <USB_ReadInterrupts>
 80010be:	0483      	lsls	r3, r0, #18
 80010c0:	d505      	bpl.n	80010ce <HAL_PCD_IRQHandler+0x62>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	49a2      	ldr	r1, [pc, #648]	; (8001350 <HAL_PCD_IRQHandler+0x2e4>)
 80010c6:	3306      	adds	r3, #6
 80010c8:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80010ca:	400a      	ands	r2, r1
 80010cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80010ce:	6820      	ldr	r0, [r4, #0]
 80010d0:	f001 fb45 	bl	800275e <USB_ReadInterrupts>
 80010d4:	04c3      	lsls	r3, r0, #19
 80010d6:	d51c      	bpl.n	8001112 <HAL_PCD_IRQHandler+0xa6>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80010d8:	2104      	movs	r1, #4
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	3302      	adds	r3, #2
 80010de:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80010e0:	438a      	bics	r2, r1
 80010e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80010e4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80010e6:	1849      	adds	r1, r1, r1
 80010e8:	438a      	bics	r2, r1
 80010ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    if (hpcd->LPM_State == LPM_L1)
 80010ec:	23b8      	movs	r3, #184	; 0xb8
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	5ce2      	ldrb	r2, [r4, r3]
 80010f2:	2a01      	cmp	r2, #1
 80010f4:	d104      	bne.n	8001100 <HAL_PCD_IRQHandler+0x94>
      hpcd->LPM_State = LPM_L0;
 80010f6:	2100      	movs	r1, #0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80010f8:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 80010fa:	54e1      	strb	r1, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80010fc:	f000 fd23 	bl	8001b46 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8001100:	0020      	movs	r0, r4
 8001102:	f002 fcf5 	bl	8003af0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001106:	6823      	ldr	r3, [r4, #0]
 8001108:	4992      	ldr	r1, [pc, #584]	; (8001354 <HAL_PCD_IRQHandler+0x2e8>)
 800110a:	3306      	adds	r3, #6
 800110c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800110e:	400a      	ands	r2, r1
 8001110:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001112:	6820      	ldr	r0, [r4, #0]
 8001114:	f001 fb23 	bl	800275e <USB_ReadInterrupts>
 8001118:	0503      	lsls	r3, r0, #20
 800111a:	d511      	bpl.n	8001140 <HAL_PCD_IRQHandler+0xd4>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800111c:	2108      	movs	r1, #8
 800111e:	6823      	ldr	r3, [r4, #0]
 8001120:	1c9a      	adds	r2, r3, #2
 8001122:	8fd0      	ldrh	r0, [r2, #62]	; 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001124:	3306      	adds	r3, #6
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001126:	4301      	orrs	r1, r0
 8001128:	87d1      	strh	r1, [r2, #62]	; 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800112a:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 800112c:	488a      	ldr	r0, [pc, #552]	; (8001358 <HAL_PCD_IRQHandler+0x2ec>)
 800112e:	4001      	ands	r1, r0
 8001130:	87d9      	strh	r1, [r3, #62]	; 0x3e
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001132:	2304      	movs	r3, #4
 8001134:	8fd1      	ldrh	r1, [r2, #62]	; 0x3e
    HAL_PCD_SuspendCallback(hpcd);
 8001136:	0020      	movs	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001138:	430b      	orrs	r3, r1
 800113a:	87d3      	strh	r3, [r2, #62]	; 0x3e
    HAL_PCD_SuspendCallback(hpcd);
 800113c:	f002 fcc6 	bl	8003acc <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001140:	6820      	ldr	r0, [r4, #0]
 8001142:	f001 fb0c 	bl	800275e <USB_ReadInterrupts>
 8001146:	2580      	movs	r5, #128	; 0x80
 8001148:	4228      	tst	r0, r5
 800114a:	d021      	beq.n	8001190 <HAL_PCD_IRQHandler+0x124>
    if (hpcd->LPM_State == LPM_L0)
 800114c:	20b8      	movs	r0, #184	; 0xb8
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800114e:	6823      	ldr	r3, [r4, #0]
    if (hpcd->LPM_State == LPM_L0)
 8001150:	0080      	lsls	r0, r0, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001152:	1d99      	adds	r1, r3, #6
 8001154:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 8001156:	43aa      	bics	r2, r5
 8001158:	87ca      	strh	r2, [r1, #62]	; 0x3e
    if (hpcd->LPM_State == LPM_L0)
 800115a:	5c22      	ldrb	r2, [r4, r0]
 800115c:	2a00      	cmp	r2, #0
 800115e:	d001      	beq.n	8001164 <HAL_PCD_IRQHandler+0xf8>
 8001160:	f000 fbba 	bl	80018d8 <HAL_PCD_IRQHandler+0x86c>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001164:	1c99      	adds	r1, r3, #2
 8001166:	8fcd      	ldrh	r5, [r1, #62]	; 0x3e
 8001168:	3204      	adds	r2, #4
 800116a:	432a      	orrs	r2, r5
 800116c:	87ca      	strh	r2, [r1, #62]	; 0x3e
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800116e:	2208      	movs	r2, #8
 8001170:	8fcd      	ldrh	r5, [r1, #62]	; 0x3e
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001172:	3354      	adds	r3, #84	; 0x54
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001174:	432a      	orrs	r2, r5
 8001176:	87ca      	strh	r2, [r1, #62]	; 0x3e
      hpcd->LPM_State = LPM_L1;
 8001178:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800117a:	223c      	movs	r2, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 800117c:	5421      	strb	r1, [r4, r0]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800117e:	881b      	ldrh	r3, [r3, #0]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001180:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	4013      	ands	r3, r2
 8001186:	22b9      	movs	r2, #185	; 0xb9
 8001188:	0092      	lsls	r2, r2, #2
 800118a:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800118c:	f000 fcdb 	bl	8001b46 <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001190:	6820      	ldr	r0, [r4, #0]
 8001192:	f001 fae4 	bl	800275e <USB_ReadInterrupts>
 8001196:	0583      	lsls	r3, r0, #22
 8001198:	d508      	bpl.n	80011ac <HAL_PCD_IRQHandler+0x140>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800119a:	6823      	ldr	r3, [r4, #0]
 800119c:	496f      	ldr	r1, [pc, #444]	; (800135c <HAL_PCD_IRQHandler+0x2f0>)
 800119e:	3306      	adds	r3, #6
 80011a0:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    HAL_PCD_SOFCallback(hpcd);
 80011a2:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80011a4:	400a      	ands	r2, r1
 80011a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_SOFCallback(hpcd);
 80011a8:	f002 fc77 	bl	8003a9a <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80011ac:	6820      	ldr	r0, [r4, #0]
 80011ae:	f001 fad6 	bl	800275e <USB_ReadInterrupts>
 80011b2:	05c3      	lsls	r3, r0, #23
 80011b4:	d505      	bpl.n	80011c2 <HAL_PCD_IRQHandler+0x156>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80011b6:	6823      	ldr	r3, [r4, #0]
 80011b8:	4969      	ldr	r1, [pc, #420]	; (8001360 <HAL_PCD_IRQHandler+0x2f4>)
 80011ba:	3306      	adds	r3, #6
 80011bc:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80011be:	400a      	ands	r2, r1
 80011c0:	87da      	strh	r2, [r3, #62]	; 0x3e
}
 80011c2:	b005      	add	sp, #20
 80011c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80011c6:	230f      	movs	r3, #15
    wIstr = hpcd->Instance->ISTR;
 80011c8:	8fd1      	ldrh	r1, [r2, #62]	; 0x3e
 80011ca:	b289      	uxth	r1, r1
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80011cc:	400b      	ands	r3, r1
 80011ce:	9300      	str	r3, [sp, #0]

    if (epindex == 0U)
 80011d0:	d000      	beq.n	80011d4 <HAL_PCD_IRQHandler+0x168>
 80011d2:	e0d7      	b.n	8001384 <HAL_PCD_IRQHandler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80011d4:	3310      	adds	r3, #16
 80011d6:	4019      	ands	r1, r3
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011d8:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80011da:	2900      	cmp	r1, #0
 80011dc:	d12f      	bne.n	800123e <HAL_PCD_IRQHandler+0x1d2>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011de:	4a61      	ldr	r2, [pc, #388]	; (8001364 <HAL_PCD_IRQHandler+0x2f8>)
 80011e0:	4013      	ands	r3, r2
 80011e2:	2280      	movs	r2, #128	; 0x80
 80011e4:	0212      	lsls	r2, r2, #8
 80011e6:	4313      	orrs	r3, r2
 80011e8:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80011ea:	0003      	movs	r3, r0
 80011ec:	3350      	adds	r3, #80	; 0x50
 80011ee:	881a      	ldrh	r2, [r3, #0]
 80011f0:	0023      	movs	r3, r4
 80011f2:	3328      	adds	r3, #40	; 0x28
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	18c0      	adds	r0, r0, r3
 80011fa:	4b5b      	ldr	r3, [pc, #364]	; (8001368 <HAL_PCD_IRQHandler+0x2fc>)
 80011fc:	1880      	adds	r0, r0, r2
 80011fe:	18c0      	adds	r0, r0, r3
 8001200:	8803      	ldrh	r3, [r0, #0]
        ep->xfer_buff += ep->xfer_count;
 8001202:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001204:	059b      	lsls	r3, r3, #22
 8001206:	0d9b      	lsrs	r3, r3, #22
 8001208:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800120a:	18d3      	adds	r3, r2, r3
 800120c:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800120e:	0020      	movs	r0, r4
 8001210:	f002 fc38 	bl	8003a84 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001214:	1d63      	adds	r3, r4, #5
 8001216:	7fda      	ldrb	r2, [r3, #31]
 8001218:	2a00      	cmp	r2, #0
 800121a:	d009      	beq.n	8001230 <HAL_PCD_IRQHandler+0x1c4>
 800121c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800121e:	2800      	cmp	r0, #0
 8001220:	d106      	bne.n	8001230 <HAL_PCD_IRQHandler+0x1c4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	7fd9      	ldrb	r1, [r3, #31]
 8001226:	4311      	orrs	r1, r2
 8001228:	6822      	ldr	r2, [r4, #0]
 800122a:	324c      	adds	r2, #76	; 0x4c
 800122c:	8011      	strh	r1, [r2, #0]
          hpcd->USB_Address = 0U;
 800122e:	77d8      	strb	r0, [r3, #31]
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001230:	6820      	ldr	r0, [r4, #0]
 8001232:	1d82      	adds	r2, r0, #6
 8001234:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8001236:	b21b      	sxth	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	dbc4      	blt.n	80011c6 <HAL_PCD_IRQHandler+0x15a>
 800123c:	e71f      	b.n	800107e <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800123e:	2680      	movs	r6, #128	; 0x80
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001240:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001242:	0136      	lsls	r6, r6, #4
 8001244:	401e      	ands	r6, r3
 8001246:	d022      	beq.n	800128e <HAL_PCD_IRQHandler+0x222>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001248:	0003      	movs	r3, r0
 800124a:	3350      	adds	r3, #80	; 0x50
 800124c:	881a      	ldrh	r2, [r3, #0]
 800124e:	23b4      	movs	r3, #180	; 0xb4
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	5ce3      	ldrb	r3, [r4, r3]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001254:	21ac      	movs	r1, #172	; 0xac
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	18c3      	adds	r3, r0, r3
 800125a:	189b      	adds	r3, r3, r2
 800125c:	4a43      	ldr	r2, [pc, #268]	; (800136c <HAL_PCD_IRQHandler+0x300>)
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800125e:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001260:	189b      	adds	r3, r3, r2
 8001262:	0022      	movs	r2, r4
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	3269      	adds	r2, #105	; 0x69
 8001268:	059b      	lsls	r3, r3, #22
 800126a:	0d9b      	lsrs	r3, r3, #22
 800126c:	32ff      	adds	r2, #255	; 0xff
 800126e:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001270:	1861      	adds	r1, r4, r1
 8001272:	88d2      	ldrh	r2, [r2, #6]
 8001274:	f001 fd58 	bl	8002d28 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001278:	6822      	ldr	r2, [r4, #0]
 800127a:	493d      	ldr	r1, [pc, #244]	; (8001370 <HAL_PCD_IRQHandler+0x304>)
 800127c:	8813      	ldrh	r3, [r2, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800127e:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001280:	400b      	ands	r3, r1
 8001282:	2180      	movs	r1, #128	; 0x80
 8001284:	430b      	orrs	r3, r1
 8001286:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001288:	f002 fbe6 	bl	8003a58 <HAL_PCD_SetupStageCallback>
 800128c:	e7d0      	b.n	8001230 <HAL_PCD_IRQHandler+0x1c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800128e:	b21b      	sxth	r3, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	dacd      	bge.n	8001230 <HAL_PCD_IRQHandler+0x1c4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001294:	8803      	ldrh	r3, [r0, #0]
 8001296:	4a36      	ldr	r2, [pc, #216]	; (8001370 <HAL_PCD_IRQHandler+0x304>)

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001298:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800129a:	4013      	ands	r3, r2
 800129c:	2280      	movs	r2, #128	; 0x80
 800129e:	4313      	orrs	r3, r2
 80012a0:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012a2:	0003      	movs	r3, r0
 80012a4:	3350      	adds	r3, #80	; 0x50
 80012a6:	881a      	ldrh	r2, [r3, #0]
 80012a8:	23b4      	movs	r3, #180	; 0xb4
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	5ce3      	ldrb	r3, [r4, r3]
 80012ae:	3569      	adds	r5, #105	; 0x69
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	18c3      	adds	r3, r0, r3
 80012b4:	189b      	adds	r3, r3, r2
 80012b6:	4a2d      	ldr	r2, [pc, #180]	; (800136c <HAL_PCD_IRQHandler+0x300>)
 80012b8:	35ff      	adds	r5, #255	; 0xff
 80012ba:	189b      	adds	r3, r3, r2
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	059b      	lsls	r3, r3, #22
 80012c0:	0d9b      	lsrs	r3, r3, #22
 80012c2:	61eb      	str	r3, [r5, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80012c4:	d00d      	beq.n	80012e2 <HAL_PCD_IRQHandler+0x276>
 80012c6:	6969      	ldr	r1, [r5, #20]
 80012c8:	2900      	cmp	r1, #0
 80012ca:	d00a      	beq.n	80012e2 <HAL_PCD_IRQHandler+0x276>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80012cc:	88ea      	ldrh	r2, [r5, #6]
 80012ce:	f001 fd2b 	bl	8002d28 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 80012d2:	696b      	ldr	r3, [r5, #20]
 80012d4:	69ea      	ldr	r2, [r5, #28]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80012d6:	0031      	movs	r1, r6
            ep->xfer_buff += ep->xfer_count;
 80012d8:	189b      	adds	r3, r3, r2
 80012da:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80012dc:	0020      	movs	r0, r4
 80012de:	f002 fbc4 	bl	8003a6a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80012e2:	6821      	ldr	r1, [r4, #0]
 80012e4:	4a21      	ldr	r2, [pc, #132]	; (800136c <HAL_PCD_IRQHandler+0x300>)
 80012e6:	000b      	movs	r3, r1
 80012e8:	3350      	adds	r3, #80	; 0x50
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	188a      	adds	r2, r1, r2
 80012ee:	18d2      	adds	r2, r2, r3
 80012f0:	692b      	ldr	r3, [r5, #16]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d109      	bne.n	800130a <HAL_PCD_IRQHandler+0x29e>
 80012f6:	8813      	ldrh	r3, [r2, #0]
 80012f8:	481e      	ldr	r0, [pc, #120]	; (8001374 <HAL_PCD_IRQHandler+0x308>)
 80012fa:	4003      	ands	r3, r0
 80012fc:	2080      	movs	r0, #128	; 0x80
 80012fe:	8013      	strh	r3, [r2, #0]
 8001300:	8813      	ldrh	r3, [r2, #0]
 8001302:	0200      	lsls	r0, r0, #8
 8001304:	4303      	orrs	r3, r0
 8001306:	8013      	strh	r3, [r2, #0]
 8001308:	e008      	b.n	800131c <HAL_PCD_IRQHandler+0x2b0>
 800130a:	2b3e      	cmp	r3, #62	; 0x3e
 800130c:	d810      	bhi.n	8001330 <HAL_PCD_IRQHandler+0x2c4>
 800130e:	2501      	movs	r5, #1
 8001310:	0858      	lsrs	r0, r3, #1
 8001312:	402b      	ands	r3, r5
 8001314:	18c0      	adds	r0, r0, r3
 8001316:	0280      	lsls	r0, r0, #10
 8001318:	b280      	uxth	r0, r0
 800131a:	8010      	strh	r0, [r2, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800131c:	880b      	ldrh	r3, [r1, #0]
 800131e:	4a16      	ldr	r2, [pc, #88]	; (8001378 <HAL_PCD_IRQHandler+0x30c>)
 8001320:	401a      	ands	r2, r3
 8001322:	23c0      	movs	r3, #192	; 0xc0
 8001324:	019b      	lsls	r3, r3, #6
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001326:	4053      	eors	r3, r2
 8001328:	4a14      	ldr	r2, [pc, #80]	; (800137c <HAL_PCD_IRQHandler+0x310>)
 800132a:	4313      	orrs	r3, r2
 800132c:	800b      	strh	r3, [r1, #0]
 800132e:	e77f      	b.n	8001230 <HAL_PCD_IRQHandler+0x1c4>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001330:	251f      	movs	r5, #31
 8001332:	0958      	lsrs	r0, r3, #5
 8001334:	402b      	ands	r3, r5
 8001336:	425d      	negs	r5, r3
 8001338:	416b      	adcs	r3, r5
 800133a:	1ac0      	subs	r0, r0, r3
 800133c:	4b10      	ldr	r3, [pc, #64]	; (8001380 <HAL_PCD_IRQHandler+0x314>)
 800133e:	0280      	lsls	r0, r0, #10
 8001340:	4303      	orrs	r3, r0
 8001342:	b29b      	uxth	r3, r3
 8001344:	e7df      	b.n	8001306 <HAL_PCD_IRQHandler+0x29a>
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	fffffbff 	.word	0xfffffbff
 800134c:	ffffbfff 	.word	0xffffbfff
 8001350:	ffffdfff 	.word	0xffffdfff
 8001354:	ffffefff 	.word	0xffffefff
 8001358:	fffff7ff 	.word	0xfffff7ff
 800135c:	fffffdff 	.word	0xfffffdff
 8001360:	fffffeff 	.word	0xfffffeff
 8001364:	ffff8f0f 	.word	0xffff8f0f
 8001368:	00000402 	.word	0x00000402
 800136c:	00000406 	.word	0x00000406
 8001370:	00000f8f 	.word	0x00000f8f
 8001374:	ffff83ff 	.word	0xffff83ff
 8001378:	ffffbf8f 	.word	0xffffbf8f
 800137c:	00008080 	.word	0x00008080
 8001380:	ffff8000 	.word	0xffff8000
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001384:	9b00      	ldr	r3, [sp, #0]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	18c2      	adds	r2, r0, r3
 800138a:	8816      	ldrh	r6, [r2, #0]
 800138c:	9301      	str	r3, [sp, #4]
 800138e:	b2b3      	uxth	r3, r6
 8001390:	9302      	str	r3, [sp, #8]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001392:	466b      	mov	r3, sp
 8001394:	2108      	movs	r1, #8
 8001396:	5e5b      	ldrsh	r3, [r3, r1]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db00      	blt.n	800139e <HAL_PCD_IRQHandler+0x332>
 800139c:	e0f2      	b.n	8001584 <HAL_PCD_IRQHandler+0x518>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800139e:	8813      	ldrh	r3, [r2, #0]
 80013a0:	49c3      	ldr	r1, [pc, #780]	; (80016b0 <HAL_PCD_IRQHandler+0x644>)
 80013a2:	400b      	ands	r3, r1
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	430b      	orrs	r3, r1
 80013a8:	8013      	strh	r3, [r2, #0]
        if (ep->doublebuffer == 0U)
 80013aa:	2328      	movs	r3, #40	; 0x28
 80013ac:	9a00      	ldr	r2, [sp, #0]
 80013ae:	4353      	muls	r3, r2
 80013b0:	18e3      	adds	r3, r4, r3
 80013b2:	001a      	movs	r2, r3
 80013b4:	001d      	movs	r5, r3
 80013b6:	3275      	adds	r2, #117	; 0x75
 80013b8:	32ff      	adds	r2, #255	; 0xff
 80013ba:	7812      	ldrb	r2, [r2, #0]
 80013bc:	3569      	adds	r5, #105	; 0x69
 80013be:	35ff      	adds	r5, #255	; 0xff
 80013c0:	2a00      	cmp	r2, #0
 80013c2:	d119      	bne.n	80013f8 <HAL_PCD_IRQHandler+0x38c>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80013c4:	0002      	movs	r2, r0
 80013c6:	3250      	adds	r2, #80	; 0x50
 80013c8:	8811      	ldrh	r1, [r2, #0]
 80013ca:	782a      	ldrb	r2, [r5, #0]
 80013cc:	00d2      	lsls	r2, r2, #3
 80013ce:	1852      	adds	r2, r2, r1
 80013d0:	49b8      	ldr	r1, [pc, #736]	; (80016b4 <HAL_PCD_IRQHandler+0x648>)
 80013d2:	1812      	adds	r2, r2, r0
 80013d4:	1852      	adds	r2, r2, r1
 80013d6:	8815      	ldrh	r5, [r2, #0]
 80013d8:	05ad      	lsls	r5, r5, #22
 80013da:	0dad      	lsrs	r5, r5, #22
          if (count != 0U)
 80013dc:	d100      	bne.n	80013e0 <HAL_PCD_IRQHandler+0x374>
 80013de:	e0b0      	b.n	8001542 <HAL_PCD_IRQHandler+0x4d6>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80013e0:	001a      	movs	r2, r3
 80013e2:	326f      	adds	r2, #111	; 0x6f
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80013e4:	337d      	adds	r3, #125	; 0x7d
 80013e6:	33ff      	adds	r3, #255	; 0xff
 80013e8:	0019      	movs	r1, r3
 80013ea:	32ff      	adds	r2, #255	; 0xff
 80013ec:	8812      	ldrh	r2, [r2, #0]
 80013ee:	002b      	movs	r3, r5
 80013f0:	6809      	ldr	r1, [r1, #0]
 80013f2:	f001 fc99 	bl	8002d28 <USB_ReadPMA>
 80013f6:	e0a4      	b.n	8001542 <HAL_PCD_IRQHandler+0x4d6>
          if (ep->type == EP_TYPE_BULK)
 80013f8:	0019      	movs	r1, r3
 80013fa:	316c      	adds	r1, #108	; 0x6c
 80013fc:	31ff      	adds	r1, #255	; 0xff
 80013fe:	7809      	ldrb	r1, [r1, #0]
 8001400:	782a      	ldrb	r2, [r5, #0]
 8001402:	2902      	cmp	r1, #2
 8001404:	d000      	beq.n	8001408 <HAL_PCD_IRQHandler+0x39c>
 8001406:	e082      	b.n	800150e <HAL_PCD_IRQHandler+0x4a2>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001408:	2680      	movs	r6, #128	; 0x80
 800140a:	9d02      	ldr	r5, [sp, #8]
 800140c:	01f6      	lsls	r6, r6, #7
 800140e:	402e      	ands	r6, r5
 8001410:	0005      	movs	r5, r0
 8001412:	3550      	adds	r5, #80	; 0x50
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001414:	882d      	ldrh	r5, [r5, #0]
 8001416:	3381      	adds	r3, #129	; 0x81
 8001418:	00d7      	lsls	r7, r2, #3
 800141a:	33ff      	adds	r3, #255	; 0xff
 800141c:	1945      	adds	r5, r0, r5
 800141e:	6819      	ldr	r1, [r3, #0]
 8001420:	19ed      	adds	r5, r5, r7
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001422:	2e00      	cmp	r6, #0
 8001424:	d039      	beq.n	800149a <HAL_PCD_IRQHandler+0x42e>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001426:	4ea4      	ldr	r6, [pc, #656]	; (80016b8 <HAL_PCD_IRQHandler+0x64c>)
 8001428:	19ad      	adds	r5, r5, r6
 800142a:	882d      	ldrh	r5, [r5, #0]
 800142c:	05ad      	lsls	r5, r5, #22
 800142e:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 8001430:	428d      	cmp	r5, r1
 8001432:	d830      	bhi.n	8001496 <HAL_PCD_IRQHandler+0x42a>
      ep->xfer_len -= count;
 8001434:	1b49      	subs	r1, r1, r5
      ep->xfer_len = 0U;
 8001436:	6019      	str	r1, [r3, #0]
    if (ep->xfer_len == 0U)
 8001438:	2328      	movs	r3, #40	; 0x28
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	434b      	muls	r3, r1
 800143e:	18e3      	adds	r3, r4, r3
 8001440:	3381      	adds	r3, #129	; 0x81
 8001442:	33ff      	adds	r3, #255	; 0xff
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10a      	bne.n	8001460 <HAL_PCD_IRQHandler+0x3f4>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800144a:	0092      	lsls	r2, r2, #2
 800144c:	1882      	adds	r2, r0, r2
 800144e:	8813      	ldrh	r3, [r2, #0]
 8001450:	499a      	ldr	r1, [pc, #616]	; (80016bc <HAL_PCD_IRQHandler+0x650>)
 8001452:	4019      	ands	r1, r3
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	019b      	lsls	r3, r3, #6
 8001458:	404b      	eors	r3, r1
 800145a:	4999      	ldr	r1, [pc, #612]	; (80016c0 <HAL_PCD_IRQHandler+0x654>)
 800145c:	430b      	orrs	r3, r1
 800145e:	8013      	strh	r3, [r2, #0]
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001460:	9b02      	ldr	r3, [sp, #8]
 8001462:	065b      	lsls	r3, r3, #25
 8001464:	d50e      	bpl.n	8001484 <HAL_PCD_IRQHandler+0x418>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001466:	2328      	movs	r3, #40	; 0x28
 8001468:	9a00      	ldr	r2, [sp, #0]
 800146a:	4996      	ldr	r1, [pc, #600]	; (80016c4 <HAL_PCD_IRQHandler+0x658>)
 800146c:	4353      	muls	r3, r2
 800146e:	18e3      	adds	r3, r4, r3
 8001470:	3369      	adds	r3, #105	; 0x69
 8001472:	33ff      	adds	r3, #255	; 0xff
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	18c3      	adds	r3, r0, r3
 800147a:	881a      	ldrh	r2, [r3, #0]
 800147c:	400a      	ands	r2, r1
 800147e:	4992      	ldr	r1, [pc, #584]	; (80016c8 <HAL_PCD_IRQHandler+0x65c>)
 8001480:	430a      	orrs	r2, r1
 8001482:	801a      	strh	r2, [r3, #0]
    if (count != 0U)
 8001484:	2d00      	cmp	r5, #0
 8001486:	d05c      	beq.n	8001542 <HAL_PCD_IRQHandler+0x4d6>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001488:	2328      	movs	r3, #40	; 0x28
 800148a:	9a00      	ldr	r2, [sp, #0]
 800148c:	4353      	muls	r3, r2
 800148e:	18e3      	adds	r3, r4, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001490:	001a      	movs	r2, r3
 8001492:	3271      	adds	r2, #113	; 0x71
 8001494:	e7a6      	b.n	80013e4 <HAL_PCD_IRQHandler+0x378>
      ep->xfer_len = 0U;
 8001496:	2100      	movs	r1, #0
 8001498:	e7cd      	b.n	8001436 <HAL_PCD_IRQHandler+0x3ca>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800149a:	4f86      	ldr	r7, [pc, #536]	; (80016b4 <HAL_PCD_IRQHandler+0x648>)
 800149c:	19ed      	adds	r5, r5, r7
 800149e:	882d      	ldrh	r5, [r5, #0]
 80014a0:	05ad      	lsls	r5, r5, #22
 80014a2:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 80014a4:	428d      	cmp	r5, r1
 80014a6:	d830      	bhi.n	800150a <HAL_PCD_IRQHandler+0x49e>
      ep->xfer_len -= count;
 80014a8:	1b49      	subs	r1, r1, r5
 80014aa:	6019      	str	r1, [r3, #0]
    if (ep->xfer_len == 0U)
 80014ac:	2328      	movs	r3, #40	; 0x28
 80014ae:	9900      	ldr	r1, [sp, #0]
 80014b0:	434b      	muls	r3, r1
 80014b2:	18e3      	adds	r3, r4, r3
 80014b4:	3381      	adds	r3, #129	; 0x81
 80014b6:	33ff      	adds	r3, #255	; 0xff
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10a      	bne.n	80014d4 <HAL_PCD_IRQHandler+0x468>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80014be:	0092      	lsls	r2, r2, #2
 80014c0:	1882      	adds	r2, r0, r2
 80014c2:	8813      	ldrh	r3, [r2, #0]
 80014c4:	497d      	ldr	r1, [pc, #500]	; (80016bc <HAL_PCD_IRQHandler+0x650>)
 80014c6:	4019      	ands	r1, r3
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	019b      	lsls	r3, r3, #6
 80014cc:	404b      	eors	r3, r1
 80014ce:	497c      	ldr	r1, [pc, #496]	; (80016c0 <HAL_PCD_IRQHandler+0x654>)
 80014d0:	430b      	orrs	r3, r1
 80014d2:	8013      	strh	r3, [r2, #0]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80014d4:	9b02      	ldr	r3, [sp, #8]
 80014d6:	065b      	lsls	r3, r3, #25
 80014d8:	d40e      	bmi.n	80014f8 <HAL_PCD_IRQHandler+0x48c>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80014da:	2328      	movs	r3, #40	; 0x28
 80014dc:	9a00      	ldr	r2, [sp, #0]
 80014de:	4979      	ldr	r1, [pc, #484]	; (80016c4 <HAL_PCD_IRQHandler+0x658>)
 80014e0:	4353      	muls	r3, r2
 80014e2:	18e3      	adds	r3, r4, r3
 80014e4:	3369      	adds	r3, #105	; 0x69
 80014e6:	33ff      	adds	r3, #255	; 0xff
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	18c3      	adds	r3, r0, r3
 80014ee:	881a      	ldrh	r2, [r3, #0]
 80014f0:	400a      	ands	r2, r1
 80014f2:	4975      	ldr	r1, [pc, #468]	; (80016c8 <HAL_PCD_IRQHandler+0x65c>)
 80014f4:	430a      	orrs	r2, r1
 80014f6:	801a      	strh	r2, [r3, #0]
    if (count != 0U)
 80014f8:	2d00      	cmp	r5, #0
 80014fa:	d022      	beq.n	8001542 <HAL_PCD_IRQHandler+0x4d6>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80014fc:	2328      	movs	r3, #40	; 0x28
 80014fe:	9a00      	ldr	r2, [sp, #0]
 8001500:	4353      	muls	r3, r2
 8001502:	18e3      	adds	r3, r4, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001504:	001a      	movs	r2, r3
 8001506:	3273      	adds	r2, #115	; 0x73
 8001508:	e76c      	b.n	80013e4 <HAL_PCD_IRQHandler+0x378>
      ep->xfer_len = 0U;
 800150a:	601e      	str	r6, [r3, #0]
 800150c:	e7ce      	b.n	80014ac <HAL_PCD_IRQHandler+0x440>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800150e:	0092      	lsls	r2, r2, #2
 8001510:	1882      	adds	r2, r0, r2
 8001512:	8816      	ldrh	r6, [r2, #0]
 8001514:	496b      	ldr	r1, [pc, #428]	; (80016c4 <HAL_PCD_IRQHandler+0x658>)
 8001516:	4031      	ands	r1, r6
 8001518:	4e6b      	ldr	r6, [pc, #428]	; (80016c8 <HAL_PCD_IRQHandler+0x65c>)
 800151a:	4331      	orrs	r1, r6
 800151c:	8011      	strh	r1, [r2, #0]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800151e:	782a      	ldrb	r2, [r5, #0]
 8001520:	0091      	lsls	r1, r2, #2
 8001522:	1841      	adds	r1, r0, r1
 8001524:	880d      	ldrh	r5, [r1, #0]
 8001526:	0001      	movs	r1, r0
 8001528:	3150      	adds	r1, #80	; 0x50
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800152a:	8809      	ldrh	r1, [r1, #0]
 800152c:	00d2      	lsls	r2, r2, #3
 800152e:	1852      	adds	r2, r2, r1
 8001530:	1812      	adds	r2, r2, r0
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001532:	046d      	lsls	r5, r5, #17
 8001534:	d564      	bpl.n	8001600 <HAL_PCD_IRQHandler+0x594>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001536:	4960      	ldr	r1, [pc, #384]	; (80016b8 <HAL_PCD_IRQHandler+0x64c>)
 8001538:	1852      	adds	r2, r2, r1
 800153a:	8815      	ldrh	r5, [r2, #0]
 800153c:	05ad      	lsls	r5, r5, #22
 800153e:	0dad      	lsrs	r5, r5, #22
              if (count != 0U)
 8001540:	d1a6      	bne.n	8001490 <HAL_PCD_IRQHandler+0x424>
        ep->xfer_count += count;
 8001542:	2328      	movs	r3, #40	; 0x28
 8001544:	9900      	ldr	r1, [sp, #0]
 8001546:	4359      	muls	r1, r3
 8001548:	1862      	adds	r2, r4, r1
 800154a:	0016      	movs	r6, r2
 800154c:	3685      	adds	r6, #133	; 0x85
 800154e:	36ff      	adds	r6, #255	; 0xff
 8001550:	6830      	ldr	r0, [r6, #0]
        ep->xfer_buff += count;
 8001552:	3e08      	subs	r6, #8
        ep->xfer_count += count;
 8001554:	1940      	adds	r0, r0, r5
 8001556:	60b0      	str	r0, [r6, #8]
        ep->xfer_buff += count;
 8001558:	6830      	ldr	r0, [r6, #0]
 800155a:	1940      	adds	r0, r0, r5
 800155c:	6030      	str	r0, [r6, #0]
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800155e:	0010      	movs	r0, r2
 8001560:	3081      	adds	r0, #129	; 0x81
 8001562:	30ff      	adds	r0, #255	; 0xff
 8001564:	6800      	ldr	r0, [r0, #0]
 8001566:	2800      	cmp	r0, #0
 8001568:	d003      	beq.n	8001572 <HAL_PCD_IRQHandler+0x506>
 800156a:	32fc      	adds	r2, #252	; 0xfc
 800156c:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800156e:	4295      	cmp	r5, r2
 8001570:	d24d      	bcs.n	800160e <HAL_PCD_IRQHandler+0x5a2>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001572:	9a00      	ldr	r2, [sp, #0]
 8001574:	0020      	movs	r0, r4
 8001576:	4353      	muls	r3, r2
 8001578:	18e3      	adds	r3, r4, r3
 800157a:	3369      	adds	r3, #105	; 0x69
 800157c:	33ff      	adds	r3, #255	; 0xff
 800157e:	7819      	ldrb	r1, [r3, #0]
 8001580:	f002 fa73 	bl	8003a6a <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001584:	2280      	movs	r2, #128	; 0x80
 8001586:	9b02      	ldr	r3, [sp, #8]
 8001588:	4213      	tst	r3, r2
 800158a:	d100      	bne.n	800158e <HAL_PCD_IRQHandler+0x522>
 800158c:	e650      	b.n	8001230 <HAL_PCD_IRQHandler+0x1c4>
 800158e:	2528      	movs	r5, #40	; 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001590:	9b01      	ldr	r3, [sp, #4]
 8001592:	6820      	ldr	r0, [r4, #0]
 8001594:	494d      	ldr	r1, [pc, #308]	; (80016cc <HAL_PCD_IRQHandler+0x660>)
 8001596:	18c2      	adds	r2, r0, r3
 8001598:	8813      	ldrh	r3, [r2, #0]
 800159a:	4f4d      	ldr	r7, [pc, #308]	; (80016d0 <HAL_PCD_IRQHandler+0x664>)
 800159c:	400b      	ands	r3, r1
 800159e:	433b      	orrs	r3, r7
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	8013      	strh	r3, [r2, #0]
 80015a4:	9b00      	ldr	r3, [sp, #0]
 80015a6:	9703      	str	r7, [sp, #12]
 80015a8:	435d      	muls	r5, r3
 80015aa:	1963      	adds	r3, r4, r5
 80015ac:	9301      	str	r3, [sp, #4]
        if ((ep->type != EP_TYPE_BULK) ||
 80015ae:	332b      	adds	r3, #43	; 0x2b
 80015b0:	9a01      	ldr	r2, [sp, #4]
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	3228      	adds	r2, #40	; 0x28
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d102      	bne.n	80015c0 <HAL_PCD_IRQHandler+0x554>
 80015ba:	9b02      	ldr	r3, [sp, #8]
 80015bc:	05db      	lsls	r3, r3, #23
 80015be:	d43c      	bmi.n	800163a <HAL_PCD_IRQHandler+0x5ce>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015c0:	0003      	movs	r3, r0
          if (ep->xfer_len > TxByteNbre)
 80015c2:	2128      	movs	r1, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015c4:	3350      	adds	r3, #80	; 0x50
 80015c6:	881f      	ldrh	r7, [r3, #0]
          if (ep->xfer_len > TxByteNbre)
 80015c8:	9d00      	ldr	r5, [sp, #0]
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015ca:	7813      	ldrb	r3, [r2, #0]
          if (ep->xfer_len > TxByteNbre)
 80015cc:	434d      	muls	r5, r1
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	19db      	adds	r3, r3, r7
 80015d2:	4f39      	ldr	r7, [pc, #228]	; (80016b8 <HAL_PCD_IRQHandler+0x64c>)
 80015d4:	18c3      	adds	r3, r0, r3
 80015d6:	19db      	adds	r3, r3, r7
          if (ep->xfer_len > TxByteNbre)
 80015d8:	1965      	adds	r5, r4, r5
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015da:	881b      	ldrh	r3, [r3, #0]
          if (ep->xfer_len > TxByteNbre)
 80015dc:	6c2e      	ldr	r6, [r5, #64]	; 0x40
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015de:	059b      	lsls	r3, r3, #22
          if (ep->xfer_len > TxByteNbre)
 80015e0:	0d9b      	lsrs	r3, r3, #22
 80015e2:	429e      	cmp	r6, r3
 80015e4:	d91a      	bls.n	800161c <HAL_PCD_IRQHandler+0x5b0>
            ep->xfer_len -= TxByteNbre;
 80015e6:	1af6      	subs	r6, r6, r3
            ep->xfer_len = 0U;
 80015e8:	642e      	str	r6, [r5, #64]	; 0x40
          if (ep->xfer_len == 0U)
 80015ea:	9d00      	ldr	r5, [sp, #0]
 80015ec:	434d      	muls	r5, r1
 80015ee:	1965      	adds	r5, r4, r5
 80015f0:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 80015f2:	2e00      	cmp	r6, #0
 80015f4:	d114      	bne.n	8001620 <HAL_PCD_IRQHandler+0x5b4>
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80015f6:	7811      	ldrb	r1, [r2, #0]
 80015f8:	0020      	movs	r0, r4
 80015fa:	f002 fa43 	bl	8003a84 <HAL_PCD_DataInStageCallback>
 80015fe:	e617      	b.n	8001230 <HAL_PCD_IRQHandler+0x1c4>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001600:	492c      	ldr	r1, [pc, #176]	; (80016b4 <HAL_PCD_IRQHandler+0x648>)
 8001602:	1852      	adds	r2, r2, r1
 8001604:	8815      	ldrh	r5, [r2, #0]
 8001606:	05ad      	lsls	r5, r5, #22
 8001608:	0dad      	lsrs	r5, r5, #22
              if (count != 0U)
 800160a:	d09a      	beq.n	8001542 <HAL_PCD_IRQHandler+0x4d6>
 800160c:	e77a      	b.n	8001504 <HAL_PCD_IRQHandler+0x498>
        ep = &hpcd->OUT_ep[epindex];
 800160e:	3169      	adds	r1, #105	; 0x69
 8001610:	31ff      	adds	r1, #255	; 0xff
 8001612:	1861      	adds	r1, r4, r1
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001614:	6820      	ldr	r0, [r4, #0]
 8001616:	f001 f8bb 	bl	8002790 <USB_EPStartXfer>
 800161a:	e7b3      	b.n	8001584 <HAL_PCD_IRQHandler+0x518>
            ep->xfer_len = 0U;
 800161c:	2600      	movs	r6, #0
 800161e:	e7e3      	b.n	80015e8 <HAL_PCD_IRQHandler+0x57c>
            ep->xfer_buff += TxByteNbre;
 8001620:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001622:	18d2      	adds	r2, r2, r3
 8001624:	63ea      	str	r2, [r5, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8001626:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8001628:	18d3      	adds	r3, r2, r3
 800162a:	646b      	str	r3, [r5, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 800162c:	9b00      	ldr	r3, [sp, #0]
 800162e:	3301      	adds	r3, #1
 8001630:	4359      	muls	r1, r3
 8001632:	1861      	adds	r1, r4, r1
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001634:	f001 f8ac 	bl	8002790 <USB_EPStartXfer>
 8001638:	e5fa      	b.n	8001230 <HAL_PCD_IRQHandler+0x1c4>
 800163a:	7811      	ldrb	r1, [r2, #0]
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800163c:	2240      	movs	r2, #64	; 0x40
 800163e:	9e02      	ldr	r6, [sp, #8]
 8001640:	9b01      	ldr	r3, [sp, #4]
 8001642:	4032      	ands	r2, r6
 8001644:	0006      	movs	r6, r0
 8001646:	00cf      	lsls	r7, r1, #3
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	3650      	adds	r6, #80	; 0x50
 800164c:	2a00      	cmp	r2, #0
 800164e:	d100      	bne.n	8001652 <HAL_PCD_IRQHandler+0x5e6>
 8001650:	e0ad      	b.n	80017ae <HAL_PCD_IRQHandler+0x742>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001652:	8832      	ldrh	r2, [r6, #0]
 8001654:	4e18      	ldr	r6, [pc, #96]	; (80016b8 <HAL_PCD_IRQHandler+0x64c>)
 8001656:	1986      	adds	r6, r0, r6
 8001658:	18b2      	adds	r2, r6, r2
 800165a:	5bd7      	ldrh	r7, [r2, r7]
 800165c:	0035      	movs	r5, r6
 800165e:	05bf      	lsls	r7, r7, #22
    if (ep->xfer_len > TxByteNbre)
 8001660:	0dbf      	lsrs	r7, r7, #22
 8001662:	429f      	cmp	r7, r3
 8001664:	d221      	bcs.n	80016aa <HAL_PCD_IRQHandler+0x63e>
      ep->xfer_len -= TxByteNbre;
 8001666:	1bdb      	subs	r3, r3, r7
 8001668:	2680      	movs	r6, #128	; 0x80
      ep->xfer_len = 0U;
 800166a:	9a01      	ldr	r2, [sp, #4]
 800166c:	01f6      	lsls	r6, r6, #7
 800166e:	6413      	str	r3, [r2, #64]	; 0x40
 8001670:	9b02      	ldr	r3, [sp, #8]
    if (ep->xfer_len == 0U)
 8001672:	9a00      	ldr	r2, [sp, #0]
 8001674:	4033      	ands	r3, r6
 8001676:	001e      	movs	r6, r3
 8001678:	2328      	movs	r3, #40	; 0x28
 800167a:	4353      	muls	r3, r2
 800167c:	18e3      	adds	r3, r4, r3
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	2b00      	cmp	r3, #0
 8001682:	d129      	bne.n	80016d8 <HAL_PCD_IRQHandler+0x66c>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001684:	0020      	movs	r0, r4
 8001686:	f002 f9fd 	bl	8003a84 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800168a:	2e00      	cmp	r6, #0
 800168c:	d100      	bne.n	8001690 <HAL_PCD_IRQHandler+0x624>
 800168e:	e0ac      	b.n	80017ea <HAL_PCD_IRQHandler+0x77e>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001690:	9b01      	ldr	r3, [sp, #4]
 8001692:	6822      	ldr	r2, [r4, #0]
 8001694:	3328      	adds	r3, #40	; 0x28
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	490a      	ldr	r1, [pc, #40]	; (80016c4 <HAL_PCD_IRQHandler+0x658>)
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	18d2      	adds	r2, r2, r3
 800169e:	8813      	ldrh	r3, [r2, #0]
 80016a0:	400b      	ands	r3, r1
 80016a2:	490c      	ldr	r1, [pc, #48]	; (80016d4 <HAL_PCD_IRQHandler+0x668>)
 80016a4:	430b      	orrs	r3, r1
 80016a6:	8013      	strh	r3, [r2, #0]
 80016a8:	e09f      	b.n	80017ea <HAL_PCD_IRQHandler+0x77e>
      ep->xfer_len = 0U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e7dc      	b.n	8001668 <HAL_PCD_IRQHandler+0x5fc>
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	00000f8f 	.word	0x00000f8f
 80016b4:	00000406 	.word	0x00000406
 80016b8:	00000402 	.word	0x00000402
 80016bc:	ffffbf8f 	.word	0xffffbf8f
 80016c0:	00008080 	.word	0x00008080
 80016c4:	ffff8f8f 	.word	0xffff8f8f
 80016c8:	000080c0 	.word	0x000080c0
 80016cc:	ffff8f0f 	.word	0xffff8f0f
 80016d0:	ffff8000 	.word	0xffff8000
 80016d4:	0000c080 	.word	0x0000c080
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80016d8:	2e00      	cmp	r6, #0
 80016da:	d007      	beq.n	80016ec <HAL_PCD_IRQHandler+0x680>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80016dc:	0089      	lsls	r1, r1, #2
 80016de:	1841      	adds	r1, r0, r1
 80016e0:	880a      	ldrh	r2, [r1, #0]
 80016e2:	4b80      	ldr	r3, [pc, #512]	; (80018e4 <HAL_PCD_IRQHandler+0x878>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	4a80      	ldr	r2, [pc, #512]	; (80018e8 <HAL_PCD_IRQHandler+0x87c>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	800b      	strh	r3, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 80016ec:	2328      	movs	r3, #40	; 0x28
 80016ee:	9a00      	ldr	r2, [sp, #0]
 80016f0:	4353      	muls	r3, r2
 80016f2:	224c      	movs	r2, #76	; 0x4c
 80016f4:	4694      	mov	ip, r2
 80016f6:	18e3      	adds	r3, r4, r3
 80016f8:	449c      	add	ip, r3
 80016fa:	4662      	mov	r2, ip
 80016fc:	7812      	ldrb	r2, [r2, #0]
 80016fe:	2a01      	cmp	r2, #1
 8001700:	d173      	bne.n	80017ea <HAL_PCD_IRQHandler+0x77e>
        ep->xfer_buff += TxByteNbre;
 8001702:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001704:	6c9e      	ldr	r6, [r3, #72]	; 0x48
        ep->xfer_buff += TxByteNbre;
 8001706:	19d1      	adds	r1, r2, r7
        ep->xfer_count += TxByteNbre;
 8001708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 800170a:	63d9      	str	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 800170c:	19d2      	adds	r2, r2, r7
 800170e:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8001710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001712:	4296      	cmp	r6, r2
 8001714:	d31b      	bcc.n	800174e <HAL_PCD_IRQHandler+0x6e2>
          ep->xfer_len_db -= len;
 8001716:	1ab6      	subs	r6, r6, r2
 8001718:	649e      	str	r6, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800171a:	9b01      	ldr	r3, [sp, #4]
 800171c:	9e01      	ldr	r6, [sp, #4]
 800171e:	3329      	adds	r3, #41	; 0x29
 8001720:	781f      	ldrb	r7, [r3, #0]
 8001722:	3628      	adds	r6, #40	; 0x28
 8001724:	b293      	uxth	r3, r2
 8001726:	2f00      	cmp	r7, #0
 8001728:	d136      	bne.n	8001798 <HAL_PCD_IRQHandler+0x72c>
 800172a:	0007      	movs	r7, r0
 800172c:	3750      	adds	r7, #80	; 0x50
 800172e:	883f      	ldrh	r7, [r7, #0]
 8001730:	7836      	ldrb	r6, [r6, #0]
 8001732:	19ef      	adds	r7, r5, r7
 8001734:	00f6      	lsls	r6, r6, #3
 8001736:	19f6      	adds	r6, r6, r7
 8001738:	2a00      	cmp	r2, #0
 800173a:	d114      	bne.n	8001766 <HAL_PCD_IRQHandler+0x6fa>
 800173c:	8832      	ldrh	r2, [r6, #0]
 800173e:	4f6b      	ldr	r7, [pc, #428]	; (80018ec <HAL_PCD_IRQHandler+0x880>)
 8001740:	403a      	ands	r2, r7
 8001742:	8032      	strh	r2, [r6, #0]
 8001744:	8837      	ldrh	r7, [r6, #0]
 8001746:	9a03      	ldr	r2, [sp, #12]
 8001748:	433a      	orrs	r2, r7
 800174a:	0017      	movs	r7, r2
 800174c:	e012      	b.n	8001774 <HAL_PCD_IRQHandler+0x708>
        else if (ep->xfer_len_db == 0U)
 800174e:	2e00      	cmp	r6, #0
 8001750:	d103      	bne.n	800175a <HAL_PCD_IRQHandler+0x6ee>
          ep->xfer_fill_db = 0U;
 8001752:	4663      	mov	r3, ip
    if (ep->xfer_len > TxByteNbre)
 8001754:	003a      	movs	r2, r7
          ep->xfer_fill_db = 0U;
 8001756:	701e      	strb	r6, [r3, #0]
 8001758:	e7df      	b.n	800171a <HAL_PCD_IRQHandler+0x6ae>
          ep->xfer_fill_db = 0U;
 800175a:	2200      	movs	r2, #0
 800175c:	4667      	mov	r7, ip
 800175e:	703a      	strb	r2, [r7, #0]
          ep->xfer_len_db = 0U;
 8001760:	649a      	str	r2, [r3, #72]	; 0x48
 8001762:	0032      	movs	r2, r6
 8001764:	e7d9      	b.n	800171a <HAL_PCD_IRQHandler+0x6ae>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001766:	2a3e      	cmp	r2, #62	; 0x3e
 8001768:	d80e      	bhi.n	8001788 <HAL_PCD_IRQHandler+0x71c>
 800176a:	2501      	movs	r5, #1
 800176c:	0857      	lsrs	r7, r2, #1
 800176e:	402a      	ands	r2, r5
 8001770:	18bf      	adds	r7, r7, r2
 8001772:	02bf      	lsls	r7, r7, #10
 8001774:	b2bf      	uxth	r7, r7
 8001776:	8037      	strh	r7, [r6, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001778:	2228      	movs	r2, #40	; 0x28
 800177a:	9d00      	ldr	r5, [sp, #0]
 800177c:	436a      	muls	r2, r5
 800177e:	18a2      	adds	r2, r4, r2
 8001780:	8e12      	ldrh	r2, [r2, #48]	; 0x30
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001782:	f000 fff0 	bl	8002766 <USB_WritePMA>
 8001786:	e030      	b.n	80017ea <HAL_PCD_IRQHandler+0x77e>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001788:	251f      	movs	r5, #31
 800178a:	0957      	lsrs	r7, r2, #5
 800178c:	402a      	ands	r2, r5
 800178e:	4255      	negs	r5, r2
 8001790:	4155      	adcs	r5, r2
 8001792:	1b7f      	subs	r7, r7, r5
 8001794:	02bf      	lsls	r7, r7, #10
 8001796:	e7d6      	b.n	8001746 <HAL_PCD_IRQHandler+0x6da>
 8001798:	2f01      	cmp	r7, #1
 800179a:	d1ed      	bne.n	8001778 <HAL_PCD_IRQHandler+0x70c>
 800179c:	0002      	movs	r2, r0
 800179e:	3250      	adds	r2, #80	; 0x50
 80017a0:	8817      	ldrh	r7, [r2, #0]
 80017a2:	7832      	ldrb	r2, [r6, #0]
 80017a4:	19ef      	adds	r7, r5, r7
 80017a6:	00d2      	lsls	r2, r2, #3
 80017a8:	19d7      	adds	r7, r2, r7
 80017aa:	803b      	strh	r3, [r7, #0]
 80017ac:	e7e4      	b.n	8001778 <HAL_PCD_IRQHandler+0x70c>
 80017ae:	4d50      	ldr	r5, [pc, #320]	; (80018f0 <HAL_PCD_IRQHandler+0x884>)
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80017b0:	8836      	ldrh	r6, [r6, #0]
 80017b2:	1945      	adds	r5, r0, r5
 80017b4:	19ae      	adds	r6, r5, r6
 80017b6:	5bf7      	ldrh	r7, [r6, r7]
 80017b8:	05bf      	lsls	r7, r7, #22
    if (ep->xfer_len >= TxByteNbre)
 80017ba:	0dbf      	lsrs	r7, r7, #22
 80017bc:	429f      	cmp	r7, r3
 80017be:	d81f      	bhi.n	8001800 <HAL_PCD_IRQHandler+0x794>
      ep->xfer_len -= TxByteNbre;
 80017c0:	9a01      	ldr	r2, [sp, #4]
 80017c2:	1bdb      	subs	r3, r3, r7
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	2680      	movs	r6, #128	; 0x80
 80017c8:	9b02      	ldr	r3, [sp, #8]
 80017ca:	01f6      	lsls	r6, r6, #7
 80017cc:	4033      	ands	r3, r6
 80017ce:	001e      	movs	r6, r3
    if (ep->xfer_len == 0U)
 80017d0:	2328      	movs	r3, #40	; 0x28
 80017d2:	9a00      	ldr	r2, [sp, #0]
 80017d4:	4353      	muls	r3, r2
 80017d6:	18e3      	adds	r3, r4, r3
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d113      	bne.n	8001806 <HAL_PCD_IRQHandler+0x79a>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80017de:	0020      	movs	r0, r4
 80017e0:	f002 f950 	bl	8003a84 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80017e4:	2e00      	cmp	r6, #0
 80017e6:	d100      	bne.n	80017ea <HAL_PCD_IRQHandler+0x77e>
 80017e8:	e752      	b.n	8001690 <HAL_PCD_IRQHandler+0x624>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80017ea:	9d01      	ldr	r5, [sp, #4]
 80017ec:	6822      	ldr	r2, [r4, #0]
 80017ee:	3528      	adds	r5, #40	; 0x28
 80017f0:	782b      	ldrb	r3, [r5, #0]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	18d1      	adds	r1, r2, r3
 80017f6:	880b      	ldrh	r3, [r1, #0]
 80017f8:	4a3e      	ldr	r2, [pc, #248]	; (80018f4 <HAL_PCD_IRQHandler+0x888>)
 80017fa:	401a      	ands	r2, r3
 80017fc:	2330      	movs	r3, #48	; 0x30
 80017fe:	e592      	b.n	8001326 <HAL_PCD_IRQHandler+0x2ba>
      ep->xfer_len = 0U;
 8001800:	9b01      	ldr	r3, [sp, #4]
 8001802:	641a      	str	r2, [r3, #64]	; 0x40
 8001804:	e7df      	b.n	80017c6 <HAL_PCD_IRQHandler+0x75a>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001806:	2e00      	cmp	r6, #0
 8001808:	d107      	bne.n	800181a <HAL_PCD_IRQHandler+0x7ae>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800180a:	0089      	lsls	r1, r1, #2
 800180c:	1841      	adds	r1, r0, r1
 800180e:	880a      	ldrh	r2, [r1, #0]
 8001810:	4b34      	ldr	r3, [pc, #208]	; (80018e4 <HAL_PCD_IRQHandler+0x878>)
 8001812:	4013      	ands	r3, r2
 8001814:	4a34      	ldr	r2, [pc, #208]	; (80018e8 <HAL_PCD_IRQHandler+0x87c>)
 8001816:	4313      	orrs	r3, r2
 8001818:	800b      	strh	r3, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 800181a:	2328      	movs	r3, #40	; 0x28
 800181c:	9a00      	ldr	r2, [sp, #0]
 800181e:	4353      	muls	r3, r2
 8001820:	224c      	movs	r2, #76	; 0x4c
 8001822:	4694      	mov	ip, r2
 8001824:	18e3      	adds	r3, r4, r3
 8001826:	449c      	add	ip, r3
 8001828:	4662      	mov	r2, ip
 800182a:	7812      	ldrb	r2, [r2, #0]
 800182c:	2a01      	cmp	r2, #1
 800182e:	d1dc      	bne.n	80017ea <HAL_PCD_IRQHandler+0x77e>
        ep->xfer_buff += TxByteNbre;
 8001830:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001832:	6c9e      	ldr	r6, [r3, #72]	; 0x48
        ep->xfer_buff += TxByteNbre;
 8001834:	19d1      	adds	r1, r2, r7
        ep->xfer_count += TxByteNbre;
 8001836:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8001838:	63d9      	str	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 800183a:	19d2      	adds	r2, r2, r7
 800183c:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800183e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001840:	4296      	cmp	r6, r2
 8001842:	d31b      	bcc.n	800187c <HAL_PCD_IRQHandler+0x810>
          ep->xfer_len_db -= len;
 8001844:	1ab6      	subs	r6, r6, r2
 8001846:	649e      	str	r6, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001848:	9b01      	ldr	r3, [sp, #4]
 800184a:	9e01      	ldr	r6, [sp, #4]
 800184c:	3329      	adds	r3, #41	; 0x29
 800184e:	781f      	ldrb	r7, [r3, #0]
 8001850:	3628      	adds	r6, #40	; 0x28
 8001852:	b293      	uxth	r3, r2
 8001854:	2f00      	cmp	r7, #0
 8001856:	d134      	bne.n	80018c2 <HAL_PCD_IRQHandler+0x856>
 8001858:	0007      	movs	r7, r0
 800185a:	3750      	adds	r7, #80	; 0x50
 800185c:	883f      	ldrh	r7, [r7, #0]
 800185e:	7836      	ldrb	r6, [r6, #0]
 8001860:	19ef      	adds	r7, r5, r7
 8001862:	00f6      	lsls	r6, r6, #3
 8001864:	19f6      	adds	r6, r6, r7
 8001866:	2a00      	cmp	r2, #0
 8001868:	d114      	bne.n	8001894 <HAL_PCD_IRQHandler+0x828>
 800186a:	8832      	ldrh	r2, [r6, #0]
 800186c:	4f1f      	ldr	r7, [pc, #124]	; (80018ec <HAL_PCD_IRQHandler+0x880>)
 800186e:	403a      	ands	r2, r7
 8001870:	8032      	strh	r2, [r6, #0]
 8001872:	8837      	ldrh	r7, [r6, #0]
 8001874:	9a03      	ldr	r2, [sp, #12]
 8001876:	433a      	orrs	r2, r7
 8001878:	0017      	movs	r7, r2
 800187a:	e012      	b.n	80018a2 <HAL_PCD_IRQHandler+0x836>
        else if (ep->xfer_len_db == 0U)
 800187c:	2e00      	cmp	r6, #0
 800187e:	d103      	bne.n	8001888 <HAL_PCD_IRQHandler+0x81c>
          ep->xfer_fill_db = 0U;
 8001880:	4663      	mov	r3, ip
    if (ep->xfer_len >= TxByteNbre)
 8001882:	003a      	movs	r2, r7
          ep->xfer_fill_db = 0U;
 8001884:	701e      	strb	r6, [r3, #0]
 8001886:	e7df      	b.n	8001848 <HAL_PCD_IRQHandler+0x7dc>
          ep->xfer_len_db = 0U;
 8001888:	2200      	movs	r2, #0
 800188a:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800188c:	4663      	mov	r3, ip
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	0032      	movs	r2, r6
 8001892:	e7d9      	b.n	8001848 <HAL_PCD_IRQHandler+0x7dc>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001894:	2a3e      	cmp	r2, #62	; 0x3e
 8001896:	d80c      	bhi.n	80018b2 <HAL_PCD_IRQHandler+0x846>
 8001898:	2501      	movs	r5, #1
 800189a:	0857      	lsrs	r7, r2, #1
 800189c:	402a      	ands	r2, r5
 800189e:	18bf      	adds	r7, r7, r2
 80018a0:	02bf      	lsls	r7, r7, #10
 80018a2:	b2bf      	uxth	r7, r7
 80018a4:	8037      	strh	r7, [r6, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80018a6:	2228      	movs	r2, #40	; 0x28
 80018a8:	9d00      	ldr	r5, [sp, #0]
 80018aa:	436a      	muls	r2, r5
 80018ac:	18a2      	adds	r2, r4, r2
 80018ae:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80018b0:	e767      	b.n	8001782 <HAL_PCD_IRQHandler+0x716>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80018b2:	251f      	movs	r5, #31
 80018b4:	0957      	lsrs	r7, r2, #5
 80018b6:	402a      	ands	r2, r5
 80018b8:	4255      	negs	r5, r2
 80018ba:	4155      	adcs	r5, r2
 80018bc:	1b7f      	subs	r7, r7, r5
 80018be:	02bf      	lsls	r7, r7, #10
 80018c0:	e7d8      	b.n	8001874 <HAL_PCD_IRQHandler+0x808>
 80018c2:	2f01      	cmp	r7, #1
 80018c4:	d1ef      	bne.n	80018a6 <HAL_PCD_IRQHandler+0x83a>
 80018c6:	0002      	movs	r2, r0
 80018c8:	3250      	adds	r2, #80	; 0x50
 80018ca:	8817      	ldrh	r7, [r2, #0]
 80018cc:	7832      	ldrb	r2, [r6, #0]
 80018ce:	19ef      	adds	r7, r5, r7
 80018d0:	00d2      	lsls	r2, r2, #3
 80018d2:	19d7      	adds	r7, r2, r7
 80018d4:	803b      	strh	r3, [r7, #0]
 80018d6:	e7e6      	b.n	80018a6 <HAL_PCD_IRQHandler+0x83a>
      HAL_PCD_SuspendCallback(hpcd);
 80018d8:	0020      	movs	r0, r4
 80018da:	f002 f8f7 	bl	8003acc <HAL_PCD_SuspendCallback>
 80018de:	f7ff fc57 	bl	8001190 <HAL_PCD_IRQHandler+0x124>
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	ffff8f8f 	.word	0xffff8f8f
 80018e8:	0000c080 	.word	0x0000c080
 80018ec:	ffff83ff 	.word	0xffff83ff
 80018f0:	00000406 	.word	0x00000406
 80018f4:	ffff8fbf 	.word	0xffff8fbf

080018f8 <HAL_PCD_EP_Open>:
{
 80018f8:	b570      	push	{r4, r5, r6, lr}
 80018fa:	2507      	movs	r5, #7
 80018fc:	400d      	ands	r5, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80018fe:	b249      	sxtb	r1, r1
{
 8001900:	0004      	movs	r4, r0
 8001902:	2028      	movs	r0, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8001904:	2900      	cmp	r1, #0
 8001906:	da1d      	bge.n	8001944 <HAL_PCD_EP_Open+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001908:	1c69      	adds	r1, r5, #1
 800190a:	4341      	muls	r1, r0
    ep->is_in = 1U;
 800190c:	3827      	subs	r0, #39	; 0x27
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800190e:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8001910:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
 8001912:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8001914:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001916:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 8001918:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800191a:	2a00      	cmp	r2, #0
 800191c:	d000      	beq.n	8001920 <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 800191e:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8001920:	2b02      	cmp	r3, #2
 8001922:	d101      	bne.n	8001928 <HAL_PCD_EP_Open+0x30>
    ep->data_pid_start = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8001928:	25aa      	movs	r5, #170	; 0xaa
 800192a:	00ad      	lsls	r5, r5, #2
 800192c:	5d63      	ldrb	r3, [r4, r5]
 800192e:	2002      	movs	r0, #2
 8001930:	2b01      	cmp	r3, #1
 8001932:	d006      	beq.n	8001942 <HAL_PCD_EP_Open+0x4a>
 8001934:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001936:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001938:	5563      	strb	r3, [r4, r5]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800193a:	f000 fcdd 	bl	80022f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800193e:	2000      	movs	r0, #0
 8001940:	5560      	strb	r0, [r4, r5]
}
 8001942:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001944:	4368      	muls	r0, r5
 8001946:	0001      	movs	r1, r0
    ep->is_in = 0U;
 8001948:	2600      	movs	r6, #0
 800194a:	1820      	adds	r0, r4, r0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800194c:	3169      	adds	r1, #105	; 0x69
    ep->is_in = 0U;
 800194e:	306a      	adds	r0, #106	; 0x6a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001950:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 8001952:	30ff      	adds	r0, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001954:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8001956:	7006      	strb	r6, [r0, #0]
 8001958:	e7db      	b.n	8001912 <HAL_PCD_EP_Open+0x1a>

0800195a <HAL_PCD_EP_Close>:
{
 800195a:	b570      	push	{r4, r5, r6, lr}
 800195c:	0004      	movs	r4, r0
 800195e:	2007      	movs	r0, #7
 8001960:	4008      	ands	r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001962:	b249      	sxtb	r1, r1
 8001964:	2328      	movs	r3, #40	; 0x28
 8001966:	2900      	cmp	r1, #0
 8001968:	da13      	bge.n	8001992 <HAL_PCD_EP_Close+0x38>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800196a:	1c41      	adds	r1, r0, #1
 800196c:	4359      	muls	r1, r3
    ep->is_in = 1U;
 800196e:	3b27      	subs	r3, #39	; 0x27
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001970:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8001972:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8001974:	25aa      	movs	r5, #170	; 0xaa
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001976:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 8001978:	00ad      	lsls	r5, r5, #2
 800197a:	5d63      	ldrb	r3, [r4, r5]
 800197c:	2002      	movs	r0, #2
 800197e:	2b01      	cmp	r3, #1
 8001980:	d006      	beq.n	8001990 <HAL_PCD_EP_Close+0x36>
 8001982:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001984:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001986:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001988:	f000 fde4 	bl	8002554 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800198c:	2000      	movs	r0, #0
 800198e:	5560      	strb	r0, [r4, r5]
}
 8001990:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001992:	4343      	muls	r3, r0
 8001994:	0019      	movs	r1, r3
    ep->is_in = 0U;
 8001996:	18e2      	adds	r2, r4, r3
 8001998:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800199a:	3169      	adds	r1, #105	; 0x69
    ep->is_in = 0U;
 800199c:	326a      	adds	r2, #106	; 0x6a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800199e:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 80019a0:	32ff      	adds	r2, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019a2:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 80019a4:	7013      	strb	r3, [r2, #0]
 80019a6:	e7e5      	b.n	8001974 <HAL_PCD_EP_Close+0x1a>

080019a8 <HAL_PCD_EP_Receive>:
{
 80019a8:	b570      	push	{r4, r5, r6, lr}
 80019aa:	2407      	movs	r4, #7
 80019ac:	4021      	ands	r1, r4
  ep->xfer_buff = pBuf;
 80019ae:	3421      	adds	r4, #33	; 0x21
 80019b0:	434c      	muls	r4, r1
 80019b2:	1905      	adds	r5, r0, r4
 80019b4:	002e      	movs	r6, r5
 80019b6:	367d      	adds	r6, #125	; 0x7d
 80019b8:	36ff      	adds	r6, #255	; 0xff
 80019ba:	6032      	str	r2, [r6, #0]
  ep->xfer_len = len;
 80019bc:	002a      	movs	r2, r5
 80019be:	3281      	adds	r2, #129	; 0x81
 80019c0:	32ff      	adds	r2, #255	; 0xff
 80019c2:	6013      	str	r3, [r2, #0]
  ep->xfer_count = 0U;
 80019c4:	002b      	movs	r3, r5
 80019c6:	2600      	movs	r6, #0
 80019c8:	3385      	adds	r3, #133	; 0x85
 80019ca:	33ff      	adds	r3, #255	; 0xff
  ep->num = ep_addr & EP_ADDR_MSK;
 80019cc:	3569      	adds	r5, #105	; 0x69
  ep->xfer_count = 0U;
 80019ce:	601e      	str	r6, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019d0:	35ff      	adds	r5, #255	; 0xff
  ep->is_in = 0U;
 80019d2:	3b1b      	subs	r3, #27
 80019d4:	701e      	strb	r6, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019d6:	7029      	strb	r1, [r5, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019d8:	0021      	movs	r1, r4
 80019da:	3169      	adds	r1, #105	; 0x69
 80019dc:	31ff      	adds	r1, #255	; 0xff
 80019de:	1841      	adds	r1, r0, r1
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019e0:	6800      	ldr	r0, [r0, #0]
 80019e2:	f000 fed5 	bl	8002790 <USB_EPStartXfer>
}
 80019e6:	0030      	movs	r0, r6
 80019e8:	bd70      	pop	{r4, r5, r6, pc}

080019ea <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80019ea:	2307      	movs	r3, #7
 80019ec:	400b      	ands	r3, r1
 80019ee:	2128      	movs	r1, #40	; 0x28
 80019f0:	4359      	muls	r1, r3
 80019f2:	1840      	adds	r0, r0, r1
 80019f4:	3085      	adds	r0, #133	; 0x85
 80019f6:	30ff      	adds	r0, #255	; 0xff
 80019f8:	6800      	ldr	r0, [r0, #0]
}
 80019fa:	4770      	bx	lr

080019fc <HAL_PCD_EP_Transmit>:
{
 80019fc:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 80019fe:	2628      	movs	r6, #40	; 0x28
 8001a00:	2407      	movs	r4, #7
 8001a02:	4021      	ands	r1, r4
 8001a04:	0034      	movs	r4, r6
 8001a06:	434c      	muls	r4, r1
 8001a08:	1904      	adds	r4, r0, r4
  ep->xfer_fill_db = 1U;
 8001a0a:	0025      	movs	r5, r4
  ep->xfer_buff = pBuf;
 8001a0c:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 8001a0e:	2201      	movs	r2, #1
 8001a10:	354c      	adds	r5, #76	; 0x4c
  ep->xfer_len = len;
 8001a12:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 8001a14:	702a      	strb	r2, [r5, #0]
  ep->xfer_len_db = len;
 8001a16:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8001a18:	2500      	movs	r5, #0
  ep->is_in = 1U;
 8001a1a:	0023      	movs	r3, r4
  ep->xfer_count = 0U;
 8001a1c:	6465      	str	r5, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8001a1e:	3329      	adds	r3, #41	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a20:	19a4      	adds	r4, r4, r6
  ep->is_in = 1U;
 8001a22:	701a      	strb	r2, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a24:	7021      	strb	r1, [r4, #0]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a26:	1889      	adds	r1, r1, r2
 8001a28:	4371      	muls	r1, r6
 8001a2a:	1841      	adds	r1, r0, r1
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a2c:	6800      	ldr	r0, [r0, #0]
 8001a2e:	f000 feaf 	bl	8002790 <USB_EPStartXfer>
}
 8001a32:	0028      	movs	r0, r5
 8001a34:	bd70      	pop	{r4, r5, r6, pc}

08001a36 <HAL_PCD_EP_SetStall>:
{
 8001a36:	b570      	push	{r4, r5, r6, lr}
 8001a38:	0004      	movs	r4, r0
 8001a3a:	2507      	movs	r5, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a3c:	6863      	ldr	r3, [r4, #4]
 8001a3e:	400d      	ands	r5, r1
    return HAL_ERROR;
 8001a40:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a42:	429d      	cmp	r5, r3
 8001a44:	d816      	bhi.n	8001a74 <HAL_PCD_EP_SetStall+0x3e>
  if ((0x80U & ep_addr) == 0x80U)
 8001a46:	b24a      	sxtb	r2, r1
 8001a48:	2328      	movs	r3, #40	; 0x28
 8001a4a:	2a00      	cmp	r2, #0
 8001a4c:	da13      	bge.n	8001a76 <HAL_PCD_EP_SetStall+0x40>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a4e:	1829      	adds	r1, r5, r0
 8001a50:	4359      	muls	r1, r3
 8001a52:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8001a54:	7048      	strb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a56:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8001a58:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 8001a5a:	25aa      	movs	r5, #170	; 0xaa
  ep->is_stall = 1U;
 8001a5c:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8001a5e:	00ad      	lsls	r5, r5, #2
 8001a60:	5d62      	ldrb	r2, [r4, r5]
 8001a62:	2002      	movs	r0, #2
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d005      	beq.n	8001a74 <HAL_PCD_EP_SetStall+0x3e>
 8001a68:	5563      	strb	r3, [r4, r5]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a6a:	6820      	ldr	r0, [r4, #0]
 8001a6c:	f000 fe08 	bl	8002680 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8001a70:	2000      	movs	r0, #0
 8001a72:	5560      	strb	r0, [r4, r5]
}
 8001a74:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8001a76:	434b      	muls	r3, r1
 8001a78:	0019      	movs	r1, r3
    ep->is_in = 0U;
 8001a7a:	18e2      	adds	r2, r4, r3
 8001a7c:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8001a7e:	3169      	adds	r1, #105	; 0x69
    ep->is_in = 0U;
 8001a80:	326a      	adds	r2, #106	; 0x6a
    ep = &hpcd->OUT_ep[ep_addr];
 8001a82:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 8001a84:	32ff      	adds	r2, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr];
 8001a86:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8001a88:	7013      	strb	r3, [r2, #0]
 8001a8a:	e7e4      	b.n	8001a56 <HAL_PCD_EP_SetStall+0x20>

08001a8c <HAL_PCD_EP_ClrStall>:
{
 8001a8c:	b570      	push	{r4, r5, r6, lr}
 8001a8e:	0004      	movs	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a90:	230f      	movs	r3, #15
 8001a92:	6862      	ldr	r2, [r4, #4]
 8001a94:	400b      	ands	r3, r1
    return HAL_ERROR;
 8001a96:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d819      	bhi.n	8001ad0 <HAL_PCD_EP_ClrStall+0x44>
 8001a9c:	2507      	movs	r5, #7
 8001a9e:	400d      	ands	r5, r1
  if ((0x80U & ep_addr) == 0x80U)
 8001aa0:	b249      	sxtb	r1, r1
 8001aa2:	2328      	movs	r3, #40	; 0x28
 8001aa4:	2900      	cmp	r1, #0
 8001aa6:	da14      	bge.n	8001ad2 <HAL_PCD_EP_ClrStall+0x46>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aa8:	1829      	adds	r1, r5, r0
 8001aaa:	4359      	muls	r1, r3
 8001aac:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8001aae:	7048      	strb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ab0:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 0U;
 8001ab2:	2600      	movs	r6, #0
  __HAL_LOCK(hpcd);
 8001ab4:	25aa      	movs	r5, #170	; 0xaa
  ep->is_stall = 0U;
 8001ab6:	708e      	strb	r6, [r1, #2]
  __HAL_LOCK(hpcd);
 8001ab8:	00ad      	lsls	r5, r5, #2
 8001aba:	5d63      	ldrb	r3, [r4, r5]
 8001abc:	2002      	movs	r0, #2
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d006      	beq.n	8001ad0 <HAL_PCD_EP_ClrStall+0x44>
 8001ac2:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ac4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001ac6:	5563      	strb	r3, [r4, r5]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ac8:	f000 fdf8 	bl	80026bc <USB_EPClearStall>
  return HAL_OK;
 8001acc:	0030      	movs	r0, r6
  __HAL_UNLOCK(hpcd);
 8001ace:	5566      	strb	r6, [r4, r5]
}
 8001ad0:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ad2:	436b      	muls	r3, r5
 8001ad4:	0019      	movs	r1, r3
    ep->is_in = 0U;
 8001ad6:	18e2      	adds	r2, r4, r3
 8001ad8:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ada:	3169      	adds	r1, #105	; 0x69
    ep->is_in = 0U;
 8001adc:	326a      	adds	r2, #106	; 0x6a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ade:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 8001ae0:	32ff      	adds	r2, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ae2:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8001ae4:	7013      	strb	r3, [r2, #0]
 8001ae6:	e7e3      	b.n	8001ab0 <HAL_PCD_EP_ClrStall+0x24>

08001ae8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8001ae8:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001aea:	060c      	lsls	r4, r1, #24
 8001aec:	d50c      	bpl.n	8001b08 <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aee:	2407      	movs	r4, #7
 8001af0:	4021      	ands	r1, r4
 8001af2:	3101      	adds	r1, #1
 8001af4:	3421      	adds	r4, #33	; 0x21
 8001af6:	4361      	muls	r1, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001af8:	1840      	adds	r0, r0, r1
 8001afa:	b299      	uxth	r1, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001afc:	2a00      	cmp	r2, #0
 8001afe:	d108      	bne.n	8001b12 <HAL_PCDEx_PMAConfig+0x2a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001b00:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001b02:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8001b04:	2000      	movs	r0, #0
 8001b06:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8001b08:	2428      	movs	r4, #40	; 0x28
 8001b0a:	4361      	muls	r1, r4
 8001b0c:	3169      	adds	r1, #105	; 0x69
 8001b0e:	31ff      	adds	r1, #255	; 0xff
 8001b10:	e7f2      	b.n	8001af8 <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 1U;
 8001b12:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001b14:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8001b16:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001b18:	8101      	strh	r1, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001b1a:	8143      	strh	r3, [r0, #10]
 8001b1c:	e7f2      	b.n	8001b04 <HAL_PCDEx_PMAConfig+0x1c>

08001b1e <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8001b1e:	6803      	ldr	r3, [r0, #0]
{
 8001b20:	0001      	movs	r1, r0
  hpcd->lpm_active = 1U;
 8001b22:	20ba      	movs	r0, #186	; 0xba
 8001b24:	2201      	movs	r2, #1
{
 8001b26:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 8001b28:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 8001b2a:	24b8      	movs	r4, #184	; 0xb8
  hpcd->lpm_active = 1U;
 8001b2c:	500a      	str	r2, [r1, r0]
  hpcd->LPM_State = LPM_L0;
 8001b2e:	2000      	movs	r0, #0
 8001b30:	00a4      	lsls	r4, r4, #2
 8001b32:	5508      	strb	r0, [r1, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001b34:	3354      	adds	r3, #84	; 0x54
 8001b36:	8819      	ldrh	r1, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	801a      	strh	r2, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	8819      	ldrh	r1, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 8001b44:	bd10      	pop	{r4, pc}

08001b46 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001b46:	4770      	bx	lr

08001b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b4a:	0004      	movs	r4, r0
 8001b4c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b4e:	2800      	cmp	r0, #0
 8001b50:	d102      	bne.n	8001b58 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001b52:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8001b54:	b005      	add	sp, #20
 8001b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b58:	6803      	ldr	r3, [r0, #0]
 8001b5a:	07db      	lsls	r3, r3, #31
 8001b5c:	d433      	bmi.n	8001bc6 <HAL_RCC_OscConfig+0x7e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b5e:	6823      	ldr	r3, [r4, #0]
 8001b60:	079b      	lsls	r3, r3, #30
 8001b62:	d500      	bpl.n	8001b66 <HAL_RCC_OscConfig+0x1e>
 8001b64:	e087      	b.n	8001c76 <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b66:	6823      	ldr	r3, [r4, #0]
 8001b68:	071b      	lsls	r3, r3, #28
 8001b6a:	d500      	bpl.n	8001b6e <HAL_RCC_OscConfig+0x26>
 8001b6c:	e0c8      	b.n	8001d00 <HAL_RCC_OscConfig+0x1b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	075b      	lsls	r3, r3, #29
 8001b72:	d500      	bpl.n	8001b76 <HAL_RCC_OscConfig+0x2e>
 8001b74:	e0eb      	b.n	8001d4e <HAL_RCC_OscConfig+0x206>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b76:	6823      	ldr	r3, [r4, #0]
 8001b78:	06db      	lsls	r3, r3, #27
 8001b7a:	d51a      	bpl.n	8001bb2 <HAL_RCC_OscConfig+0x6a>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b7c:	6962      	ldr	r2, [r4, #20]
 8001b7e:	4dbc      	ldr	r5, [pc, #752]	; (8001e70 <HAL_RCC_OscConfig+0x328>)
 8001b80:	2304      	movs	r3, #4
 8001b82:	2a01      	cmp	r2, #1
 8001b84:	d000      	beq.n	8001b88 <HAL_RCC_OscConfig+0x40>
 8001b86:	e157      	b.n	8001e38 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b88:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b8a:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001b90:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001b92:	431a      	orrs	r2, r3
 8001b94:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001b96:	f7fe fd73 	bl	8000680 <HAL_GetTick>
 8001b9a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b9c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001b9e:	4233      	tst	r3, r6
 8001ba0:	d100      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x5c>
 8001ba2:	e142      	b.n	8001e2a <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ba4:	21f8      	movs	r1, #248	; 0xf8
 8001ba6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001ba8:	69a3      	ldr	r3, [r4, #24]
 8001baa:	438a      	bics	r2, r1
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	636b      	str	r3, [r5, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	069b      	lsls	r3, r3, #26
 8001bb6:	d500      	bpl.n	8001bba <HAL_RCC_OscConfig+0x72>
 8001bb8:	e166      	b.n	8001e88 <HAL_RCC_OscConfig+0x340>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bbc:	2a00      	cmp	r2, #0
 8001bbe:	d000      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x7a>
 8001bc0:	e1a3      	b.n	8001f0a <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	e7c6      	b.n	8001b54 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bc6:	210c      	movs	r1, #12
 8001bc8:	4da9      	ldr	r5, [pc, #676]	; (8001e70 <HAL_RCC_OscConfig+0x328>)
 8001bca:	686a      	ldr	r2, [r5, #4]
 8001bcc:	400a      	ands	r2, r1
 8001bce:	2a04      	cmp	r2, #4
 8001bd0:	d00b      	beq.n	8001bea <HAL_RCC_OscConfig+0xa2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bd2:	686b      	ldr	r3, [r5, #4]
 8001bd4:	400b      	ands	r3, r1
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d10e      	bne.n	8001bf8 <HAL_RCC_OscConfig+0xb0>
 8001bda:	22c0      	movs	r2, #192	; 0xc0
 8001bdc:	686b      	ldr	r3, [r5, #4]
 8001bde:	0252      	lsls	r2, r2, #9
 8001be0:	4013      	ands	r3, r2
 8001be2:	2280      	movs	r2, #128	; 0x80
 8001be4:	0252      	lsls	r2, r2, #9
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d106      	bne.n	8001bf8 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bea:	682b      	ldr	r3, [r5, #0]
 8001bec:	039b      	lsls	r3, r3, #14
 8001bee:	d5b6      	bpl.n	8001b5e <HAL_RCC_OscConfig+0x16>
 8001bf0:	6863      	ldr	r3, [r4, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1b3      	bne.n	8001b5e <HAL_RCC_OscConfig+0x16>
 8001bf6:	e7ac      	b.n	8001b52 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf8:	6863      	ldr	r3, [r4, #4]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d113      	bne.n	8001c26 <HAL_RCC_OscConfig+0xde>
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	682a      	ldr	r2, [r5, #0]
 8001c02:	025b      	lsls	r3, r3, #9
 8001c04:	4313      	orrs	r3, r2
 8001c06:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c08:	f7fe fd3a 	bl	8000680 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001c0e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c10:	02b6      	lsls	r6, r6, #10
 8001c12:	682b      	ldr	r3, [r5, #0]
 8001c14:	4233      	tst	r3, r6
 8001c16:	d1a2      	bne.n	8001b5e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c18:	f7fe fd32 	bl	8000680 <HAL_GetTick>
 8001c1c:	1bc0      	subs	r0, r0, r7
 8001c1e:	2864      	cmp	r0, #100	; 0x64
 8001c20:	d9f7      	bls.n	8001c12 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8001c22:	2003      	movs	r0, #3
 8001c24:	e796      	b.n	8001b54 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d115      	bne.n	8001c56 <HAL_RCC_OscConfig+0x10e>
 8001c2a:	682b      	ldr	r3, [r5, #0]
 8001c2c:	4a91      	ldr	r2, [pc, #580]	; (8001e74 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2e:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c30:	4013      	ands	r3, r2
 8001c32:	602b      	str	r3, [r5, #0]
 8001c34:	682b      	ldr	r3, [r5, #0]
 8001c36:	4a90      	ldr	r2, [pc, #576]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c38:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c3e:	f7fe fd1f 	bl	8000680 <HAL_GetTick>
 8001c42:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c44:	682b      	ldr	r3, [r5, #0]
 8001c46:	4233      	tst	r3, r6
 8001c48:	d089      	beq.n	8001b5e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c4a:	f7fe fd19 	bl	8000680 <HAL_GetTick>
 8001c4e:	1bc0      	subs	r0, r0, r7
 8001c50:	2864      	cmp	r0, #100	; 0x64
 8001c52:	d9f7      	bls.n	8001c44 <HAL_RCC_OscConfig+0xfc>
 8001c54:	e7e5      	b.n	8001c22 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c56:	2b05      	cmp	r3, #5
 8001c58:	d105      	bne.n	8001c66 <HAL_RCC_OscConfig+0x11e>
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	682a      	ldr	r2, [r5, #0]
 8001c5e:	02db      	lsls	r3, r3, #11
 8001c60:	4313      	orrs	r3, r2
 8001c62:	602b      	str	r3, [r5, #0]
 8001c64:	e7cb      	b.n	8001bfe <HAL_RCC_OscConfig+0xb6>
 8001c66:	682b      	ldr	r3, [r5, #0]
 8001c68:	4a82      	ldr	r2, [pc, #520]	; (8001e74 <HAL_RCC_OscConfig+0x32c>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	602b      	str	r3, [r5, #0]
 8001c6e:	682b      	ldr	r3, [r5, #0]
 8001c70:	4a81      	ldr	r2, [pc, #516]	; (8001e78 <HAL_RCC_OscConfig+0x330>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	e7c7      	b.n	8001c06 <HAL_RCC_OscConfig+0xbe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c76:	220c      	movs	r2, #12
 8001c78:	4d7d      	ldr	r5, [pc, #500]	; (8001e70 <HAL_RCC_OscConfig+0x328>)
 8001c7a:	686b      	ldr	r3, [r5, #4]
 8001c7c:	4213      	tst	r3, r2
 8001c7e:	d00b      	beq.n	8001c98 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c80:	686b      	ldr	r3, [r5, #4]
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d116      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x16e>
 8001c88:	22c0      	movs	r2, #192	; 0xc0
 8001c8a:	686b      	ldr	r3, [r5, #4]
 8001c8c:	0252      	lsls	r2, r2, #9
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2280      	movs	r2, #128	; 0x80
 8001c92:	0212      	lsls	r2, r2, #8
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d10e      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x16e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c98:	682b      	ldr	r3, [r5, #0]
 8001c9a:	079b      	lsls	r3, r3, #30
 8001c9c:	d503      	bpl.n	8001ca6 <HAL_RCC_OscConfig+0x15e>
 8001c9e:	68e3      	ldr	r3, [r4, #12]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d000      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x15e>
 8001ca4:	e755      	b.n	8001b52 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca6:	21f8      	movs	r1, #248	; 0xf8
 8001ca8:	682a      	ldr	r2, [r5, #0]
 8001caa:	6923      	ldr	r3, [r4, #16]
 8001cac:	438a      	bics	r2, r1
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	602b      	str	r3, [r5, #0]
 8001cb4:	e757      	b.n	8001b66 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb6:	68e2      	ldr	r2, [r4, #12]
 8001cb8:	2301      	movs	r3, #1
 8001cba:	2a00      	cmp	r2, #0
 8001cbc:	d00f      	beq.n	8001cde <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_ENABLE();
 8001cbe:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc0:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001cc6:	f7fe fcdb 	bl	8000680 <HAL_GetTick>
 8001cca:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ccc:	682b      	ldr	r3, [r5, #0]
 8001cce:	4233      	tst	r3, r6
 8001cd0:	d1e9      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd2:	f7fe fcd5 	bl	8000680 <HAL_GetTick>
 8001cd6:	1bc0      	subs	r0, r0, r7
 8001cd8:	2802      	cmp	r0, #2
 8001cda:	d9f7      	bls.n	8001ccc <HAL_RCC_OscConfig+0x184>
 8001cdc:	e7a1      	b.n	8001c22 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 8001cde:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce0:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8001ce2:	439a      	bics	r2, r3
 8001ce4:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8001ce6:	f7fe fccb 	bl	8000680 <HAL_GetTick>
 8001cea:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cec:	682b      	ldr	r3, [r5, #0]
 8001cee:	4233      	tst	r3, r6
 8001cf0:	d100      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x1ac>
 8001cf2:	e738      	b.n	8001b66 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf4:	f7fe fcc4 	bl	8000680 <HAL_GetTick>
 8001cf8:	1bc0      	subs	r0, r0, r7
 8001cfa:	2802      	cmp	r0, #2
 8001cfc:	d9f6      	bls.n	8001cec <HAL_RCC_OscConfig+0x1a4>
 8001cfe:	e790      	b.n	8001c22 <HAL_RCC_OscConfig+0xda>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d00:	69e2      	ldr	r2, [r4, #28]
 8001d02:	2301      	movs	r3, #1
 8001d04:	4d5a      	ldr	r5, [pc, #360]	; (8001e70 <HAL_RCC_OscConfig+0x328>)
 8001d06:	2a00      	cmp	r2, #0
 8001d08:	d010      	beq.n	8001d2c <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 8001d0a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0c:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001d12:	f7fe fcb5 	bl	8000680 <HAL_GetTick>
 8001d16:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d18:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001d1a:	4233      	tst	r3, r6
 8001d1c:	d000      	beq.n	8001d20 <HAL_RCC_OscConfig+0x1d8>
 8001d1e:	e726      	b.n	8001b6e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d20:	f7fe fcae 	bl	8000680 <HAL_GetTick>
 8001d24:	1bc0      	subs	r0, r0, r7
 8001d26:	2802      	cmp	r0, #2
 8001d28:	d9f6      	bls.n	8001d18 <HAL_RCC_OscConfig+0x1d0>
 8001d2a:	e77a      	b.n	8001c22 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSI_DISABLE();
 8001d2c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2e:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8001d30:	439a      	bics	r2, r3
 8001d32:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001d34:	f7fe fca4 	bl	8000680 <HAL_GetTick>
 8001d38:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001d3c:	4233      	tst	r3, r6
 8001d3e:	d100      	bne.n	8001d42 <HAL_RCC_OscConfig+0x1fa>
 8001d40:	e715      	b.n	8001b6e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d42:	f7fe fc9d 	bl	8000680 <HAL_GetTick>
 8001d46:	1bc0      	subs	r0, r0, r7
 8001d48:	2802      	cmp	r0, #2
 8001d4a:	d9f6      	bls.n	8001d3a <HAL_RCC_OscConfig+0x1f2>
 8001d4c:	e769      	b.n	8001c22 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4e:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001d50:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d52:	4d47      	ldr	r5, [pc, #284]	; (8001e70 <HAL_RCC_OscConfig+0x328>)
 8001d54:	0552      	lsls	r2, r2, #21
 8001d56:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001d58:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5a:	4213      	tst	r3, r2
 8001d5c:	d108      	bne.n	8001d70 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5e:	69eb      	ldr	r3, [r5, #28]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61eb      	str	r3, [r5, #28]
 8001d64:	69eb      	ldr	r3, [r5, #28]
 8001d66:	4013      	ands	r3, r2
 8001d68:	9303      	str	r3, [sp, #12]
 8001d6a:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	2780      	movs	r7, #128	; 0x80
 8001d72:	4e42      	ldr	r6, [pc, #264]	; (8001e7c <HAL_RCC_OscConfig+0x334>)
 8001d74:	007f      	lsls	r7, r7, #1
 8001d76:	6833      	ldr	r3, [r6, #0]
 8001d78:	423b      	tst	r3, r7
 8001d7a:	d006      	beq.n	8001d8a <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7c:	68a3      	ldr	r3, [r4, #8]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d113      	bne.n	8001daa <HAL_RCC_OscConfig+0x262>
 8001d82:	6a2a      	ldr	r2, [r5, #32]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	622b      	str	r3, [r5, #32]
 8001d88:	e030      	b.n	8001dec <HAL_RCC_OscConfig+0x2a4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8a:	6833      	ldr	r3, [r6, #0]
 8001d8c:	433b      	orrs	r3, r7
 8001d8e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001d90:	f7fe fc76 	bl	8000680 <HAL_GetTick>
 8001d94:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d96:	6833      	ldr	r3, [r6, #0]
 8001d98:	423b      	tst	r3, r7
 8001d9a:	d1ef      	bne.n	8001d7c <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9c:	f7fe fc70 	bl	8000680 <HAL_GetTick>
 8001da0:	9b01      	ldr	r3, [sp, #4]
 8001da2:	1ac0      	subs	r0, r0, r3
 8001da4:	2864      	cmp	r0, #100	; 0x64
 8001da6:	d9f6      	bls.n	8001d96 <HAL_RCC_OscConfig+0x24e>
 8001da8:	e73b      	b.n	8001c22 <HAL_RCC_OscConfig+0xda>
 8001daa:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d114      	bne.n	8001dda <HAL_RCC_OscConfig+0x292>
 8001db0:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db2:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db4:	4393      	bics	r3, r2
 8001db6:	622b      	str	r3, [r5, #32]
 8001db8:	6a2b      	ldr	r3, [r5, #32]
 8001dba:	3203      	adds	r2, #3
 8001dbc:	4393      	bics	r3, r2
 8001dbe:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001dc0:	f7fe fc5e 	bl	8000680 <HAL_GetTick>
 8001dc4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc6:	6a2b      	ldr	r3, [r5, #32]
 8001dc8:	423b      	tst	r3, r7
 8001dca:	d025      	beq.n	8001e18 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dcc:	f7fe fc58 	bl	8000680 <HAL_GetTick>
 8001dd0:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001dd2:	1b80      	subs	r0, r0, r6
 8001dd4:	4298      	cmp	r0, r3
 8001dd6:	d9f6      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x27e>
 8001dd8:	e723      	b.n	8001c22 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d10b      	bne.n	8001df6 <HAL_RCC_OscConfig+0x2ae>
 8001dde:	6a29      	ldr	r1, [r5, #32]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	430b      	orrs	r3, r1
 8001de4:	622b      	str	r3, [r5, #32]
 8001de6:	6a2b      	ldr	r3, [r5, #32]
 8001de8:	431a      	orrs	r2, r3
 8001dea:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8001dec:	f7fe fc48 	bl	8000680 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df0:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001df2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df4:	e00d      	b.n	8001e12 <HAL_RCC_OscConfig+0x2ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df6:	6a2b      	ldr	r3, [r5, #32]
 8001df8:	4393      	bics	r3, r2
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	622b      	str	r3, [r5, #32]
 8001dfe:	6a2b      	ldr	r3, [r5, #32]
 8001e00:	4393      	bics	r3, r2
 8001e02:	e7c0      	b.n	8001d86 <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e04:	f7fe fc3c 	bl	8000680 <HAL_GetTick>
 8001e08:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001e0a:	1b80      	subs	r0, r0, r6
 8001e0c:	4298      	cmp	r0, r3
 8001e0e:	d900      	bls.n	8001e12 <HAL_RCC_OscConfig+0x2ca>
 8001e10:	e707      	b.n	8001c22 <HAL_RCC_OscConfig+0xda>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e12:	6a2b      	ldr	r3, [r5, #32]
 8001e14:	423b      	tst	r3, r7
 8001e16:	d0f5      	beq.n	8001e04 <HAL_RCC_OscConfig+0x2bc>
    if(pwrclkchanged == SET)
 8001e18:	9b00      	ldr	r3, [sp, #0]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d000      	beq.n	8001e20 <HAL_RCC_OscConfig+0x2d8>
 8001e1e:	e6aa      	b.n	8001b76 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e20:	69eb      	ldr	r3, [r5, #28]
 8001e22:	4a18      	ldr	r2, [pc, #96]	; (8001e84 <HAL_RCC_OscConfig+0x33c>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	61eb      	str	r3, [r5, #28]
 8001e28:	e6a5      	b.n	8001b76 <HAL_RCC_OscConfig+0x2e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e2a:	f7fe fc29 	bl	8000680 <HAL_GetTick>
 8001e2e:	1bc0      	subs	r0, r0, r7
 8001e30:	2802      	cmp	r0, #2
 8001e32:	d800      	bhi.n	8001e36 <HAL_RCC_OscConfig+0x2ee>
 8001e34:	e6b2      	b.n	8001b9c <HAL_RCC_OscConfig+0x54>
 8001e36:	e6f4      	b.n	8001c22 <HAL_RCC_OscConfig+0xda>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e38:	3205      	adds	r2, #5
 8001e3a:	d103      	bne.n	8001e44 <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e3c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001e3e:	439a      	bics	r2, r3
 8001e40:	636a      	str	r2, [r5, #52]	; 0x34
 8001e42:	e6af      	b.n	8001ba4 <HAL_RCC_OscConfig+0x5c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e44:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e46:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e48:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001e4a:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e4c:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001e4e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001e50:	4393      	bics	r3, r2
 8001e52:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001e54:	f7fe fc14 	bl	8000680 <HAL_GetTick>
 8001e58:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e5a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001e5c:	4233      	tst	r3, r6
 8001e5e:	d100      	bne.n	8001e62 <HAL_RCC_OscConfig+0x31a>
 8001e60:	e6a7      	b.n	8001bb2 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e62:	f7fe fc0d 	bl	8000680 <HAL_GetTick>
 8001e66:	1bc0      	subs	r0, r0, r7
 8001e68:	2802      	cmp	r0, #2
 8001e6a:	d9f6      	bls.n	8001e5a <HAL_RCC_OscConfig+0x312>
 8001e6c:	e6d9      	b.n	8001c22 <HAL_RCC_OscConfig+0xda>
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	40021000 	.word	0x40021000
 8001e74:	fffeffff 	.word	0xfffeffff
 8001e78:	fffbffff 	.word	0xfffbffff
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	00001388 	.word	0x00001388
 8001e84:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001e88:	210c      	movs	r1, #12
 8001e8a:	4d53      	ldr	r5, [pc, #332]	; (8001fd8 <HAL_RCC_OscConfig+0x490>)
 8001e8c:	686a      	ldr	r2, [r5, #4]
 8001e8e:	400a      	ands	r2, r1
 8001e90:	428a      	cmp	r2, r1
 8001e92:	d009      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x360>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001e94:	686b      	ldr	r3, [r5, #4]
 8001e96:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d10e      	bne.n	8001eba <HAL_RCC_OscConfig+0x372>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001e9c:	22c0      	movs	r2, #192	; 0xc0
 8001e9e:	686b      	ldr	r3, [r5, #4]
 8001ea0:	0252      	lsls	r2, r2, #9
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d108      	bne.n	8001eba <HAL_RCC_OscConfig+0x372>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001ea8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001eaa:	03db      	lsls	r3, r3, #15
 8001eac:	d400      	bmi.n	8001eb0 <HAL_RCC_OscConfig+0x368>
 8001eae:	e684      	b.n	8001bba <HAL_RCC_OscConfig+0x72>
 8001eb0:	6a23      	ldr	r3, [r4, #32]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d000      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x370>
 8001eb6:	e64c      	b.n	8001b52 <HAL_RCC_OscConfig+0xa>
 8001eb8:	e67f      	b.n	8001bba <HAL_RCC_OscConfig+0x72>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001eba:	6a23      	ldr	r3, [r4, #32]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d011      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_HSI48_ENABLE();
 8001ec0:	2680      	movs	r6, #128	; 0x80
 8001ec2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001ec4:	0276      	lsls	r6, r6, #9
 8001ec6:	4333      	orrs	r3, r6
 8001ec8:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8001eca:	f7fe fbd9 	bl	8000680 <HAL_GetTick>
 8001ece:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ed0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001ed2:	4233      	tst	r3, r6
 8001ed4:	d000      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x390>
 8001ed6:	e670      	b.n	8001bba <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ed8:	f7fe fbd2 	bl	8000680 <HAL_GetTick>
 8001edc:	1bc0      	subs	r0, r0, r7
 8001ede:	2802      	cmp	r0, #2
 8001ee0:	d9f6      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x388>
 8001ee2:	e69e      	b.n	8001c22 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI48_DISABLE();
 8001ee4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001ee6:	4a3d      	ldr	r2, [pc, #244]	; (8001fdc <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ee8:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8001eea:	4013      	ands	r3, r2
 8001eec:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8001eee:	f7fe fbc7 	bl	8000680 <HAL_GetTick>
 8001ef2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ef4:	0276      	lsls	r6, r6, #9
 8001ef6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001ef8:	4233      	tst	r3, r6
 8001efa:	d100      	bne.n	8001efe <HAL_RCC_OscConfig+0x3b6>
 8001efc:	e65d      	b.n	8001bba <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001efe:	f7fe fbbf 	bl	8000680 <HAL_GetTick>
 8001f02:	1bc0      	subs	r0, r0, r7
 8001f04:	2802      	cmp	r0, #2
 8001f06:	d9f6      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x3ae>
 8001f08:	e68b      	b.n	8001c22 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f0a:	200c      	movs	r0, #12
 8001f0c:	4b32      	ldr	r3, [pc, #200]	; (8001fd8 <HAL_RCC_OscConfig+0x490>)
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	001d      	movs	r5, r3
 8001f12:	4001      	ands	r1, r0
 8001f14:	2908      	cmp	r1, #8
 8001f16:	d044      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x45a>
        __HAL_RCC_PLL_DISABLE();
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4931      	ldr	r1, [pc, #196]	; (8001fe0 <HAL_RCC_OscConfig+0x498>)
 8001f1c:	400b      	ands	r3, r1
 8001f1e:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f20:	2a02      	cmp	r2, #2
 8001f22:	d12f      	bne.n	8001f84 <HAL_RCC_OscConfig+0x43c>
        tickstart = HAL_GetTick();
 8001f24:	f7fe fbac 	bl	8000680 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f28:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001f2a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2c:	04b6      	lsls	r6, r6, #18
 8001f2e:	682b      	ldr	r3, [r5, #0]
 8001f30:	4233      	tst	r3, r6
 8001f32:	d121      	bne.n	8001f78 <HAL_RCC_OscConfig+0x430>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f34:	220f      	movs	r2, #15
 8001f36:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001f38:	4393      	bics	r3, r2
 8001f3a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001f40:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001f42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f44:	686a      	ldr	r2, [r5, #4]
 8001f46:	430b      	orrs	r3, r1
 8001f48:	4926      	ldr	r1, [pc, #152]	; (8001fe4 <HAL_RCC_OscConfig+0x49c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f4a:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f4c:	400a      	ands	r2, r1
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	682a      	ldr	r2, [r5, #0]
 8001f56:	045b      	lsls	r3, r3, #17
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001f5c:	f7fe fb90 	bl	8000680 <HAL_GetTick>
 8001f60:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f62:	04a4      	lsls	r4, r4, #18
 8001f64:	682b      	ldr	r3, [r5, #0]
 8001f66:	4223      	tst	r3, r4
 8001f68:	d000      	beq.n	8001f6c <HAL_RCC_OscConfig+0x424>
 8001f6a:	e62a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6c:	f7fe fb88 	bl	8000680 <HAL_GetTick>
 8001f70:	1b80      	subs	r0, r0, r6
 8001f72:	2802      	cmp	r0, #2
 8001f74:	d9f6      	bls.n	8001f64 <HAL_RCC_OscConfig+0x41c>
 8001f76:	e654      	b.n	8001c22 <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f78:	f7fe fb82 	bl	8000680 <HAL_GetTick>
 8001f7c:	1bc0      	subs	r0, r0, r7
 8001f7e:	2802      	cmp	r0, #2
 8001f80:	d9d5      	bls.n	8001f2e <HAL_RCC_OscConfig+0x3e6>
 8001f82:	e64e      	b.n	8001c22 <HAL_RCC_OscConfig+0xda>
        tickstart = HAL_GetTick();
 8001f84:	f7fe fb7c 	bl	8000680 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f88:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 8001f8a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8c:	04a4      	lsls	r4, r4, #18
 8001f8e:	682b      	ldr	r3, [r5, #0]
 8001f90:	4223      	tst	r3, r4
 8001f92:	d100      	bne.n	8001f96 <HAL_RCC_OscConfig+0x44e>
 8001f94:	e615      	b.n	8001bc2 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f96:	f7fe fb73 	bl	8000680 <HAL_GetTick>
 8001f9a:	1b80      	subs	r0, r0, r6
 8001f9c:	2802      	cmp	r0, #2
 8001f9e:	d9f6      	bls.n	8001f8e <HAL_RCC_OscConfig+0x446>
 8001fa0:	e63f      	b.n	8001c22 <HAL_RCC_OscConfig+0xda>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa2:	2a01      	cmp	r2, #1
 8001fa4:	d100      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x460>
 8001fa6:	e5d4      	b.n	8001b52 <HAL_RCC_OscConfig+0xa>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa8:	22c0      	movs	r2, #192	; 0xc0
        pll_config  = RCC->CFGR;
 8001faa:	6858      	ldr	r0, [r3, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001fae:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8001fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb2:	4002      	ands	r2, r0
 8001fb4:	428a      	cmp	r2, r1
 8001fb6:	d000      	beq.n	8001fba <HAL_RCC_OscConfig+0x472>
 8001fb8:	e5cb      	b.n	8001b52 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fba:	220f      	movs	r2, #15
 8001fbc:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d000      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x47e>
 8001fc4:	e5c5      	b.n	8001b52 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001fc6:	23f0      	movs	r3, #240	; 0xf0
 8001fc8:	039b      	lsls	r3, r3, #14
 8001fca:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fcc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001fce:	1ac0      	subs	r0, r0, r3
 8001fd0:	1e43      	subs	r3, r0, #1
 8001fd2:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8001fd4:	b2c0      	uxtb	r0, r0
 8001fd6:	e5bd      	b.n	8001b54 <HAL_RCC_OscConfig+0xc>
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	fffeffff 	.word	0xfffeffff
 8001fe0:	feffffff 	.word	0xfeffffff
 8001fe4:	ffc27fff 	.word	0xffc27fff

08001fe8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001fea:	4c1b      	ldr	r4, [pc, #108]	; (8002058 <HAL_RCC_GetSysClockFreq+0x70>)
{
 8001fec:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001fee:	2210      	movs	r2, #16
 8001ff0:	0021      	movs	r1, r4
 8001ff2:	4668      	mov	r0, sp
 8001ff4:	f001 fe9a 	bl	8003d2c <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001ff8:	0021      	movs	r1, r4
 8001ffa:	ad04      	add	r5, sp, #16
 8001ffc:	2210      	movs	r2, #16
 8001ffe:	3110      	adds	r1, #16
 8002000:	0028      	movs	r0, r5
 8002002:	f001 fe93 	bl	8003d2c <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002006:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8002008:	4a14      	ldr	r2, [pc, #80]	; (800205c <HAL_RCC_GetSysClockFreq+0x74>)
 800200a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800200c:	4018      	ands	r0, r3
 800200e:	2808      	cmp	r0, #8
 8002010:	d009      	beq.n	8002026 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002012:	380c      	subs	r0, #12
 8002014:	4243      	negs	r3, r0
 8002016:	4158      	adcs	r0, r3
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <HAL_RCC_GetSysClockFreq+0x78>)
 800201a:	4240      	negs	r0, r0
 800201c:	4018      	ands	r0, r3
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002020:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002022:	b009      	add	sp, #36	; 0x24
 8002024:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002026:	200f      	movs	r0, #15
 8002028:	466c      	mov	r4, sp
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800202a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800202c:	0c99      	lsrs	r1, r3, #18
 800202e:	4001      	ands	r1, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002030:	4002      	ands	r2, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002032:	5c64      	ldrb	r4, [r4, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002034:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002036:	22c0      	movs	r2, #192	; 0xc0
 8002038:	2080      	movs	r0, #128	; 0x80
 800203a:	0252      	lsls	r2, r2, #9
 800203c:	4013      	ands	r3, r2
 800203e:	0240      	lsls	r0, r0, #9
 8002040:	4283      	cmp	r3, r0
 8002042:	d101      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0x60>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002044:	4807      	ldr	r0, [pc, #28]	; (8002064 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002046:	e002      	b.n	800204e <HAL_RCC_GetSysClockFreq+0x66>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002048:	4293      	cmp	r3, r2
 800204a:	d1fb      	bne.n	8002044 <HAL_RCC_GetSysClockFreq+0x5c>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800204c:	4806      	ldr	r0, [pc, #24]	; (8002068 <HAL_RCC_GetSysClockFreq+0x80>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800204e:	f7fe f86f 	bl	8000130 <__udivsi3>
 8002052:	4360      	muls	r0, r4
 8002054:	e7e5      	b.n	8002022 <HAL_RCC_GetSysClockFreq+0x3a>
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	08003d68 	.word	0x08003d68
 800205c:	40021000 	.word	0x40021000
 8002060:	02625a00 	.word	0x02625a00
 8002064:	007a1200 	.word	0x007a1200
 8002068:	02dc6c00 	.word	0x02dc6c00

0800206c <HAL_RCC_ClockConfig>:
{
 800206c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800206e:	0005      	movs	r5, r0
 8002070:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8002072:	2800      	cmp	r0, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8002076:	2001      	movs	r0, #1
}
 8002078:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800207a:	2201      	movs	r2, #1
 800207c:	4c3b      	ldr	r4, [pc, #236]	; (800216c <HAL_RCC_ClockConfig+0x100>)
 800207e:	6823      	ldr	r3, [r4, #0]
 8002080:	4013      	ands	r3, r2
 8002082:	428b      	cmp	r3, r1
 8002084:	d31c      	bcc.n	80020c0 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002086:	6829      	ldr	r1, [r5, #0]
 8002088:	078b      	lsls	r3, r1, #30
 800208a:	d422      	bmi.n	80020d2 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800208c:	07cb      	lsls	r3, r1, #31
 800208e:	d42f      	bmi.n	80020f0 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002090:	2301      	movs	r3, #1
 8002092:	6822      	ldr	r2, [r4, #0]
 8002094:	401a      	ands	r2, r3
 8002096:	42ba      	cmp	r2, r7
 8002098:	d859      	bhi.n	800214e <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800209a:	682b      	ldr	r3, [r5, #0]
 800209c:	4c34      	ldr	r4, [pc, #208]	; (8002170 <HAL_RCC_ClockConfig+0x104>)
 800209e:	075b      	lsls	r3, r3, #29
 80020a0:	d45c      	bmi.n	800215c <HAL_RCC_ClockConfig+0xf0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020a2:	f7ff ffa1 	bl	8001fe8 <HAL_RCC_GetSysClockFreq>
 80020a6:	6863      	ldr	r3, [r4, #4]
 80020a8:	4a32      	ldr	r2, [pc, #200]	; (8002174 <HAL_RCC_ClockConfig+0x108>)
 80020aa:	061b      	lsls	r3, r3, #24
 80020ac:	0f1b      	lsrs	r3, r3, #28
 80020ae:	5cd3      	ldrb	r3, [r2, r3]
 80020b0:	40d8      	lsrs	r0, r3
 80020b2:	4b31      	ldr	r3, [pc, #196]	; (8002178 <HAL_RCC_ClockConfig+0x10c>)
 80020b4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80020b6:	2000      	movs	r0, #0
 80020b8:	f7fe faa2 	bl	8000600 <HAL_InitTick>
  return HAL_OK;
 80020bc:	2000      	movs	r0, #0
 80020be:	e7db      	b.n	8002078 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c0:	6823      	ldr	r3, [r4, #0]
 80020c2:	4393      	bics	r3, r2
 80020c4:	430b      	orrs	r3, r1
 80020c6:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c8:	6823      	ldr	r3, [r4, #0]
 80020ca:	4013      	ands	r3, r2
 80020cc:	428b      	cmp	r3, r1
 80020ce:	d1d2      	bne.n	8002076 <HAL_RCC_ClockConfig+0xa>
 80020d0:	e7d9      	b.n	8002086 <HAL_RCC_ClockConfig+0x1a>
 80020d2:	4a27      	ldr	r2, [pc, #156]	; (8002170 <HAL_RCC_ClockConfig+0x104>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d4:	074b      	lsls	r3, r1, #29
 80020d6:	d504      	bpl.n	80020e2 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020d8:	23e0      	movs	r3, #224	; 0xe0
 80020da:	6850      	ldr	r0, [r2, #4]
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4303      	orrs	r3, r0
 80020e0:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e2:	20f0      	movs	r0, #240	; 0xf0
 80020e4:	6853      	ldr	r3, [r2, #4]
 80020e6:	4383      	bics	r3, r0
 80020e8:	68a8      	ldr	r0, [r5, #8]
 80020ea:	4303      	orrs	r3, r0
 80020ec:	6053      	str	r3, [r2, #4]
 80020ee:	e7cd      	b.n	800208c <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f0:	686a      	ldr	r2, [r5, #4]
 80020f2:	4e1f      	ldr	r6, [pc, #124]	; (8002170 <HAL_RCC_ClockConfig+0x104>)
 80020f4:	2a01      	cmp	r2, #1
 80020f6:	d11a      	bne.n	800212e <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f8:	6833      	ldr	r3, [r6, #0]
 80020fa:	039b      	lsls	r3, r3, #14
 80020fc:	d5bb      	bpl.n	8002076 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020fe:	2103      	movs	r1, #3
 8002100:	6873      	ldr	r3, [r6, #4]
 8002102:	438b      	bics	r3, r1
 8002104:	4313      	orrs	r3, r2
 8002106:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002108:	f7fe faba 	bl	8000680 <HAL_GetTick>
 800210c:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	230c      	movs	r3, #12
 8002110:	6872      	ldr	r2, [r6, #4]
 8002112:	401a      	ands	r2, r3
 8002114:	686b      	ldr	r3, [r5, #4]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	429a      	cmp	r2, r3
 800211a:	d0b9      	beq.n	8002090 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800211c:	f7fe fab0 	bl	8000680 <HAL_GetTick>
 8002120:	9b01      	ldr	r3, [sp, #4]
 8002122:	1ac0      	subs	r0, r0, r3
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <HAL_RCC_ClockConfig+0x110>)
 8002126:	4298      	cmp	r0, r3
 8002128:	d9f1      	bls.n	800210e <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 800212a:	2003      	movs	r0, #3
 800212c:	e7a4      	b.n	8002078 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800212e:	2a02      	cmp	r2, #2
 8002130:	d103      	bne.n	800213a <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002132:	6833      	ldr	r3, [r6, #0]
 8002134:	019b      	lsls	r3, r3, #6
 8002136:	d4e2      	bmi.n	80020fe <HAL_RCC_ClockConfig+0x92>
 8002138:	e79d      	b.n	8002076 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800213a:	2a03      	cmp	r2, #3
 800213c:	d103      	bne.n	8002146 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800213e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8002140:	03db      	lsls	r3, r3, #15
 8002142:	d4dc      	bmi.n	80020fe <HAL_RCC_ClockConfig+0x92>
 8002144:	e797      	b.n	8002076 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002146:	6833      	ldr	r3, [r6, #0]
 8002148:	079b      	lsls	r3, r3, #30
 800214a:	d4d8      	bmi.n	80020fe <HAL_RCC_ClockConfig+0x92>
 800214c:	e793      	b.n	8002076 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214e:	6822      	ldr	r2, [r4, #0]
 8002150:	439a      	bics	r2, r3
 8002152:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002154:	6822      	ldr	r2, [r4, #0]
 8002156:	421a      	tst	r2, r3
 8002158:	d09f      	beq.n	800209a <HAL_RCC_ClockConfig+0x2e>
 800215a:	e78c      	b.n	8002076 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800215c:	6863      	ldr	r3, [r4, #4]
 800215e:	4a08      	ldr	r2, [pc, #32]	; (8002180 <HAL_RCC_ClockConfig+0x114>)
 8002160:	4013      	ands	r3, r2
 8002162:	68ea      	ldr	r2, [r5, #12]
 8002164:	4313      	orrs	r3, r2
 8002166:	6063      	str	r3, [r4, #4]
 8002168:	e79b      	b.n	80020a2 <HAL_RCC_ClockConfig+0x36>
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	40022000 	.word	0x40022000
 8002170:	40021000 	.word	0x40021000
 8002174:	08003d88 	.word	0x08003d88
 8002178:	20000008 	.word	0x20000008
 800217c:	00001388 	.word	0x00001388
 8002180:	fffff8ff 	.word	0xfffff8ff

08002184 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002184:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002186:	6803      	ldr	r3, [r0, #0]
{
 8002188:	b085      	sub	sp, #20
 800218a:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800218c:	03db      	lsls	r3, r3, #15
 800218e:	d528      	bpl.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002190:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002192:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002194:	4c40      	ldr	r4, [pc, #256]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002196:	0552      	lsls	r2, r2, #21
 8002198:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800219a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800219c:	4213      	tst	r3, r2
 800219e:	d108      	bne.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021a0:	69e3      	ldr	r3, [r4, #28]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61e3      	str	r3, [r4, #28]
 80021a6:	69e3      	ldr	r3, [r4, #28]
 80021a8:	4013      	ands	r3, r2
 80021aa:	9303      	str	r3, [sp, #12]
 80021ac:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80021ae:	2301      	movs	r3, #1
 80021b0:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b2:	2780      	movs	r7, #128	; 0x80
 80021b4:	4e39      	ldr	r6, [pc, #228]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80021b6:	007f      	lsls	r7, r7, #1
 80021b8:	6833      	ldr	r3, [r6, #0]
 80021ba:	423b      	tst	r3, r7
 80021bc:	d038      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xac>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021be:	22c0      	movs	r2, #192	; 0xc0
 80021c0:	6a23      	ldr	r3, [r4, #32]
 80021c2:	0092      	lsls	r2, r2, #2
 80021c4:	4013      	ands	r3, r2
 80021c6:	4e36      	ldr	r6, [pc, #216]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021c8:	d144      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ca:	6a23      	ldr	r3, [r4, #32]
 80021cc:	401e      	ands	r6, r3
 80021ce:	686b      	ldr	r3, [r5, #4]
 80021d0:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021d2:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021d4:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d103      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021da:	69e3      	ldr	r3, [r4, #28]
 80021dc:	4a31      	ldr	r2, [pc, #196]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80021de:	4013      	ands	r3, r2
 80021e0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021e2:	682a      	ldr	r2, [r5, #0]
 80021e4:	07d3      	lsls	r3, r2, #31
 80021e6:	d506      	bpl.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021e8:	2003      	movs	r0, #3
 80021ea:	492b      	ldr	r1, [pc, #172]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80021ec:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80021ee:	4383      	bics	r3, r0
 80021f0:	68a8      	ldr	r0, [r5, #8]
 80021f2:	4303      	orrs	r3, r0
 80021f4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021f6:	0693      	lsls	r3, r2, #26
 80021f8:	d506      	bpl.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021fa:	2010      	movs	r0, #16
 80021fc:	4926      	ldr	r1, [pc, #152]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80021fe:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002200:	4383      	bics	r3, r0
 8002202:	68e8      	ldr	r0, [r5, #12]
 8002204:	4303      	orrs	r3, r0
 8002206:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002208:	0393      	lsls	r3, r2, #14
 800220a:	d506      	bpl.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800220c:	2080      	movs	r0, #128	; 0x80
 800220e:	4922      	ldr	r1, [pc, #136]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002210:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002212:	4383      	bics	r3, r0
 8002214:	6968      	ldr	r0, [r5, #20]
 8002216:	4303      	orrs	r3, r0
 8002218:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800221a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800221c:	0553      	lsls	r3, r2, #21
 800221e:	d517      	bpl.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002220:	2140      	movs	r1, #64	; 0x40
 8002222:	4a1d      	ldr	r2, [pc, #116]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002224:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002226:	438b      	bics	r3, r1
 8002228:	6929      	ldr	r1, [r5, #16]
 800222a:	430b      	orrs	r3, r1
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	e00f      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002230:	6833      	ldr	r3, [r6, #0]
 8002232:	433b      	orrs	r3, r7
 8002234:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002236:	f7fe fa23 	bl	8000680 <HAL_GetTick>
 800223a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223c:	6833      	ldr	r3, [r6, #0]
 800223e:	423b      	tst	r3, r7
 8002240:	d1bd      	bne.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002242:	f7fe fa1d 	bl	8000680 <HAL_GetTick>
 8002246:	9b01      	ldr	r3, [sp, #4]
 8002248:	1ac0      	subs	r0, r0, r3
 800224a:	2864      	cmp	r0, #100	; 0x64
 800224c:	d9f6      	bls.n	800223c <HAL_RCCEx_PeriphCLKConfig+0xb8>
          return HAL_TIMEOUT;
 800224e:	2003      	movs	r0, #3
}
 8002250:	b005      	add	sp, #20
 8002252:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002254:	6869      	ldr	r1, [r5, #4]
 8002256:	400a      	ands	r2, r1
 8002258:	429a      	cmp	r2, r3
 800225a:	d0b6      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 800225c:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800225e:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002260:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002262:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8002264:	025b      	lsls	r3, r3, #9
 8002266:	4303      	orrs	r3, r0
 8002268:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800226a:	6a23      	ldr	r3, [r4, #32]
 800226c:	480e      	ldr	r0, [pc, #56]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800226e:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002270:	4003      	ands	r3, r0
 8002272:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8002274:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002276:	07d3      	lsls	r3, r2, #31
 8002278:	d5a7      	bpl.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 800227a:	f7fe fa01 	bl	8000680 <HAL_GetTick>
 800227e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002280:	2202      	movs	r2, #2
 8002282:	6a23      	ldr	r3, [r4, #32]
 8002284:	4213      	tst	r3, r2
 8002286:	d1a0      	bne.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002288:	f7fe f9fa 	bl	8000680 <HAL_GetTick>
 800228c:	4b07      	ldr	r3, [pc, #28]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x128>)
 800228e:	1bc0      	subs	r0, r0, r7
 8002290:	4298      	cmp	r0, r3
 8002292:	d9f5      	bls.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002294:	e7db      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0xca>
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	40021000 	.word	0x40021000
 800229c:	40007000 	.word	0x40007000
 80022a0:	fffffcff 	.word	0xfffffcff
 80022a4:	efffffff 	.word	0xefffffff
 80022a8:	fffeffff 	.word	0xfffeffff
 80022ac:	00001388 	.word	0x00001388

080022b0 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80022b0:	2200      	movs	r2, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80022b2:	4903      	ldr	r1, [pc, #12]	; (80022c0 <USB_EnableGlobalInt+0x10>)
  USBx->ISTR = 0U;
 80022b4:	1d83      	adds	r3, r0, #6
  USBx->CNTR = (uint16_t)winterruptmask;
 80022b6:	3002      	adds	r0, #2
  USBx->ISTR = 0U;
 80022b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  USBx->CNTR = (uint16_t)winterruptmask;
 80022ba:	87c1      	strh	r1, [r0, #62]	; 0x3e

  return HAL_OK;
}
 80022bc:	0010      	movs	r0, r2
 80022be:	4770      	bx	lr
 80022c0:	ffffbf80 	.word	0xffffbf80

080022c4 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80022c4:	3002      	adds	r0, #2
 80022c6:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80022c8:	4a02      	ldr	r2, [pc, #8]	; (80022d4 <USB_DisableGlobalInt+0x10>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	87c3      	strh	r3, [r0, #62]	; 0x3e

  return HAL_OK;
}
 80022ce:	2000      	movs	r0, #0
 80022d0:	4770      	bx	lr
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	0000407f 	.word	0x0000407f

080022d8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80022d8:	b084      	sub	sp, #16
 80022da:	9202      	str	r2, [sp, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80022dc:	2201      	movs	r2, #1
{
 80022de:	9303      	str	r3, [sp, #12]
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80022e0:	1c83      	adds	r3, r0, #2
 80022e2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80022e4:	2200      	movs	r2, #0
 80022e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80022e8:	1d83      	adds	r3, r0, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80022ea:	3050      	adds	r0, #80	; 0x50
  USBx->ISTR = 0U;
 80022ec:	87da      	strh	r2, [r3, #62]	; 0x3e
{
 80022ee:	9101      	str	r1, [sp, #4]
  USBx->BTABLE = BTABLE_ADDRESS;
 80022f0:	8002      	strh	r2, [r0, #0]

  return HAL_OK;
}
 80022f2:	0010      	movs	r0, r2
 80022f4:	b004      	add	sp, #16
 80022f6:	4770      	bx	lr

080022f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80022f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80022fa:	780d      	ldrb	r5, [r1, #0]
 80022fc:	4a89      	ldr	r2, [pc, #548]	; (8002524 <USB_ActivateEndpoint+0x22c>)
 80022fe:	00ad      	lsls	r5, r5, #2
 8002300:	1945      	adds	r5, r0, r5
 8002302:	882c      	ldrh	r4, [r5, #0]
{
 8002304:	0003      	movs	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002306:	4014      	ands	r4, r2
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8002308:	2201      	movs	r2, #1
  switch (ep->type)
 800230a:	78c8      	ldrb	r0, [r1, #3]
      ret = HAL_ERROR;
 800230c:	4694      	mov	ip, r2
  switch (ep->type)
 800230e:	2803      	cmp	r0, #3
 8002310:	d808      	bhi.n	8002324 <USB_ActivateEndpoint+0x2c>
 8002312:	f7fd fef9 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002316:	4702      	.short	0x4702
 8002318:	4405      	.short	0x4405
      wEpRegVal |= USB_EP_CONTROL;
 800231a:	2280      	movs	r2, #128	; 0x80
 800231c:	0092      	lsls	r2, r2, #2
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800231e:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 8002320:	2200      	movs	r2, #0
 8002322:	4694      	mov	ip, r2
 8002324:	001e      	movs	r6, r3
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002326:	4a80      	ldr	r2, [pc, #512]	; (8002528 <USB_ActivateEndpoint+0x230>)

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002328:	4f80      	ldr	r7, [pc, #512]	; (800252c <USB_ActivateEndpoint+0x234>)
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800232a:	4314      	orrs	r4, r2
 800232c:	b2a4      	uxth	r4, r4
 800232e:	802c      	strh	r4, [r5, #0]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002330:	780d      	ldrb	r5, [r1, #0]
 8002332:	3650      	adds	r6, #80	; 0x50
 8002334:	00ac      	lsls	r4, r5, #2
 8002336:	191c      	adds	r4, r3, r4
 8002338:	8820      	ldrh	r0, [r4, #0]
 800233a:	4038      	ands	r0, r7
 800233c:	4328      	orrs	r0, r5
 800233e:	4310      	orrs	r0, r2
 8002340:	b280      	uxth	r0, r0
 8002342:	8020      	strh	r0, [r4, #0]

  if (ep->doublebuffer == 0U)
 8002344:	7b0d      	ldrb	r5, [r1, #12]
 8002346:	7808      	ldrb	r0, [r1, #0]
 8002348:	003c      	movs	r4, r7
 800234a:	2d00      	cmp	r5, #0
 800234c:	d171      	bne.n	8002432 <USB_ActivateEndpoint+0x13a>
 800234e:	00c0      	lsls	r0, r0, #3
 8002350:	18c0      	adds	r0, r0, r3
 8002352:	88cd      	ldrh	r5, [r1, #6]
 8002354:	9001      	str	r0, [sp, #4]
  {
    if (ep->is_in != 0U)
 8002356:	7848      	ldrb	r0, [r1, #1]
 8002358:	086d      	lsrs	r5, r5, #1
 800235a:	006d      	lsls	r5, r5, #1
 800235c:	2800      	cmp	r0, #0
 800235e:	d026      	beq.n	80023ae <USB_ActivateEndpoint+0xb6>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002360:	8834      	ldrh	r4, [r6, #0]
 8002362:	9801      	ldr	r0, [sp, #4]
 8002364:	1820      	adds	r0, r4, r0
 8002366:	2480      	movs	r4, #128	; 0x80
 8002368:	00e4      	lsls	r4, r4, #3
 800236a:	1900      	adds	r0, r0, r4
 800236c:	8005      	strh	r5, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800236e:	7808      	ldrb	r0, [r1, #0]
 8002370:	0080      	lsls	r0, r0, #2
 8002372:	1818      	adds	r0, r3, r0
 8002374:	8804      	ldrh	r4, [r0, #0]
 8002376:	0664      	lsls	r4, r4, #25
 8002378:	d504      	bpl.n	8002384 <USB_ActivateEndpoint+0x8c>
 800237a:	8804      	ldrh	r4, [r0, #0]
 800237c:	4027      	ands	r7, r4
 800237e:	4c6c      	ldr	r4, [pc, #432]	; (8002530 <USB_ActivateEndpoint+0x238>)
 8002380:	4327      	orrs	r7, r4
 8002382:	8007      	strh	r7, [r0, #0]
 8002384:	7808      	ldrb	r0, [r1, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002386:	78c9      	ldrb	r1, [r1, #3]
 8002388:	0080      	lsls	r0, r0, #2
 800238a:	181b      	adds	r3, r3, r0
 800238c:	4869      	ldr	r0, [pc, #420]	; (8002534 <USB_ActivateEndpoint+0x23c>)
 800238e:	2901      	cmp	r1, #1
 8002390:	d00a      	beq.n	80023a8 <USB_ActivateEndpoint+0xb0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002392:	8819      	ldrh	r1, [r3, #0]
 8002394:	4008      	ands	r0, r1
 8002396:	2120      	movs	r1, #32
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002398:	4041      	eors	r1, r0
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800239a:	430a      	orrs	r2, r1
 800239c:	e095      	b.n	80024ca <USB_ActivateEndpoint+0x1d2>
      wEpRegVal |= USB_EP_INTERRUPT;
 800239e:	22c0      	movs	r2, #192	; 0xc0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80023a0:	00d2      	lsls	r2, r2, #3
 80023a2:	e7bc      	b.n	800231e <USB_ActivateEndpoint+0x26>
 80023a4:	2280      	movs	r2, #128	; 0x80
 80023a6:	e7fb      	b.n	80023a0 <USB_ActivateEndpoint+0xa8>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80023a8:	8819      	ldrh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80023aa:	4001      	ands	r1, r0
 80023ac:	e7f5      	b.n	800239a <USB_ActivateEndpoint+0xa2>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80023ae:	8837      	ldrh	r7, [r6, #0]
 80023b0:	9801      	ldr	r0, [sp, #4]
 80023b2:	1838      	adds	r0, r7, r0
 80023b4:	4f60      	ldr	r7, [pc, #384]	; (8002538 <USB_ActivateEndpoint+0x240>)
 80023b6:	19c0      	adds	r0, r0, r7
 80023b8:	8005      	strh	r5, [r0, #0]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80023ba:	7808      	ldrb	r0, [r1, #0]
 80023bc:	8835      	ldrh	r5, [r6, #0]
 80023be:	00c0      	lsls	r0, r0, #3
 80023c0:	4e5e      	ldr	r6, [pc, #376]	; (800253c <USB_ActivateEndpoint+0x244>)
 80023c2:	18c0      	adds	r0, r0, r3
 80023c4:	1980      	adds	r0, r0, r6
 80023c6:	1940      	adds	r0, r0, r5
 80023c8:	690d      	ldr	r5, [r1, #16]
 80023ca:	2d00      	cmp	r5, #0
 80023cc:	d11c      	bne.n	8002408 <USB_ActivateEndpoint+0x110>
 80023ce:	8805      	ldrh	r5, [r0, #0]
 80023d0:	4e5b      	ldr	r6, [pc, #364]	; (8002540 <USB_ActivateEndpoint+0x248>)
 80023d2:	4035      	ands	r5, r6
 80023d4:	2680      	movs	r6, #128	; 0x80
 80023d6:	8005      	strh	r5, [r0, #0]
 80023d8:	8805      	ldrh	r5, [r0, #0]
 80023da:	0236      	lsls	r6, r6, #8
 80023dc:	4335      	orrs	r5, r6
 80023de:	8005      	strh	r5, [r0, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80023e0:	7808      	ldrb	r0, [r1, #0]
 80023e2:	0080      	lsls	r0, r0, #2
 80023e4:	1818      	adds	r0, r3, r0
 80023e6:	8805      	ldrh	r5, [r0, #0]
 80023e8:	046d      	lsls	r5, r5, #17
 80023ea:	d504      	bpl.n	80023f6 <USB_ActivateEndpoint+0xfe>
 80023ec:	8805      	ldrh	r5, [r0, #0]
 80023ee:	402c      	ands	r4, r5
 80023f0:	4d54      	ldr	r5, [pc, #336]	; (8002544 <USB_ActivateEndpoint+0x24c>)
 80023f2:	432c      	orrs	r4, r5
 80023f4:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80023f6:	7809      	ldrb	r1, [r1, #0]
 80023f8:	4853      	ldr	r0, [pc, #332]	; (8002548 <USB_ActivateEndpoint+0x250>)
 80023fa:	0089      	lsls	r1, r1, #2
 80023fc:	185b      	adds	r3, r3, r1
 80023fe:	8819      	ldrh	r1, [r3, #0]
 8002400:	4008      	ands	r0, r1
 8002402:	21c0      	movs	r1, #192	; 0xc0
 8002404:	0189      	lsls	r1, r1, #6
 8002406:	e7c7      	b.n	8002398 <USB_ActivateEndpoint+0xa0>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002408:	2d3e      	cmp	r5, #62	; 0x3e
 800240a:	d806      	bhi.n	800241a <USB_ActivateEndpoint+0x122>
 800240c:	2701      	movs	r7, #1
 800240e:	086e      	lsrs	r6, r5, #1
 8002410:	403d      	ands	r5, r7
 8002412:	1976      	adds	r6, r6, r5
 8002414:	02b6      	lsls	r6, r6, #10
 8002416:	b2b5      	uxth	r5, r6
 8002418:	e7e1      	b.n	80023de <USB_ActivateEndpoint+0xe6>
 800241a:	271f      	movs	r7, #31
 800241c:	096e      	lsrs	r6, r5, #5
 800241e:	403d      	ands	r5, r7
 8002420:	426f      	negs	r7, r5
 8002422:	417d      	adcs	r5, r7
 8002424:	1b76      	subs	r6, r6, r5
 8002426:	02b5      	lsls	r5, r6, #10
 8002428:	4e48      	ldr	r6, [pc, #288]	; (800254c <USB_ActivateEndpoint+0x254>)
 800242a:	432e      	orrs	r6, r5
 800242c:	b2b6      	uxth	r6, r6
 800242e:	8006      	strh	r6, [r0, #0]
 8002430:	e7d6      	b.n	80023e0 <USB_ActivateEndpoint+0xe8>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002432:	0080      	lsls	r0, r0, #2
 8002434:	1818      	adds	r0, r3, r0
 8002436:	8805      	ldrh	r5, [r0, #0]
 8002438:	403d      	ands	r5, r7
 800243a:	4f45      	ldr	r7, [pc, #276]	; (8002550 <USB_ActivateEndpoint+0x258>)
 800243c:	433d      	orrs	r5, r7
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800243e:	2780      	movs	r7, #128	; 0x80
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002440:	8005      	strh	r5, [r0, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002442:	7808      	ldrb	r0, [r1, #0]
 8002444:	8835      	ldrh	r5, [r6, #0]
 8002446:	00c0      	lsls	r0, r0, #3
 8002448:	00ff      	lsls	r7, r7, #3
 800244a:	18c0      	adds	r0, r0, r3
 800244c:	19c0      	adds	r0, r0, r7
 800244e:	1940      	adds	r0, r0, r5
 8002450:	890d      	ldrh	r5, [r1, #8]
 8002452:	086d      	lsrs	r5, r5, #1
 8002454:	006d      	lsls	r5, r5, #1
 8002456:	8005      	strh	r5, [r0, #0]
 8002458:	7808      	ldrb	r0, [r1, #0]
 800245a:	8835      	ldrh	r5, [r6, #0]
 800245c:	00c0      	lsls	r0, r0, #3
 800245e:	4e36      	ldr	r6, [pc, #216]	; (8002538 <USB_ActivateEndpoint+0x240>)
 8002460:	18c0      	adds	r0, r0, r3
 8002462:	1980      	adds	r0, r0, r6
 8002464:	2680      	movs	r6, #128	; 0x80
 8002466:	1940      	adds	r0, r0, r5
 8002468:	894d      	ldrh	r5, [r1, #10]
 800246a:	01f6      	lsls	r6, r6, #7
 800246c:	086d      	lsrs	r5, r5, #1
 800246e:	006d      	lsls	r5, r5, #1
 8002470:	8005      	strh	r5, [r0, #0]
 8002472:	7808      	ldrb	r0, [r1, #0]
    if (ep->is_in == 0U)
 8002474:	784f      	ldrb	r7, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002476:	0080      	lsls	r0, r0, #2
 8002478:	4d2e      	ldr	r5, [pc, #184]	; (8002534 <USB_ActivateEndpoint+0x23c>)
 800247a:	1818      	adds	r0, r3, r0
    if (ep->is_in == 0U)
 800247c:	2f00      	cmp	r7, #0
 800247e:	d128      	bne.n	80024d2 <USB_ActivateEndpoint+0x1da>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002480:	8807      	ldrh	r7, [r0, #0]
 8002482:	4237      	tst	r7, r6
 8002484:	d004      	beq.n	8002490 <USB_ActivateEndpoint+0x198>
 8002486:	8806      	ldrh	r6, [r0, #0]
 8002488:	4f2e      	ldr	r7, [pc, #184]	; (8002544 <USB_ActivateEndpoint+0x24c>)
 800248a:	4026      	ands	r6, r4
 800248c:	433e      	orrs	r6, r7
 800248e:	8006      	strh	r6, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002490:	7808      	ldrb	r0, [r1, #0]
 8002492:	0080      	lsls	r0, r0, #2
 8002494:	1818      	adds	r0, r3, r0
 8002496:	8806      	ldrh	r6, [r0, #0]
 8002498:	0676      	lsls	r6, r6, #25
 800249a:	d504      	bpl.n	80024a6 <USB_ActivateEndpoint+0x1ae>
 800249c:	8806      	ldrh	r6, [r0, #0]
 800249e:	4034      	ands	r4, r6
 80024a0:	4e23      	ldr	r6, [pc, #140]	; (8002530 <USB_ActivateEndpoint+0x238>)
 80024a2:	4334      	orrs	r4, r6
 80024a4:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80024a6:	780c      	ldrb	r4, [r1, #0]
 80024a8:	4827      	ldr	r0, [pc, #156]	; (8002548 <USB_ActivateEndpoint+0x250>)
 80024aa:	00a4      	lsls	r4, r4, #2
 80024ac:	191c      	adds	r4, r3, r4
 80024ae:	8826      	ldrh	r6, [r4, #0]
 80024b0:	4006      	ands	r6, r0
 80024b2:	20c0      	movs	r0, #192	; 0xc0
 80024b4:	0180      	lsls	r0, r0, #6
 80024b6:	4070      	eors	r0, r6
 80024b8:	4310      	orrs	r0, r2
 80024ba:	b280      	uxth	r0, r0
 80024bc:	8020      	strh	r0, [r4, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80024be:	7809      	ldrb	r1, [r1, #0]
 80024c0:	0089      	lsls	r1, r1, #2
 80024c2:	185b      	adds	r3, r3, r1
 80024c4:	8819      	ldrh	r1, [r3, #0]
 80024c6:	400d      	ands	r5, r1
 80024c8:	432a      	orrs	r2, r5
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80024ca:	b292      	uxth	r2, r2
    }
  }

  return ret;
}
 80024cc:	4660      	mov	r0, ip
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80024ce:	801a      	strh	r2, [r3, #0]
}
 80024d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80024d2:	8807      	ldrh	r7, [r0, #0]
 80024d4:	4237      	tst	r7, r6
 80024d6:	d004      	beq.n	80024e2 <USB_ActivateEndpoint+0x1ea>
 80024d8:	8806      	ldrh	r6, [r0, #0]
 80024da:	4f1a      	ldr	r7, [pc, #104]	; (8002544 <USB_ActivateEndpoint+0x24c>)
 80024dc:	4026      	ands	r6, r4
 80024de:	433e      	orrs	r6, r7
 80024e0:	8006      	strh	r6, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80024e2:	7808      	ldrb	r0, [r1, #0]
 80024e4:	0080      	lsls	r0, r0, #2
 80024e6:	1818      	adds	r0, r3, r0
 80024e8:	8806      	ldrh	r6, [r0, #0]
 80024ea:	0676      	lsls	r6, r6, #25
 80024ec:	d504      	bpl.n	80024f8 <USB_ActivateEndpoint+0x200>
 80024ee:	8806      	ldrh	r6, [r0, #0]
 80024f0:	4034      	ands	r4, r6
 80024f2:	4e0f      	ldr	r6, [pc, #60]	; (8002530 <USB_ActivateEndpoint+0x238>)
 80024f4:	4334      	orrs	r4, r6
 80024f6:	8004      	strh	r4, [r0, #0]
 80024f8:	7808      	ldrb	r0, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 80024fa:	78cc      	ldrb	r4, [r1, #3]
 80024fc:	0080      	lsls	r0, r0, #2
 80024fe:	1818      	adds	r0, r3, r0
 8002500:	2c01      	cmp	r4, #1
 8002502:	d00c      	beq.n	800251e <USB_ActivateEndpoint+0x226>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002504:	8804      	ldrh	r4, [r0, #0]
 8002506:	402c      	ands	r4, r5
 8002508:	2520      	movs	r5, #32
 800250a:	4065      	eors	r5, r4
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800250c:	4315      	orrs	r5, r2
 800250e:	b2ad      	uxth	r5, r5
 8002510:	8005      	strh	r5, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002512:	7809      	ldrb	r1, [r1, #0]
 8002514:	480c      	ldr	r0, [pc, #48]	; (8002548 <USB_ActivateEndpoint+0x250>)
 8002516:	0089      	lsls	r1, r1, #2
 8002518:	185b      	adds	r3, r3, r1
 800251a:	8819      	ldrh	r1, [r3, #0]
 800251c:	e745      	b.n	80023aa <USB_ActivateEndpoint+0xb2>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800251e:	8804      	ldrh	r4, [r0, #0]
 8002520:	4025      	ands	r5, r4
 8002522:	e7f3      	b.n	800250c <USB_ActivateEndpoint+0x214>
 8002524:	ffff898f 	.word	0xffff898f
 8002528:	ffff8080 	.word	0xffff8080
 800252c:	ffff8f8f 	.word	0xffff8f8f
 8002530:	000080c0 	.word	0x000080c0
 8002534:	ffff8fbf 	.word	0xffff8fbf
 8002538:	00000404 	.word	0x00000404
 800253c:	00000406 	.word	0x00000406
 8002540:	ffff83ff 	.word	0xffff83ff
 8002544:	0000c080 	.word	0x0000c080
 8002548:	ffffbf8f 	.word	0xffffbf8f
 800254c:	ffff8000 	.word	0xffff8000
 8002550:	00008180 	.word	0x00008180

08002554 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002556:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8002558:	7b0d      	ldrb	r5, [r1, #12]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	784c      	ldrb	r4, [r1, #1]
 800255e:	18c3      	adds	r3, r0, r3
 8002560:	4a3f      	ldr	r2, [pc, #252]	; (8002660 <USB_DeactivateEndpoint+0x10c>)
 8002562:	2d00      	cmp	r5, #0
 8002564:	d121      	bne.n	80025aa <USB_DeactivateEndpoint+0x56>
  {
    if (ep->is_in != 0U)
 8002566:	2c00      	cmp	r4, #0
 8002568:	d010      	beq.n	800258c <USB_DeactivateEndpoint+0x38>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800256a:	881c      	ldrh	r4, [r3, #0]
 800256c:	0664      	lsls	r4, r4, #25
 800256e:	d505      	bpl.n	800257c <USB_DeactivateEndpoint+0x28>
 8002570:	881c      	ldrh	r4, [r3, #0]
 8002572:	4d3c      	ldr	r5, [pc, #240]	; (8002664 <USB_DeactivateEndpoint+0x110>)
 8002574:	402c      	ands	r4, r5
 8002576:	4d3c      	ldr	r5, [pc, #240]	; (8002668 <USB_DeactivateEndpoint+0x114>)
 8002578:	432c      	orrs	r4, r5
 800257a:	801c      	strh	r4, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800257c:	780b      	ldrb	r3, [r1, #0]
 800257e:	493b      	ldr	r1, [pc, #236]	; (800266c <USB_DeactivateEndpoint+0x118>)
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	18c0      	adds	r0, r0, r3
 8002584:	8803      	ldrh	r3, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002586:	400b      	ands	r3, r1
 8002588:	431a      	orrs	r2, r3
 800258a:	e03f      	b.n	800260c <USB_DeactivateEndpoint+0xb8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800258c:	881c      	ldrh	r4, [r3, #0]
 800258e:	0464      	lsls	r4, r4, #17
 8002590:	d505      	bpl.n	800259e <USB_DeactivateEndpoint+0x4a>
 8002592:	881c      	ldrh	r4, [r3, #0]
 8002594:	4d33      	ldr	r5, [pc, #204]	; (8002664 <USB_DeactivateEndpoint+0x110>)
 8002596:	402c      	ands	r4, r5
 8002598:	4d35      	ldr	r5, [pc, #212]	; (8002670 <USB_DeactivateEndpoint+0x11c>)
 800259a:	432c      	orrs	r4, r5
 800259c:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800259e:	780b      	ldrb	r3, [r1, #0]
 80025a0:	4934      	ldr	r1, [pc, #208]	; (8002674 <USB_DeactivateEndpoint+0x120>)
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	18c0      	adds	r0, r0, r3
 80025a6:	8803      	ldrh	r3, [r0, #0]
 80025a8:	e7ed      	b.n	8002586 <USB_DeactivateEndpoint+0x32>
 80025aa:	2680      	movs	r6, #128	; 0x80
 80025ac:	4d2d      	ldr	r5, [pc, #180]	; (8002664 <USB_DeactivateEndpoint+0x110>)
 80025ae:	4f2f      	ldr	r7, [pc, #188]	; (800266c <USB_DeactivateEndpoint+0x118>)
 80025b0:	01f6      	lsls	r6, r6, #7
    if (ep->is_in == 0U)
 80025b2:	2c00      	cmp	r4, #0
 80025b4:	d12e      	bne.n	8002614 <USB_DeactivateEndpoint+0xc0>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80025b6:	881c      	ldrh	r4, [r3, #0]
 80025b8:	4234      	tst	r4, r6
 80025ba:	d004      	beq.n	80025c6 <USB_DeactivateEndpoint+0x72>
 80025bc:	881c      	ldrh	r4, [r3, #0]
 80025be:	4e2c      	ldr	r6, [pc, #176]	; (8002670 <USB_DeactivateEndpoint+0x11c>)
 80025c0:	402c      	ands	r4, r5
 80025c2:	4334      	orrs	r4, r6
 80025c4:	801c      	strh	r4, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80025c6:	780b      	ldrb	r3, [r1, #0]
 80025c8:	4c2b      	ldr	r4, [pc, #172]	; (8002678 <USB_DeactivateEndpoint+0x124>)
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	18c3      	adds	r3, r0, r3
 80025ce:	881e      	ldrh	r6, [r3, #0]
 80025d0:	0676      	lsls	r6, r6, #25
 80025d2:	d504      	bpl.n	80025de <USB_DeactivateEndpoint+0x8a>
 80025d4:	881e      	ldrh	r6, [r3, #0]
 80025d6:	402e      	ands	r6, r5
 80025d8:	4326      	orrs	r6, r4
 80025da:	b2b6      	uxth	r6, r6
 80025dc:	801e      	strh	r6, [r3, #0]
      PCD_TX_DTOG(USBx, ep->num);
 80025de:	780b      	ldrb	r3, [r1, #0]
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	18c3      	adds	r3, r0, r3
 80025e4:	881e      	ldrh	r6, [r3, #0]
 80025e6:	4035      	ands	r5, r6
 80025e8:	432c      	orrs	r4, r5
 80025ea:	b2a4      	uxth	r4, r4
 80025ec:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80025ee:	780c      	ldrb	r4, [r1, #0]
 80025f0:	4d20      	ldr	r5, [pc, #128]	; (8002674 <USB_DeactivateEndpoint+0x120>)
 80025f2:	00a4      	lsls	r4, r4, #2
 80025f4:	1904      	adds	r4, r0, r4
 80025f6:	8823      	ldrh	r3, [r4, #0]
 80025f8:	402b      	ands	r3, r5
 80025fa:	4313      	orrs	r3, r2
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002600:	780b      	ldrb	r3, [r1, #0]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	18c0      	adds	r0, r0, r3
 8002606:	8803      	ldrh	r3, [r0, #0]
 8002608:	401f      	ands	r7, r3
 800260a:	433a      	orrs	r2, r7
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800260c:	b292      	uxth	r2, r2
 800260e:	8002      	strh	r2, [r0, #0]
    }
  }

  return HAL_OK;
}
 8002610:	2000      	movs	r0, #0
 8002612:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002614:	881c      	ldrh	r4, [r3, #0]
 8002616:	4234      	tst	r4, r6
 8002618:	d005      	beq.n	8002626 <USB_DeactivateEndpoint+0xd2>
 800261a:	881e      	ldrh	r6, [r3, #0]
 800261c:	4c17      	ldr	r4, [pc, #92]	; (800267c <USB_DeactivateEndpoint+0x128>)
 800261e:	402e      	ands	r6, r5
 8002620:	4326      	orrs	r6, r4
 8002622:	b2b6      	uxth	r6, r6
 8002624:	801e      	strh	r6, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002626:	780b      	ldrb	r3, [r1, #0]
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	18c3      	adds	r3, r0, r3
 800262c:	881e      	ldrh	r6, [r3, #0]
 800262e:	0674      	lsls	r4, r6, #25
 8002630:	d504      	bpl.n	800263c <USB_DeactivateEndpoint+0xe8>
 8002632:	881e      	ldrh	r6, [r3, #0]
 8002634:	4c0c      	ldr	r4, [pc, #48]	; (8002668 <USB_DeactivateEndpoint+0x114>)
 8002636:	402e      	ands	r6, r5
 8002638:	4326      	orrs	r6, r4
 800263a:	801e      	strh	r6, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800263c:	780b      	ldrb	r3, [r1, #0]
 800263e:	4c0f      	ldr	r4, [pc, #60]	; (800267c <USB_DeactivateEndpoint+0x128>)
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	18c3      	adds	r3, r0, r3
 8002644:	881e      	ldrh	r6, [r3, #0]
 8002646:	4035      	ands	r5, r6
 8002648:	432c      	orrs	r4, r5
 800264a:	b2a4      	uxth	r4, r4
 800264c:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800264e:	780b      	ldrb	r3, [r1, #0]
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	18c3      	adds	r3, r0, r3
 8002654:	881c      	ldrh	r4, [r3, #0]
 8002656:	4027      	ands	r7, r4
 8002658:	4317      	orrs	r7, r2
 800265a:	b2bf      	uxth	r7, r7
 800265c:	801f      	strh	r7, [r3, #0]
 800265e:	e79e      	b.n	800259e <USB_DeactivateEndpoint+0x4a>
 8002660:	ffff8080 	.word	0xffff8080
 8002664:	ffff8f8f 	.word	0xffff8f8f
 8002668:	000080c0 	.word	0x000080c0
 800266c:	ffff8fbf 	.word	0xffff8fbf
 8002670:	0000c080 	.word	0x0000c080
 8002674:	ffffbf8f 	.word	0xffffbf8f
 8002678:	ffff80c0 	.word	0xffff80c0
 800267c:	ffffc080 	.word	0xffffc080

08002680 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002680:	780b      	ldrb	r3, [r1, #0]
 8002682:	4a0b      	ldr	r2, [pc, #44]	; (80026b0 <USB_EPSetStall+0x30>)
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	18c0      	adds	r0, r0, r3
  if (ep->is_in != 0U)
 8002688:	784b      	ldrb	r3, [r1, #1]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <USB_EPSetStall+0x22>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800268e:	8803      	ldrh	r3, [r0, #0]
 8002690:	4908      	ldr	r1, [pc, #32]	; (80026b4 <USB_EPSetStall+0x34>)
 8002692:	4019      	ands	r1, r3
 8002694:	2310      	movs	r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002696:	404b      	eors	r3, r1
 8002698:	4313      	orrs	r3, r2
 800269a:	b29b      	uxth	r3, r3
 800269c:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 800269e:	2000      	movs	r0, #0
 80026a0:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80026a2:	8803      	ldrh	r3, [r0, #0]
 80026a4:	4904      	ldr	r1, [pc, #16]	; (80026b8 <USB_EPSetStall+0x38>)
 80026a6:	4019      	ands	r1, r3
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	015b      	lsls	r3, r3, #5
 80026ac:	e7f3      	b.n	8002696 <USB_EPSetStall+0x16>
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	ffff8080 	.word	0xffff8080
 80026b4:	ffff8fbf 	.word	0xffff8fbf
 80026b8:	ffffbf8f 	.word	0xffffbf8f

080026bc <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80026bc:	7b0b      	ldrb	r3, [r1, #12]
{
 80026be:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d11c      	bne.n	80026fe <USB_EPClearStall+0x42>
 80026c4:	780b      	ldrb	r3, [r1, #0]
  {
    if (ep->is_in != 0U)
 80026c6:	784a      	ldrb	r2, [r1, #1]
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	18c3      	adds	r3, r0, r3
 80026cc:	2a00      	cmp	r2, #0
 80026ce:	d018      	beq.n	8002702 <USB_EPClearStall+0x46>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80026d0:	881a      	ldrh	r2, [r3, #0]
 80026d2:	0652      	lsls	r2, r2, #25
 80026d4:	d505      	bpl.n	80026e2 <USB_EPClearStall+0x26>
 80026d6:	881a      	ldrh	r2, [r3, #0]
 80026d8:	4c13      	ldr	r4, [pc, #76]	; (8002728 <USB_EPClearStall+0x6c>)
 80026da:	4022      	ands	r2, r4
 80026dc:	4c13      	ldr	r4, [pc, #76]	; (800272c <USB_EPClearStall+0x70>)
 80026de:	4322      	orrs	r2, r4
 80026e0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80026e2:	78cb      	ldrb	r3, [r1, #3]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d00a      	beq.n	80026fe <USB_EPClearStall+0x42>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80026e8:	780b      	ldrb	r3, [r1, #0]
 80026ea:	4a11      	ldr	r2, [pc, #68]	; (8002730 <USB_EPClearStall+0x74>)
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	18c0      	adds	r0, r0, r3
 80026f0:	8803      	ldrh	r3, [r0, #0]
 80026f2:	401a      	ands	r2, r3
 80026f4:	2320      	movs	r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80026f6:	4053      	eors	r3, r2
 80026f8:	4a0e      	ldr	r2, [pc, #56]	; (8002734 <USB_EPClearStall+0x78>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	8003      	strh	r3, [r0, #0]
    }
  }

  return HAL_OK;
}
 80026fe:	2000      	movs	r0, #0
 8002700:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002702:	881a      	ldrh	r2, [r3, #0]
 8002704:	0452      	lsls	r2, r2, #17
 8002706:	d505      	bpl.n	8002714 <USB_EPClearStall+0x58>
 8002708:	881a      	ldrh	r2, [r3, #0]
 800270a:	4c07      	ldr	r4, [pc, #28]	; (8002728 <USB_EPClearStall+0x6c>)
 800270c:	4022      	ands	r2, r4
 800270e:	4c0a      	ldr	r4, [pc, #40]	; (8002738 <USB_EPClearStall+0x7c>)
 8002710:	4322      	orrs	r2, r4
 8002712:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002714:	780b      	ldrb	r3, [r1, #0]
 8002716:	4a09      	ldr	r2, [pc, #36]	; (800273c <USB_EPClearStall+0x80>)
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	18c0      	adds	r0, r0, r3
 800271c:	8803      	ldrh	r3, [r0, #0]
 800271e:	401a      	ands	r2, r3
 8002720:	23c0      	movs	r3, #192	; 0xc0
 8002722:	019b      	lsls	r3, r3, #6
 8002724:	e7e7      	b.n	80026f6 <USB_EPClearStall+0x3a>
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	ffff8f8f 	.word	0xffff8f8f
 800272c:	000080c0 	.word	0x000080c0
 8002730:	ffff8fbf 	.word	0xffff8fbf
 8002734:	00008080 	.word	0x00008080
 8002738:	0000c080 	.word	0x0000c080
 800273c:	ffffbf8f 	.word	0xffffbf8f

08002740 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8002740:	2900      	cmp	r1, #0
 8002742:	d102      	bne.n	800274a <USB_SetDevAddress+0xa>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	304c      	adds	r0, #76	; 0x4c
 8002748:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 800274a:	2000      	movs	r0, #0
 800274c:	4770      	bx	lr

0800274e <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800274e:	2280      	movs	r2, #128	; 0x80
 8002750:	3058      	adds	r0, #88	; 0x58
 8002752:	8803      	ldrh	r3, [r0, #0]
 8002754:	0212      	lsls	r2, r2, #8
 8002756:	4313      	orrs	r3, r2
 8002758:	8003      	strh	r3, [r0, #0]

  return HAL_OK;
}
 800275a:	2000      	movs	r0, #0
 800275c:	4770      	bx	lr

0800275e <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800275e:	3006      	adds	r0, #6
 8002760:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 8002762:	b280      	uxth	r0, r0
  return tmpreg;
}
 8002764:	4770      	bx	lr

08002766 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002766:	b530      	push	{r4, r5, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002768:	2480      	movs	r4, #128	; 0x80
 800276a:	00e4      	lsls	r4, r4, #3
 800276c:	1912      	adds	r2, r2, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800276e:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002770:	1880      	adds	r0, r0, r2
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002772:	085b      	lsrs	r3, r3, #1
 8002774:	1a40      	subs	r0, r0, r1
 8002776:	1844      	adds	r4, r0, r1

  for (i = n; i != 0U; i--)
 8002778:	2b00      	cmp	r3, #0
 800277a:	d100      	bne.n	800277e <USB_WritePMA+0x18>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800277c:	bd30      	pop	{r4, r5, pc}
 800277e:	784a      	ldrb	r2, [r1, #1]
 8002780:	780d      	ldrb	r5, [r1, #0]
 8002782:	0212      	lsls	r2, r2, #8
 8002784:	432a      	orrs	r2, r5
    *pdwVal = (uint16_t)temp2;
 8002786:	8022      	strh	r2, [r4, #0]
  for (i = n; i != 0U; i--)
 8002788:	3b01      	subs	r3, #1
    pBuf++;
 800278a:	3102      	adds	r1, #2
 800278c:	e7f3      	b.n	8002776 <USB_WritePMA+0x10>
	...

08002790 <USB_EPStartXfer>:
{
 8002790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002792:	000c      	movs	r4, r1
  if (ep->is_in == 1U)
 8002794:	7849      	ldrb	r1, [r1, #1]
{
 8002796:	0005      	movs	r5, r0
 8002798:	7b20      	ldrb	r0, [r4, #12]
  if (ep->is_in == 1U)
 800279a:	2901      	cmp	r1, #1
 800279c:	d000      	beq.n	80027a0 <USB_EPStartXfer+0x10>
 800279e:	e1a1      	b.n	8002ae4 <USB_EPStartXfer+0x354>
    if (ep->xfer_len > ep->maxpacket)
 80027a0:	6927      	ldr	r7, [r4, #16]
 80027a2:	69a6      	ldr	r6, [r4, #24]
 80027a4:	42be      	cmp	r6, r7
 80027a6:	d900      	bls.n	80027aa <USB_EPStartXfer+0x1a>
 80027a8:	003e      	movs	r6, r7
 80027aa:	6961      	ldr	r1, [r4, #20]
    if (ep->doublebuffer == 0U)
 80027ac:	2800      	cmp	r0, #0
 80027ae:	d11d      	bne.n	80027ec <USB_EPStartXfer+0x5c>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80027b0:	b2b6      	uxth	r6, r6
 80027b2:	88e2      	ldrh	r2, [r4, #6]
 80027b4:	0033      	movs	r3, r6
 80027b6:	0028      	movs	r0, r5
 80027b8:	f7ff ffd5 	bl	8002766 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80027bc:	002b      	movs	r3, r5
 80027be:	4abe      	ldr	r2, [pc, #760]	; (8002ab8 <USB_EPStartXfer+0x328>)
 80027c0:	3350      	adds	r3, #80	; 0x50
 80027c2:	8819      	ldrh	r1, [r3, #0]
 80027c4:	7823      	ldrb	r3, [r4, #0]
 80027c6:	18aa      	adds	r2, r5, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	1852      	adds	r2, r2, r1
 80027cc:	189b      	adds	r3, r3, r2
 80027ce:	801e      	strh	r6, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80027d0:	7823      	ldrb	r3, [r4, #0]
 80027d2:	4aba      	ldr	r2, [pc, #744]	; (8002abc <USB_EPStartXfer+0x32c>)
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	18ed      	adds	r5, r5, r3
 80027d8:	882b      	ldrh	r3, [r5, #0]
 80027da:	401a      	ands	r2, r3
 80027dc:	2330      	movs	r3, #48	; 0x30
 80027de:	4053      	eors	r3, r2
 80027e0:	4ab7      	ldr	r2, [pc, #732]	; (8002ac0 <USB_EPStartXfer+0x330>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	b29b      	uxth	r3, r3
  return HAL_OK;
 80027e6:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80027e8:	802b      	strh	r3, [r5, #0]
}
 80027ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80027ec:	7820      	ldrb	r0, [r4, #0]
      if (ep->type == EP_TYPE_BULK)
 80027ee:	78e3      	ldrb	r3, [r4, #3]
 80027f0:	0082      	lsls	r2, r0, #2
 80027f2:	18aa      	adds	r2, r5, r2
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d000      	beq.n	80027fa <USB_EPStartXfer+0x6a>
 80027f8:	e12f      	b.n	8002a5a <USB_EPStartXfer+0x2ca>
        if (ep->xfer_len_db > ep->maxpacket)
 80027fa:	6a23      	ldr	r3, [r4, #32]
          PCD_SET_EP_DBUF(USBx, ep->num);
 80027fc:	8810      	ldrh	r0, [r2, #0]
        if (ep->xfer_len_db > ep->maxpacket)
 80027fe:	429f      	cmp	r7, r3
 8002800:	d300      	bcc.n	8002804 <USB_EPStartXfer+0x74>
 8002802:	e119      	b.n	8002a38 <USB_EPStartXfer+0x2a8>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8002804:	4faf      	ldr	r7, [pc, #700]	; (8002ac4 <USB_EPStartXfer+0x334>)
          ep->xfer_len_db -= len;
 8002806:	1b9b      	subs	r3, r3, r6
          PCD_SET_EP_DBUF(USBx, ep->num);
 8002808:	4038      	ands	r0, r7
 800280a:	4faf      	ldr	r7, [pc, #700]	; (8002ac8 <USB_EPStartXfer+0x338>)
 800280c:	4338      	orrs	r0, r7
 800280e:	8010      	strh	r0, [r2, #0]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002810:	7820      	ldrb	r0, [r4, #0]
          ep->xfer_len_db -= len;
 8002812:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002814:	0083      	lsls	r3, r0, #2
 8002816:	18eb      	adds	r3, r5, r3
 8002818:	881f      	ldrh	r7, [r3, #0]
 800281a:	b2b3      	uxth	r3, r6
 800281c:	9301      	str	r3, [sp, #4]
 800281e:	7862      	ldrb	r2, [r4, #1]
 8002820:	067b      	lsls	r3, r7, #25
 8002822:	d400      	bmi.n	8002826 <USB_EPStartXfer+0x96>
 8002824:	e082      	b.n	800292c <USB_EPStartXfer+0x19c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002826:	2a00      	cmp	r2, #0
 8002828:	d14e      	bne.n	80028c8 <USB_EPStartXfer+0x138>
 800282a:	002a      	movs	r2, r5
 800282c:	3250      	adds	r2, #80	; 0x50
 800282e:	8817      	ldrh	r7, [r2, #0]
 8002830:	4aa6      	ldr	r2, [pc, #664]	; (8002acc <USB_EPStartXfer+0x33c>)
 8002832:	00c0      	lsls	r0, r0, #3
 8002834:	18aa      	adds	r2, r5, r2
 8002836:	19d2      	adds	r2, r2, r7
 8002838:	1812      	adds	r2, r2, r0
 800283a:	2e00      	cmp	r6, #0
 800283c:	d131      	bne.n	80028a2 <USB_EPStartXfer+0x112>
 800283e:	8810      	ldrh	r0, [r2, #0]
 8002840:	4fa3      	ldr	r7, [pc, #652]	; (8002ad0 <USB_EPStartXfer+0x340>)
 8002842:	4038      	ands	r0, r7
 8002844:	2780      	movs	r7, #128	; 0x80
 8002846:	8010      	strh	r0, [r2, #0]
 8002848:	8810      	ldrh	r0, [r2, #0]
 800284a:	023f      	lsls	r7, r7, #8
 800284c:	4338      	orrs	r0, r7
 800284e:	8010      	strh	r0, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002850:	8962      	ldrh	r2, [r4, #10]
 8002852:	b2b3      	uxth	r3, r6
 8002854:	0028      	movs	r0, r5
 8002856:	f7ff ff86 	bl	8002766 <USB_WritePMA>
            ep->xfer_buff += len;
 800285a:	6963      	ldr	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800285c:	6a22      	ldr	r2, [r4, #32]
            ep->xfer_buff += len;
 800285e:	1999      	adds	r1, r3, r6
            if (ep->xfer_len_db > ep->maxpacket)
 8002860:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8002862:	6161      	str	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002864:	429a      	cmp	r2, r3
 8002866:	d93c      	bls.n	80028e2 <USB_EPStartXfer+0x152>
              ep->xfer_len_db -= len;
 8002868:	1b92      	subs	r2, r2, r6
 800286a:	6222      	str	r2, [r4, #32]
 800286c:	0032      	movs	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800286e:	7860      	ldrb	r0, [r4, #1]
 8002870:	b293      	uxth	r3, r2
 8002872:	2800      	cmp	r0, #0
 8002874:	d14d      	bne.n	8002912 <USB_EPStartXfer+0x182>
 8002876:	0028      	movs	r0, r5
 8002878:	3050      	adds	r0, #80	; 0x50
 800287a:	8807      	ldrh	r7, [r0, #0]
 800287c:	488e      	ldr	r0, [pc, #568]	; (8002ab8 <USB_EPStartXfer+0x328>)
 800287e:	7826      	ldrb	r6, [r4, #0]
 8002880:	1828      	adds	r0, r5, r0
 8002882:	00f6      	lsls	r6, r6, #3
 8002884:	19c0      	adds	r0, r0, r7
 8002886:	1830      	adds	r0, r6, r0
 8002888:	2a00      	cmp	r2, #0
 800288a:	d12d      	bne.n	80028e8 <USB_EPStartXfer+0x158>
 800288c:	8802      	ldrh	r2, [r0, #0]
 800288e:	4e90      	ldr	r6, [pc, #576]	; (8002ad0 <USB_EPStartXfer+0x340>)
 8002890:	4032      	ands	r2, r6
 8002892:	2680      	movs	r6, #128	; 0x80
 8002894:	8002      	strh	r2, [r0, #0]
 8002896:	8802      	ldrh	r2, [r0, #0]
 8002898:	0236      	lsls	r6, r6, #8
 800289a:	4332      	orrs	r2, r6
 800289c:	8002      	strh	r2, [r0, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800289e:	8922      	ldrh	r2, [r4, #8]
 80028a0:	e081      	b.n	80029a6 <USB_EPStartXfer+0x216>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80028a2:	2e3e      	cmp	r6, #62	; 0x3e
 80028a4:	d806      	bhi.n	80028b4 <USB_EPStartXfer+0x124>
 80028a6:	2701      	movs	r7, #1
 80028a8:	0870      	lsrs	r0, r6, #1
 80028aa:	4037      	ands	r7, r6
 80028ac:	19c0      	adds	r0, r0, r7
 80028ae:	0280      	lsls	r0, r0, #10
 80028b0:	b280      	uxth	r0, r0
 80028b2:	e7cc      	b.n	800284e <USB_EPStartXfer+0xbe>
 80028b4:	271f      	movs	r7, #31
 80028b6:	4037      	ands	r7, r6
 80028b8:	427b      	negs	r3, r7
 80028ba:	417b      	adcs	r3, r7
 80028bc:	0970      	lsrs	r0, r6, #5
 80028be:	1ac0      	subs	r0, r0, r3
 80028c0:	0287      	lsls	r7, r0, #10
 80028c2:	4884      	ldr	r0, [pc, #528]	; (8002ad4 <USB_EPStartXfer+0x344>)
 80028c4:	4338      	orrs	r0, r7
 80028c6:	e7f3      	b.n	80028b0 <USB_EPStartXfer+0x120>
 80028c8:	2a01      	cmp	r2, #1
 80028ca:	d1c1      	bne.n	8002850 <USB_EPStartXfer+0xc0>
 80028cc:	002a      	movs	r2, r5
 80028ce:	4b7f      	ldr	r3, [pc, #508]	; (8002acc <USB_EPStartXfer+0x33c>)
 80028d0:	3250      	adds	r2, #80	; 0x50
 80028d2:	8812      	ldrh	r2, [r2, #0]
 80028d4:	18ef      	adds	r7, r5, r3
 80028d6:	18bf      	adds	r7, r7, r2
 80028d8:	00c0      	lsls	r0, r0, #3
 80028da:	1838      	adds	r0, r7, r0
 80028dc:	b2b3      	uxth	r3, r6
 80028de:	8003      	strh	r3, [r0, #0]
 80028e0:	e7b6      	b.n	8002850 <USB_EPStartXfer+0xc0>
              ep->xfer_len_db = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	6223      	str	r3, [r4, #32]
 80028e6:	e7c2      	b.n	800286e <USB_EPStartXfer+0xde>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80028e8:	2a3e      	cmp	r2, #62	; 0x3e
 80028ea:	d806      	bhi.n	80028fa <USB_EPStartXfer+0x16a>
 80028ec:	2701      	movs	r7, #1
 80028ee:	0856      	lsrs	r6, r2, #1
 80028f0:	403a      	ands	r2, r7
 80028f2:	18b6      	adds	r6, r6, r2
 80028f4:	02b6      	lsls	r6, r6, #10
 80028f6:	b2b2      	uxth	r2, r6
 80028f8:	e7d0      	b.n	800289c <USB_EPStartXfer+0x10c>
 80028fa:	271f      	movs	r7, #31
 80028fc:	0956      	lsrs	r6, r2, #5
 80028fe:	403a      	ands	r2, r7
 8002900:	4257      	negs	r7, r2
 8002902:	417a      	adcs	r2, r7
 8002904:	1ab6      	subs	r6, r6, r2
 8002906:	02b2      	lsls	r2, r6, #10
 8002908:	4e72      	ldr	r6, [pc, #456]	; (8002ad4 <USB_EPStartXfer+0x344>)
 800290a:	4316      	orrs	r6, r2
 800290c:	b2b6      	uxth	r6, r6
 800290e:	8006      	strh	r6, [r0, #0]
 8002910:	e7c5      	b.n	800289e <USB_EPStartXfer+0x10e>
 8002912:	2801      	cmp	r0, #1
 8002914:	d1c3      	bne.n	800289e <USB_EPStartXfer+0x10e>
 8002916:	002a      	movs	r2, r5
 8002918:	4867      	ldr	r0, [pc, #412]	; (8002ab8 <USB_EPStartXfer+0x328>)
 800291a:	3250      	adds	r2, #80	; 0x50
 800291c:	8816      	ldrh	r6, [r2, #0]
 800291e:	7822      	ldrb	r2, [r4, #0]
 8002920:	1828      	adds	r0, r5, r0
 8002922:	00d2      	lsls	r2, r2, #3
 8002924:	1980      	adds	r0, r0, r6
 8002926:	1812      	adds	r2, r2, r0
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002928:	8013      	strh	r3, [r2, #0]
 800292a:	e7b8      	b.n	800289e <USB_EPStartXfer+0x10e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800292c:	2a00      	cmp	r2, #0
 800292e:	d151      	bne.n	80029d4 <USB_EPStartXfer+0x244>
 8002930:	002a      	movs	r2, r5
 8002932:	4b61      	ldr	r3, [pc, #388]	; (8002ab8 <USB_EPStartXfer+0x328>)
 8002934:	3250      	adds	r2, #80	; 0x50
 8002936:	8817      	ldrh	r7, [r2, #0]
 8002938:	18ea      	adds	r2, r5, r3
 800293a:	19d2      	adds	r2, r2, r7
 800293c:	00c0      	lsls	r0, r0, #3
 800293e:	1812      	adds	r2, r2, r0
 8002940:	2e00      	cmp	r6, #0
 8002942:	d134      	bne.n	80029ae <USB_EPStartXfer+0x21e>
 8002944:	8810      	ldrh	r0, [r2, #0]
 8002946:	4f62      	ldr	r7, [pc, #392]	; (8002ad0 <USB_EPStartXfer+0x340>)
 8002948:	4038      	ands	r0, r7
 800294a:	2780      	movs	r7, #128	; 0x80
 800294c:	8010      	strh	r0, [r2, #0]
 800294e:	8810      	ldrh	r0, [r2, #0]
 8002950:	023f      	lsls	r7, r7, #8
 8002952:	4338      	orrs	r0, r7
 8002954:	8010      	strh	r0, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002956:	8922      	ldrh	r2, [r4, #8]
 8002958:	b2b3      	uxth	r3, r6
 800295a:	0028      	movs	r0, r5
 800295c:	f7ff ff03 	bl	8002766 <USB_WritePMA>
            ep->xfer_buff += len;
 8002960:	6963      	ldr	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002962:	6a22      	ldr	r2, [r4, #32]
            ep->xfer_buff += len;
 8002964:	1999      	adds	r1, r3, r6
            if (ep->xfer_len_db > ep->maxpacket)
 8002966:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8002968:	6161      	str	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800296a:	429a      	cmp	r2, r3
 800296c:	d93f      	bls.n	80029ee <USB_EPStartXfer+0x25e>
              ep->xfer_len_db -= len;
 800296e:	1b92      	subs	r2, r2, r6
 8002970:	6222      	str	r2, [r4, #32]
 8002972:	0032      	movs	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002974:	7860      	ldrb	r0, [r4, #1]
 8002976:	b293      	uxth	r3, r2
 8002978:	2800      	cmp	r0, #0
 800297a:	d150      	bne.n	8002a1e <USB_EPStartXfer+0x28e>
 800297c:	0028      	movs	r0, r5
 800297e:	3050      	adds	r0, #80	; 0x50
 8002980:	8807      	ldrh	r7, [r0, #0]
 8002982:	4852      	ldr	r0, [pc, #328]	; (8002acc <USB_EPStartXfer+0x33c>)
 8002984:	7826      	ldrb	r6, [r4, #0]
 8002986:	1828      	adds	r0, r5, r0
 8002988:	00f6      	lsls	r6, r6, #3
 800298a:	19c0      	adds	r0, r0, r7
 800298c:	1830      	adds	r0, r6, r0
 800298e:	2a00      	cmp	r2, #0
 8002990:	d130      	bne.n	80029f4 <USB_EPStartXfer+0x264>
 8002992:	8802      	ldrh	r2, [r0, #0]
 8002994:	4e4e      	ldr	r6, [pc, #312]	; (8002ad0 <USB_EPStartXfer+0x340>)
 8002996:	4032      	ands	r2, r6
 8002998:	2680      	movs	r6, #128	; 0x80
 800299a:	8002      	strh	r2, [r0, #0]
 800299c:	8802      	ldrh	r2, [r0, #0]
 800299e:	0236      	lsls	r6, r6, #8
 80029a0:	4332      	orrs	r2, r6
 80029a2:	8002      	strh	r2, [r0, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80029a4:	8962      	ldrh	r2, [r4, #10]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80029a6:	0028      	movs	r0, r5
 80029a8:	f7ff fedd 	bl	8002766 <USB_WritePMA>
 80029ac:	e710      	b.n	80027d0 <USB_EPStartXfer+0x40>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80029ae:	2e3e      	cmp	r6, #62	; 0x3e
 80029b0:	d806      	bhi.n	80029c0 <USB_EPStartXfer+0x230>
 80029b2:	2701      	movs	r7, #1
 80029b4:	0870      	lsrs	r0, r6, #1
 80029b6:	4037      	ands	r7, r6
 80029b8:	19c0      	adds	r0, r0, r7
 80029ba:	0280      	lsls	r0, r0, #10
 80029bc:	b280      	uxth	r0, r0
 80029be:	e7c9      	b.n	8002954 <USB_EPStartXfer+0x1c4>
 80029c0:	271f      	movs	r7, #31
 80029c2:	4037      	ands	r7, r6
 80029c4:	427b      	negs	r3, r7
 80029c6:	417b      	adcs	r3, r7
 80029c8:	0970      	lsrs	r0, r6, #5
 80029ca:	1ac0      	subs	r0, r0, r3
 80029cc:	0287      	lsls	r7, r0, #10
 80029ce:	4841      	ldr	r0, [pc, #260]	; (8002ad4 <USB_EPStartXfer+0x344>)
 80029d0:	4338      	orrs	r0, r7
 80029d2:	e7f3      	b.n	80029bc <USB_EPStartXfer+0x22c>
 80029d4:	2a01      	cmp	r2, #1
 80029d6:	d1be      	bne.n	8002956 <USB_EPStartXfer+0x1c6>
 80029d8:	002a      	movs	r2, r5
 80029da:	4b37      	ldr	r3, [pc, #220]	; (8002ab8 <USB_EPStartXfer+0x328>)
 80029dc:	3250      	adds	r2, #80	; 0x50
 80029de:	8817      	ldrh	r7, [r2, #0]
 80029e0:	18ea      	adds	r2, r5, r3
 80029e2:	19d2      	adds	r2, r2, r7
 80029e4:	00c0      	lsls	r0, r0, #3
 80029e6:	1810      	adds	r0, r2, r0
 80029e8:	b2b3      	uxth	r3, r6
 80029ea:	8003      	strh	r3, [r0, #0]
 80029ec:	e7b3      	b.n	8002956 <USB_EPStartXfer+0x1c6>
              ep->xfer_len_db = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	6223      	str	r3, [r4, #32]
 80029f2:	e7bf      	b.n	8002974 <USB_EPStartXfer+0x1e4>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80029f4:	2a3e      	cmp	r2, #62	; 0x3e
 80029f6:	d806      	bhi.n	8002a06 <USB_EPStartXfer+0x276>
 80029f8:	2701      	movs	r7, #1
 80029fa:	0856      	lsrs	r6, r2, #1
 80029fc:	403a      	ands	r2, r7
 80029fe:	18b6      	adds	r6, r6, r2
 8002a00:	02b6      	lsls	r6, r6, #10
 8002a02:	b2b2      	uxth	r2, r6
 8002a04:	e7cd      	b.n	80029a2 <USB_EPStartXfer+0x212>
 8002a06:	271f      	movs	r7, #31
 8002a08:	0956      	lsrs	r6, r2, #5
 8002a0a:	403a      	ands	r2, r7
 8002a0c:	4257      	negs	r7, r2
 8002a0e:	417a      	adcs	r2, r7
 8002a10:	1ab6      	subs	r6, r6, r2
 8002a12:	02b2      	lsls	r2, r6, #10
 8002a14:	4e2f      	ldr	r6, [pc, #188]	; (8002ad4 <USB_EPStartXfer+0x344>)
 8002a16:	4316      	orrs	r6, r2
 8002a18:	b2b6      	uxth	r6, r6
 8002a1a:	8006      	strh	r6, [r0, #0]
 8002a1c:	e7c2      	b.n	80029a4 <USB_EPStartXfer+0x214>
 8002a1e:	2801      	cmp	r0, #1
 8002a20:	d1c0      	bne.n	80029a4 <USB_EPStartXfer+0x214>
 8002a22:	002a      	movs	r2, r5
 8002a24:	4829      	ldr	r0, [pc, #164]	; (8002acc <USB_EPStartXfer+0x33c>)
 8002a26:	3250      	adds	r2, #80	; 0x50
 8002a28:	8816      	ldrh	r6, [r2, #0]
 8002a2a:	7822      	ldrb	r2, [r4, #0]
 8002a2c:	1828      	adds	r0, r5, r0
 8002a2e:	00d2      	lsls	r2, r2, #3
 8002a30:	1980      	adds	r0, r0, r6
 8002a32:	1812      	adds	r2, r2, r0
 8002a34:	8013      	strh	r3, [r2, #0]
 8002a36:	e7b5      	b.n	80029a4 <USB_EPStartXfer+0x214>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8002a38:	4e27      	ldr	r6, [pc, #156]	; (8002ad8 <USB_EPStartXfer+0x348>)
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002a3a:	b29b      	uxth	r3, r3
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8002a3c:	4030      	ands	r0, r6
 8002a3e:	4e20      	ldr	r6, [pc, #128]	; (8002ac0 <USB_EPStartXfer+0x330>)
 8002a40:	4330      	orrs	r0, r6
 8002a42:	b280      	uxth	r0, r0
 8002a44:	8010      	strh	r0, [r2, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002a46:	002a      	movs	r2, r5
 8002a48:	481b      	ldr	r0, [pc, #108]	; (8002ab8 <USB_EPStartXfer+0x328>)
 8002a4a:	3250      	adds	r2, #80	; 0x50
 8002a4c:	8816      	ldrh	r6, [r2, #0]
 8002a4e:	7822      	ldrb	r2, [r4, #0]
 8002a50:	1828      	adds	r0, r5, r0
 8002a52:	00d2      	lsls	r2, r2, #3
 8002a54:	1980      	adds	r0, r0, r6
 8002a56:	1812      	adds	r2, r2, r0
 8002a58:	e766      	b.n	8002928 <USB_EPStartXfer+0x198>
 8002a5a:	b2b3      	uxth	r3, r6
 8002a5c:	002e      	movs	r6, r5
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002a5e:	8812      	ldrh	r2, [r2, #0]
 8002a60:	3650      	adds	r6, #80	; 0x50
 8002a62:	00c0      	lsls	r0, r0, #3
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002a64:	8836      	ldrh	r6, [r6, #0]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002a66:	0652      	lsls	r2, r2, #25
 8002a68:	d515      	bpl.n	8002a96 <USB_EPStartXfer+0x306>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002a6a:	4a18      	ldr	r2, [pc, #96]	; (8002acc <USB_EPStartXfer+0x33c>)
 8002a6c:	18aa      	adds	r2, r5, r2
 8002a6e:	1992      	adds	r2, r2, r6
 8002a70:	1812      	adds	r2, r2, r0
 8002a72:	8013      	strh	r3, [r2, #0]
          pmabuffer = ep->pmaaddr1;
 8002a74:	8962      	ldrh	r2, [r4, #10]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002a76:	0028      	movs	r0, r5
 8002a78:	f7ff fe75 	bl	8002766 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002a7c:	7862      	ldrb	r2, [r4, #1]
 8002a7e:	7823      	ldrb	r3, [r4, #0]
 8002a80:	2a00      	cmp	r2, #0
 8002a82:	d10f      	bne.n	8002aa4 <USB_EPStartXfer+0x314>
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	18eb      	adds	r3, r5, r3
 8002a88:	490e      	ldr	r1, [pc, #56]	; (8002ac4 <USB_EPStartXfer+0x334>)
 8002a8a:	881a      	ldrh	r2, [r3, #0]
 8002a8c:	400a      	ands	r2, r1
 8002a8e:	4913      	ldr	r1, [pc, #76]	; (8002adc <USB_EPStartXfer+0x34c>)
 8002a90:	430a      	orrs	r2, r1
 8002a92:	801a      	strh	r2, [r3, #0]
 8002a94:	e69c      	b.n	80027d0 <USB_EPStartXfer+0x40>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002a96:	4a08      	ldr	r2, [pc, #32]	; (8002ab8 <USB_EPStartXfer+0x328>)
 8002a98:	18aa      	adds	r2, r5, r2
 8002a9a:	1992      	adds	r2, r2, r6
 8002a9c:	1812      	adds	r2, r2, r0
 8002a9e:	8013      	strh	r3, [r2, #0]
          pmabuffer = ep->pmaaddr0;
 8002aa0:	8922      	ldrh	r2, [r4, #8]
 8002aa2:	e7e8      	b.n	8002a76 <USB_EPStartXfer+0x2e6>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002aa4:	2a01      	cmp	r2, #1
 8002aa6:	d000      	beq.n	8002aaa <USB_EPStartXfer+0x31a>
 8002aa8:	e692      	b.n	80027d0 <USB_EPStartXfer+0x40>
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	18eb      	adds	r3, r5, r3
 8002aae:	4905      	ldr	r1, [pc, #20]	; (8002ac4 <USB_EPStartXfer+0x334>)
 8002ab0:	881a      	ldrh	r2, [r3, #0]
 8002ab2:	400a      	ands	r2, r1
 8002ab4:	490a      	ldr	r1, [pc, #40]	; (8002ae0 <USB_EPStartXfer+0x350>)
 8002ab6:	e7eb      	b.n	8002a90 <USB_EPStartXfer+0x300>
 8002ab8:	00000402 	.word	0x00000402
 8002abc:	ffff8fbf 	.word	0xffff8fbf
 8002ac0:	ffff8080 	.word	0xffff8080
 8002ac4:	ffff8f8f 	.word	0xffff8f8f
 8002ac8:	00008180 	.word	0x00008180
 8002acc:	00000406 	.word	0x00000406
 8002ad0:	ffff83ff 	.word	0xffff83ff
 8002ad4:	ffff8000 	.word	0xffff8000
 8002ad8:	ffff8e8f 	.word	0xffff8e8f
 8002adc:	000080c0 	.word	0x000080c0
 8002ae0:	0000c080 	.word	0x0000c080
    if (ep->doublebuffer == 0U)
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	d11e      	bne.n	8002b26 <USB_EPStartXfer+0x396>
      if (ep->xfer_len > ep->maxpacket)
 8002ae8:	69a2      	ldr	r2, [r4, #24]
 8002aea:	6923      	ldr	r3, [r4, #16]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d917      	bls.n	8002b20 <USB_EPStartXfer+0x390>
        ep->xfer_len -= len;
 8002af0:	1ad2      	subs	r2, r2, r3
 8002af2:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002af4:	002a      	movs	r2, r5
 8002af6:	4983      	ldr	r1, [pc, #524]	; (8002d04 <USB_EPStartXfer+0x574>)
 8002af8:	3250      	adds	r2, #80	; 0x50
 8002afa:	8810      	ldrh	r0, [r2, #0]
 8002afc:	7822      	ldrb	r2, [r4, #0]
 8002afe:	1869      	adds	r1, r5, r1
 8002b00:	00d2      	lsls	r2, r2, #3
 8002b02:	1809      	adds	r1, r1, r0
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002b04:	1889      	adds	r1, r1, r2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d000      	beq.n	8002b0c <USB_EPStartXfer+0x37c>
 8002b0a:	e0d9      	b.n	8002cc0 <USB_EPStartXfer+0x530>
 8002b0c:	880b      	ldrh	r3, [r1, #0]
 8002b0e:	4a7e      	ldr	r2, [pc, #504]	; (8002d08 <USB_EPStartXfer+0x578>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	2280      	movs	r2, #128	; 0x80
 8002b14:	800b      	strh	r3, [r1, #0]
 8002b16:	880b      	ldrh	r3, [r1, #0]
 8002b18:	0212      	lsls	r2, r2, #8
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	800b      	strh	r3, [r1, #0]
 8002b1e:	e067      	b.n	8002bf0 <USB_EPStartXfer+0x460>
        ep->xfer_len = 0U;
 8002b20:	61a0      	str	r0, [r4, #24]
 8002b22:	0013      	movs	r3, r2
 8002b24:	e7e6      	b.n	8002af4 <USB_EPStartXfer+0x364>
      if (ep->type == EP_TYPE_BULK)
 8002b26:	78e3      	ldrb	r3, [r4, #3]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d000      	beq.n	8002b2e <USB_EPStartXfer+0x39e>
 8002b2c:	e085      	b.n	8002c3a <USB_EPStartXfer+0x4aa>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002b2e:	2900      	cmp	r1, #0
 8002b30:	d11e      	bne.n	8002b70 <USB_EPStartXfer+0x3e0>
 8002b32:	002b      	movs	r3, r5
 8002b34:	4a75      	ldr	r2, [pc, #468]	; (8002d0c <USB_EPStartXfer+0x57c>)
 8002b36:	3350      	adds	r3, #80	; 0x50
 8002b38:	8819      	ldrh	r1, [r3, #0]
 8002b3a:	7823      	ldrb	r3, [r4, #0]
 8002b3c:	18aa      	adds	r2, r5, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	1852      	adds	r2, r2, r1
 8002b42:	189a      	adds	r2, r3, r2
 8002b44:	6923      	ldr	r3, [r4, #16]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <USB_EPStartXfer+0x3ce>
 8002b4a:	8813      	ldrh	r3, [r2, #0]
 8002b4c:	496e      	ldr	r1, [pc, #440]	; (8002d08 <USB_EPStartXfer+0x578>)
 8002b4e:	400b      	ands	r3, r1
 8002b50:	2180      	movs	r1, #128	; 0x80
 8002b52:	8013      	strh	r3, [r2, #0]
 8002b54:	8813      	ldrh	r3, [r2, #0]
 8002b56:	0209      	lsls	r1, r1, #8
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	8013      	strh	r3, [r2, #0]
 8002b5c:	e008      	b.n	8002b70 <USB_EPStartXfer+0x3e0>
 8002b5e:	2b3e      	cmp	r3, #62	; 0x3e
 8002b60:	d81f      	bhi.n	8002ba2 <USB_EPStartXfer+0x412>
 8002b62:	2001      	movs	r0, #1
 8002b64:	0859      	lsrs	r1, r3, #1
 8002b66:	4003      	ands	r3, r0
 8002b68:	18c9      	adds	r1, r1, r3
 8002b6a:	0289      	lsls	r1, r1, #10
 8002b6c:	b289      	uxth	r1, r1
 8002b6e:	8011      	strh	r1, [r2, #0]
 8002b70:	7862      	ldrb	r2, [r4, #1]
 8002b72:	7823      	ldrb	r3, [r4, #0]
 8002b74:	2a00      	cmp	r2, #0
 8002b76:	d152      	bne.n	8002c1e <USB_EPStartXfer+0x48e>
 8002b78:	002a      	movs	r2, r5
 8002b7a:	3250      	adds	r2, #80	; 0x50
 8002b7c:	8811      	ldrh	r1, [r2, #0]
 8002b7e:	4a61      	ldr	r2, [pc, #388]	; (8002d04 <USB_EPStartXfer+0x574>)
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	18aa      	adds	r2, r5, r2
 8002b84:	1852      	adds	r2, r2, r1
 8002b86:	18d2      	adds	r2, r2, r3
 8002b88:	6923      	ldr	r3, [r4, #16]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d114      	bne.n	8002bb8 <USB_EPStartXfer+0x428>
 8002b8e:	8813      	ldrh	r3, [r2, #0]
 8002b90:	495d      	ldr	r1, [pc, #372]	; (8002d08 <USB_EPStartXfer+0x578>)
 8002b92:	400b      	ands	r3, r1
 8002b94:	2180      	movs	r1, #128	; 0x80
 8002b96:	8013      	strh	r3, [r2, #0]
 8002b98:	8813      	ldrh	r3, [r2, #0]
 8002b9a:	0209      	lsls	r1, r1, #8
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	8013      	strh	r3, [r2, #0]
 8002ba0:	e013      	b.n	8002bca <USB_EPStartXfer+0x43a>
 8002ba2:	201f      	movs	r0, #31
 8002ba4:	0959      	lsrs	r1, r3, #5
 8002ba6:	4003      	ands	r3, r0
 8002ba8:	4258      	negs	r0, r3
 8002baa:	4143      	adcs	r3, r0
 8002bac:	1ac9      	subs	r1, r1, r3
 8002bae:	4b58      	ldr	r3, [pc, #352]	; (8002d10 <USB_EPStartXfer+0x580>)
 8002bb0:	0289      	lsls	r1, r1, #10
 8002bb2:	430b      	orrs	r3, r1
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	e7d0      	b.n	8002b5a <USB_EPStartXfer+0x3ca>
 8002bb8:	2b3e      	cmp	r3, #62	; 0x3e
 8002bba:	d825      	bhi.n	8002c08 <USB_EPStartXfer+0x478>
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	0859      	lsrs	r1, r3, #1
 8002bc0:	4003      	ands	r3, r0
 8002bc2:	18c9      	adds	r1, r1, r3
 8002bc4:	0289      	lsls	r1, r1, #10
 8002bc6:	b289      	uxth	r1, r1
 8002bc8:	8011      	strh	r1, [r2, #0]
        if (ep->xfer_count != 0U)
 8002bca:	69e3      	ldr	r3, [r4, #28]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00f      	beq.n	8002bf0 <USB_EPStartXfer+0x460>
 8002bd0:	7823      	ldrb	r3, [r4, #0]
 8002bd2:	4950      	ldr	r1, [pc, #320]	; (8002d14 <USB_EPStartXfer+0x584>)
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	18eb      	adds	r3, r5, r3
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8002bd8:	881a      	ldrh	r2, [r3, #0]
 8002bda:	400a      	ands	r2, r1
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8002bdc:	428a      	cmp	r2, r1
 8002bde:	d001      	beq.n	8002be4 <USB_EPStartXfer+0x454>
 8002be0:	2a00      	cmp	r2, #0
 8002be2:	d105      	bne.n	8002bf0 <USB_EPStartXfer+0x460>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8002be4:	881a      	ldrh	r2, [r3, #0]
 8002be6:	494c      	ldr	r1, [pc, #304]	; (8002d18 <USB_EPStartXfer+0x588>)
 8002be8:	400a      	ands	r2, r1
 8002bea:	494c      	ldr	r1, [pc, #304]	; (8002d1c <USB_EPStartXfer+0x58c>)
 8002bec:	430a      	orrs	r2, r1
 8002bee:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002bf0:	7823      	ldrb	r3, [r4, #0]
 8002bf2:	4a4b      	ldr	r2, [pc, #300]	; (8002d20 <USB_EPStartXfer+0x590>)
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	18ed      	adds	r5, r5, r3
 8002bf8:	882b      	ldrh	r3, [r5, #0]
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	23c0      	movs	r3, #192	; 0xc0
 8002bfe:	019b      	lsls	r3, r3, #6
 8002c00:	4053      	eors	r3, r2
 8002c02:	4a48      	ldr	r2, [pc, #288]	; (8002d24 <USB_EPStartXfer+0x594>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	e5ee      	b.n	80027e6 <USB_EPStartXfer+0x56>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002c08:	201f      	movs	r0, #31
 8002c0a:	0959      	lsrs	r1, r3, #5
 8002c0c:	4003      	ands	r3, r0
 8002c0e:	4258      	negs	r0, r3
 8002c10:	4143      	adcs	r3, r0
 8002c12:	1ac9      	subs	r1, r1, r3
 8002c14:	4b3e      	ldr	r3, [pc, #248]	; (8002d10 <USB_EPStartXfer+0x580>)
 8002c16:	0289      	lsls	r1, r1, #10
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	e7bf      	b.n	8002b9e <USB_EPStartXfer+0x40e>
 8002c1e:	2a01      	cmp	r2, #1
 8002c20:	d1d3      	bne.n	8002bca <USB_EPStartXfer+0x43a>
 8002c22:	002a      	movs	r2, r5
 8002c24:	4937      	ldr	r1, [pc, #220]	; (8002d04 <USB_EPStartXfer+0x574>)
 8002c26:	3250      	adds	r2, #80	; 0x50
 8002c28:	8812      	ldrh	r2, [r2, #0]
 8002c2a:	1869      	adds	r1, r5, r1
 8002c2c:	1889      	adds	r1, r1, r2
 8002c2e:	6922      	ldr	r2, [r4, #16]
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	18cb      	adds	r3, r1, r3
 8002c34:	b292      	uxth	r2, r2
 8002c36:	801a      	strh	r2, [r3, #0]
 8002c38:	e7c7      	b.n	8002bca <USB_EPStartXfer+0x43a>
        return HAL_ERROR;
 8002c3a:	2001      	movs	r0, #1
      else if (ep->type == EP_TYPE_ISOC)
 8002c3c:	4283      	cmp	r3, r0
 8002c3e:	d000      	beq.n	8002c42 <USB_EPStartXfer+0x4b2>
 8002c40:	e5d3      	b.n	80027ea <USB_EPStartXfer+0x5a>
        if (ep->xfer_len > ep->maxpacket)
 8002c42:	69a2      	ldr	r2, [r4, #24]
 8002c44:	6923      	ldr	r3, [r4, #16]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d923      	bls.n	8002c92 <USB_EPStartXfer+0x502>
          ep->xfer_len -= len;
 8002c4a:	1ad2      	subs	r2, r2, r3
 8002c4c:	61a2      	str	r2, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002c4e:	2900      	cmp	r1, #0
 8002c50:	d113      	bne.n	8002c7a <USB_EPStartXfer+0x4ea>
 8002c52:	002a      	movs	r2, r5
 8002c54:	492d      	ldr	r1, [pc, #180]	; (8002d0c <USB_EPStartXfer+0x57c>)
 8002c56:	3250      	adds	r2, #80	; 0x50
 8002c58:	8810      	ldrh	r0, [r2, #0]
 8002c5a:	7822      	ldrb	r2, [r4, #0]
 8002c5c:	1869      	adds	r1, r5, r1
 8002c5e:	00d2      	lsls	r2, r2, #3
 8002c60:	1809      	adds	r1, r1, r0
 8002c62:	1851      	adds	r1, r2, r1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d118      	bne.n	8002c9a <USB_EPStartXfer+0x50a>
 8002c68:	880a      	ldrh	r2, [r1, #0]
 8002c6a:	4827      	ldr	r0, [pc, #156]	; (8002d08 <USB_EPStartXfer+0x578>)
 8002c6c:	4002      	ands	r2, r0
 8002c6e:	2080      	movs	r0, #128	; 0x80
 8002c70:	800a      	strh	r2, [r1, #0]
 8002c72:	880a      	ldrh	r2, [r1, #0]
 8002c74:	0200      	lsls	r0, r0, #8
 8002c76:	4302      	orrs	r2, r0
 8002c78:	800a      	strh	r2, [r1, #0]
 8002c7a:	7861      	ldrb	r1, [r4, #1]
 8002c7c:	7822      	ldrb	r2, [r4, #0]
 8002c7e:	2900      	cmp	r1, #0
 8002c80:	d133      	bne.n	8002cea <USB_EPStartXfer+0x55a>
 8002c82:	0029      	movs	r1, r5
 8002c84:	481f      	ldr	r0, [pc, #124]	; (8002d04 <USB_EPStartXfer+0x574>)
 8002c86:	3150      	adds	r1, #80	; 0x50
 8002c88:	8809      	ldrh	r1, [r1, #0]
 8002c8a:	1828      	adds	r0, r5, r0
 8002c8c:	1841      	adds	r1, r0, r1
 8002c8e:	00d2      	lsls	r2, r2, #3
 8002c90:	e738      	b.n	8002b04 <USB_EPStartXfer+0x374>
          ep->xfer_len = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61a3      	str	r3, [r4, #24]
 8002c96:	0013      	movs	r3, r2
 8002c98:	e7d9      	b.n	8002c4e <USB_EPStartXfer+0x4be>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002c9a:	2b3e      	cmp	r3, #62	; 0x3e
 8002c9c:	d806      	bhi.n	8002cac <USB_EPStartXfer+0x51c>
 8002c9e:	2001      	movs	r0, #1
 8002ca0:	085a      	lsrs	r2, r3, #1
 8002ca2:	4018      	ands	r0, r3
 8002ca4:	1812      	adds	r2, r2, r0
 8002ca6:	0292      	lsls	r2, r2, #10
 8002ca8:	b292      	uxth	r2, r2
 8002caa:	e7e5      	b.n	8002c78 <USB_EPStartXfer+0x4e8>
 8002cac:	201f      	movs	r0, #31
 8002cae:	4018      	ands	r0, r3
 8002cb0:	4246      	negs	r6, r0
 8002cb2:	4170      	adcs	r0, r6
 8002cb4:	095a      	lsrs	r2, r3, #5
 8002cb6:	1a12      	subs	r2, r2, r0
 8002cb8:	0290      	lsls	r0, r2, #10
 8002cba:	4a15      	ldr	r2, [pc, #84]	; (8002d10 <USB_EPStartXfer+0x580>)
 8002cbc:	4302      	orrs	r2, r0
 8002cbe:	e7f3      	b.n	8002ca8 <USB_EPStartXfer+0x518>
 8002cc0:	2b3e      	cmp	r3, #62	; 0x3e
 8002cc2:	d807      	bhi.n	8002cd4 <USB_EPStartXfer+0x544>
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	085a      	lsrs	r2, r3, #1
 8002cc8:	4003      	ands	r3, r0
 8002cca:	18d2      	adds	r2, r2, r3
 8002ccc:	0292      	lsls	r2, r2, #10
 8002cce:	b292      	uxth	r2, r2
 8002cd0:	800a      	strh	r2, [r1, #0]
 8002cd2:	e78d      	b.n	8002bf0 <USB_EPStartXfer+0x460>
 8002cd4:	201f      	movs	r0, #31
 8002cd6:	095a      	lsrs	r2, r3, #5
 8002cd8:	4003      	ands	r3, r0
 8002cda:	4258      	negs	r0, r3
 8002cdc:	4143      	adcs	r3, r0
 8002cde:	1ad2      	subs	r2, r2, r3
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <USB_EPStartXfer+0x580>)
 8002ce2:	0292      	lsls	r2, r2, #10
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	e718      	b.n	8002b1c <USB_EPStartXfer+0x38c>
 8002cea:	2901      	cmp	r1, #1
 8002cec:	d000      	beq.n	8002cf0 <USB_EPStartXfer+0x560>
 8002cee:	e77f      	b.n	8002bf0 <USB_EPStartXfer+0x460>
 8002cf0:	0029      	movs	r1, r5
 8002cf2:	3150      	adds	r1, #80	; 0x50
 8002cf4:	8808      	ldrh	r0, [r1, #0]
 8002cf6:	4903      	ldr	r1, [pc, #12]	; (8002d04 <USB_EPStartXfer+0x574>)
 8002cf8:	00d2      	lsls	r2, r2, #3
 8002cfa:	1869      	adds	r1, r5, r1
 8002cfc:	1809      	adds	r1, r1, r0
 8002cfe:	1889      	adds	r1, r1, r2
 8002d00:	e7f1      	b.n	8002ce6 <USB_EPStartXfer+0x556>
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	00000406 	.word	0x00000406
 8002d08:	ffff83ff 	.word	0xffff83ff
 8002d0c:	00000402 	.word	0x00000402
 8002d10:	ffff8000 	.word	0xffff8000
 8002d14:	00004040 	.word	0x00004040
 8002d18:	ffff8f8f 	.word	0xffff8f8f
 8002d1c:	000080c0 	.word	0x000080c0
 8002d20:	ffffbf8f 	.word	0xffffbf8f
 8002d24:	00008080 	.word	0x00008080

08002d28 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002d28:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002d2a:	2580      	movs	r5, #128	; 0x80
  uint32_t n = (uint32_t)wNBytes >> 1;
 8002d2c:	085c      	lsrs	r4, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002d2e:	00ed      	lsls	r5, r5, #3
 8002d30:	1952      	adds	r2, r2, r5

  for (i = n; i != 0U; i--)
 8002d32:	0026      	movs	r6, r4
  uint8_t *pBuf = pbUsrBuf;
 8002d34:	000d      	movs	r5, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002d36:	1880      	adds	r0, r0, r2
 8002d38:	1a47      	subs	r7, r0, r1
 8002d3a:	197a      	adds	r2, r7, r5
  for (i = n; i != 0U; i--)
 8002d3c:	2e00      	cmp	r6, #0
 8002d3e:	d107      	bne.n	8002d50 <USB_ReadPMA+0x28>
 8002d40:	0064      	lsls	r4, r4, #1
 8002d42:	1900      	adds	r0, r0, r4
 8002d44:	1909      	adds	r1, r1, r4
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8002d46:	07db      	lsls	r3, r3, #31
 8002d48:	d501      	bpl.n	8002d4e <USB_ReadPMA+0x26>
  {
    temp = *pdwVal;
 8002d4a:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002d4c:	700b      	strb	r3, [r1, #0]
  }
}
 8002d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8002d50:	8812      	ldrh	r2, [r2, #0]
  for (i = n; i != 0U; i--)
 8002d52:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8002d54:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002d56:	702a      	strb	r2, [r5, #0]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8002d58:	0a12      	lsrs	r2, r2, #8
 8002d5a:	706a      	strb	r2, [r5, #1]
    pBuf++;
 8002d5c:	3502      	adds	r5, #2
 8002d5e:	e7ec      	b.n	8002d3a <USB_ReadPMA+0x12>

08002d60 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002d60:	23af      	movs	r3, #175	; 0xaf
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	58c3      	ldr	r3, [r0, r3]
{
 8002d66:	b570      	push	{r4, r5, r6, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00e      	beq.n	8002d8a <USBD_CDC_EP0_RxReady+0x2a>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002d6c:	22ae      	movs	r2, #174	; 0xae
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002d6e:	2580      	movs	r5, #128	; 0x80
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002d70:	0092      	lsls	r2, r2, #2
 8002d72:	5884      	ldr	r4, [r0, r2]
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002d74:	00ad      	lsls	r5, r5, #2
 8002d76:	5d60      	ldrb	r0, [r4, r5]
 8002d78:	28ff      	cmp	r0, #255	; 0xff
 8002d7a:	d006      	beq.n	8002d8a <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002d7c:	4a04      	ldr	r2, [pc, #16]	; (8002d90 <USBD_CDC_EP0_RxReady+0x30>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	5ca2      	ldrb	r2, [r4, r2]
 8002d82:	0021      	movs	r1, r4
 8002d84:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8002d86:	23ff      	movs	r3, #255	; 0xff
 8002d88:	5563      	strb	r3, [r4, r5]

  }
  return USBD_OK;
}
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	bd70      	pop	{r4, r5, r6, pc}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	00000201 	.word	0x00000201

08002d94 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8002d94:	2343      	movs	r3, #67	; 0x43
 8002d96:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002d98:	4800      	ldr	r0, [pc, #0]	; (8002d9c <USBD_CDC_GetFSCfgDesc+0x8>)
 8002d9a:	4770      	bx	lr
 8002d9c:	2000004c 	.word	0x2000004c

08002da0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8002da0:	2343      	movs	r3, #67	; 0x43
 8002da2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002da4:	4800      	ldr	r0, [pc, #0]	; (8002da8 <USBD_CDC_GetHSCfgDesc+0x8>)
 8002da6:	4770      	bx	lr
 8002da8:	20000090 	.word	0x20000090

08002dac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8002dac:	2343      	movs	r3, #67	; 0x43
 8002dae:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002db0:	4800      	ldr	r0, [pc, #0]	; (8002db4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002db2:	4770      	bx	lr
 8002db4:	200000e0 	.word	0x200000e0

08002db8 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8002db8:	230a      	movs	r3, #10
 8002dba:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8002dbc:	4800      	ldr	r0, [pc, #0]	; (8002dc0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002dbe:	4770      	bx	lr
 8002dc0:	200000d4 	.word	0x200000d4

08002dc4 <USBD_CDC_DataOut>:
{
 8002dc4:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002dc6:	26ae      	movs	r6, #174	; 0xae
 8002dc8:	00b6      	lsls	r6, r6, #2
{
 8002dca:	0004      	movs	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002dcc:	5985      	ldr	r5, [r0, r6]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8002dce:	f000 ff7b 	bl	8003cc8 <USBD_LL_GetRxDataSize>
 8002dd2:	2383      	movs	r3, #131	; 0x83
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	50e8      	str	r0, [r5, r3]
  if (pdev->pClassData != NULL)
 8002dd8:	59a3      	ldr	r3, [r4, r6]
    return USBD_FAIL;
 8002dda:	2002      	movs	r0, #2
  if (pdev->pClassData != NULL)
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <USBD_CDC_DataOut+0x32>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002de0:	2383      	movs	r3, #131	; 0x83
 8002de2:	2281      	movs	r2, #129	; 0x81
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	18e9      	adds	r1, r5, r3
 8002de8:	33b0      	adds	r3, #176	; 0xb0
 8002dea:	58e3      	ldr	r3, [r4, r3]
 8002dec:	0092      	lsls	r2, r2, #2
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	58a8      	ldr	r0, [r5, r2]
 8002df2:	4798      	blx	r3
    return USBD_OK;
 8002df4:	2000      	movs	r0, #0
}
 8002df6:	bd70      	pop	{r4, r5, r6, pc}

08002df8 <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002df8:	23ae      	movs	r3, #174	; 0xae
{
 8002dfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	58c3      	ldr	r3, [r0, r3]
{
 8002e00:	0006      	movs	r6, r0
 8002e02:	000f      	movs	r7, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002e04:	9301      	str	r3, [sp, #4]
    return USBD_FAIL;
 8002e06:	2002      	movs	r0, #2
  if (pdev->pClassData != NULL)
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d018      	beq.n	8002e3e <USBD_CDC_DataIn+0x46>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8002e0c:	2514      	movs	r5, #20
 8002e0e:	434d      	muls	r5, r1
 8002e10:	1975      	adds	r5, r6, r5
 8002e12:	69e8      	ldr	r0, [r5, #28]
 8002e14:	2800      	cmp	r0, #0
 8002e16:	d013      	beq.n	8002e40 <USBD_CDC_DataIn+0x48>
 8002e18:	2228      	movs	r2, #40	; 0x28
 8002e1a:	23b0      	movs	r3, #176	; 0xb0
 8002e1c:	434a      	muls	r2, r1
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	58f3      	ldr	r3, [r6, r3]
 8002e22:	189b      	adds	r3, r3, r2
 8002e24:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002e26:	f7fd fa09 	bl	800023c <__aeabi_uidivmod>
 8002e2a:	1e0c      	subs	r4, r1, #0
 8002e2c:	d108      	bne.n	8002e40 <USBD_CDC_DataIn+0x48>
      pdev->ep_in[epnum].total_length = 0U;
 8002e2e:	61e9      	str	r1, [r5, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8002e30:	000b      	movs	r3, r1
 8002e32:	000a      	movs	r2, r1
 8002e34:	0030      	movs	r0, r6
 8002e36:	0039      	movs	r1, r7
 8002e38:	f000 ff26 	bl	8003c88 <USBD_LL_Transmit>
    return USBD_OK;
 8002e3c:	0020      	movs	r0, r4
}
 8002e3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8002e40:	2385      	movs	r3, #133	; 0x85
 8002e42:	2000      	movs	r0, #0
 8002e44:	9a01      	ldr	r2, [sp, #4]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	50d0      	str	r0, [r2, r3]
 8002e4a:	e7f8      	b.n	8002e3e <USBD_CDC_DataIn+0x46>

08002e4c <USBD_CDC_Setup>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002e4c:	23ae      	movs	r3, #174	; 0xae
{
 8002e4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	58c7      	ldr	r7, [r0, r3]
  uint8_t ifalt = 0U;
 8002e54:	466b      	mov	r3, sp
  uint16_t status_info = 0U;
 8002e56:	466a      	mov	r2, sp
{
 8002e58:	000e      	movs	r6, r1
  uint8_t ifalt = 0U;
 8002e5a:	1d59      	adds	r1, r3, #5
 8002e5c:	2300      	movs	r3, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e5e:	2460      	movs	r4, #96	; 0x60
{
 8002e60:	0005      	movs	r5, r0
  uint16_t status_info = 0U;
 8002e62:	1d90      	adds	r0, r2, #6
  uint8_t ifalt = 0U;
 8002e64:	700b      	strb	r3, [r1, #0]
  uint16_t status_info = 0U;
 8002e66:	8003      	strh	r3, [r0, #0]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e68:	7833      	ldrb	r3, [r6, #0]
 8002e6a:	401c      	ands	r4, r3
 8002e6c:	d029      	beq.n	8002ec2 <USBD_CDC_Setup+0x76>
 8002e6e:	2c20      	cmp	r4, #32
 8002e70:	d142      	bne.n	8002ef8 <USBD_CDC_Setup+0xac>
      if (req->wLength)
 8002e72:	88f4      	ldrh	r4, [r6, #6]
 8002e74:	7870      	ldrb	r0, [r6, #1]
 8002e76:	2c00      	cmp	r4, #0
 8002e78:	d01b      	beq.n	8002eb2 <USBD_CDC_Setup+0x66>
        if (req->bmRequest & 0x80U)
 8002e7a:	b25b      	sxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	da0c      	bge.n	8002e9a <USBD_CDC_Setup+0x4e>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002e80:	23af      	movs	r3, #175	; 0xaf
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	58eb      	ldr	r3, [r5, r3]
 8002e86:	0022      	movs	r2, r4
 8002e88:	0039      	movs	r1, r7
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002e8e:	0039      	movs	r1, r7
 8002e90:	88f2      	ldrh	r2, [r6, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8002e92:	0028      	movs	r0, r5
 8002e94:	f000 fc9a 	bl	80037cc <USBD_CtlSendData>
 8002e98:	e009      	b.n	8002eae <USBD_CDC_Setup+0x62>
          hcdc->CmdOpCode = req->bRequest;
 8002e9a:	2380      	movs	r3, #128	; 0x80
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	54f8      	strb	r0, [r7, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8002ea0:	4b18      	ldr	r3, [pc, #96]	; (8002f04 <USBD_CDC_Setup+0xb8>)
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002ea2:	0022      	movs	r2, r4
          hcdc->CmdLength = (uint8_t)req->wLength;
 8002ea4:	54fc      	strb	r4, [r7, r3]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002ea6:	0039      	movs	r1, r7
 8002ea8:	0028      	movs	r0, r5
 8002eaa:	f000 fca5 	bl	80037f8 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8002eae:	2000      	movs	r0, #0
}
 8002eb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002eb2:	23af      	movs	r3, #175	; 0xaf
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	58eb      	ldr	r3, [r5, r3]
 8002eb8:	0022      	movs	r2, r4
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	0031      	movs	r1, r6
 8002ebe:	4798      	blx	r3
 8002ec0:	e7f5      	b.n	8002eae <USBD_CDC_Setup+0x62>
      switch (req->bRequest)
 8002ec2:	7877      	ldrb	r7, [r6, #1]
 8002ec4:	2f0a      	cmp	r7, #10
 8002ec6:	d00b      	beq.n	8002ee0 <USBD_CDC_Setup+0x94>
 8002ec8:	2f0b      	cmp	r7, #11
 8002eca:	d010      	beq.n	8002eee <USBD_CDC_Setup+0xa2>
 8002ecc:	2f00      	cmp	r7, #0
 8002ece:	d113      	bne.n	8002ef8 <USBD_CDC_Setup+0xac>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002ed0:	23a7      	movs	r3, #167	; 0xa7
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	5ceb      	ldrb	r3, [r5, r3]
 8002ed6:	2b03      	cmp	r3, #3
 8002ed8:	d10e      	bne.n	8002ef8 <USBD_CDC_Setup+0xac>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8002eda:	2202      	movs	r2, #2
 8002edc:	0001      	movs	r1, r0
 8002ede:	e7d8      	b.n	8002e92 <USBD_CDC_Setup+0x46>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002ee0:	23a7      	movs	r3, #167	; 0xa7
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	5ceb      	ldrb	r3, [r5, r3]
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d106      	bne.n	8002ef8 <USBD_CDC_Setup+0xac>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8002eea:	2201      	movs	r2, #1
 8002eec:	e7d1      	b.n	8002e92 <USBD_CDC_Setup+0x46>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8002eee:	23a7      	movs	r3, #167	; 0xa7
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	5ceb      	ldrb	r3, [r5, r3]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d0da      	beq.n	8002eae <USBD_CDC_Setup+0x62>
          USBD_CtlError(pdev, req);
 8002ef8:	0028      	movs	r0, r5
 8002efa:	0031      	movs	r1, r6
 8002efc:	f000 fc3f 	bl	800377e <USBD_CtlError>
          ret = USBD_FAIL;
 8002f00:	2002      	movs	r0, #2
          break;
 8002f02:	e7d5      	b.n	8002eb0 <USBD_CDC_Setup+0x64>
 8002f04:	00000201 	.word	0x00000201

08002f08 <USBD_CDC_DeInit>:
{
 8002f08:	b570      	push	{r4, r5, r6, lr}
 8002f0a:	0004      	movs	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002f0c:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8002f0e:	2181      	movs	r1, #129	; 0x81
 8002f10:	f000 fe64 	bl	8003bdc <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002f14:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002f16:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002f18:	0020      	movs	r0, r4
 8002f1a:	f000 fe5f 	bl	8003bdc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8002f1e:	0023      	movs	r3, r4
  if (pdev->pClassData != NULL)
 8002f20:	26ae      	movs	r6, #174	; 0xae
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8002f22:	33fc      	adds	r3, #252	; 0xfc
 8002f24:	671d      	str	r5, [r3, #112]	; 0x70
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8002f26:	2182      	movs	r1, #130	; 0x82
 8002f28:	0020      	movs	r0, r4
  if (pdev->pClassData != NULL)
 8002f2a:	00b6      	lsls	r6, r6, #2
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8002f2c:	f000 fe56 	bl	8003bdc <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8002f30:	59a3      	ldr	r3, [r4, r6]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8002f32:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8002f34:	42ab      	cmp	r3, r5
 8002f36:	d008      	beq.n	8002f4a <USBD_CDC_DeInit+0x42>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002f38:	23af      	movs	r3, #175	; 0xaf
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	58e3      	ldr	r3, [r4, r3]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002f42:	59a0      	ldr	r0, [r4, r6]
 8002f44:	f000 fecc 	bl	8003ce0 <USBD_static_free>
    pdev->pClassData = NULL;
 8002f48:	51a5      	str	r5, [r4, r6]
}
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	bd70      	pop	{r4, r5, r6, pc}

08002f4e <USBD_CDC_Init>:
{
 8002f4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f50:	0006      	movs	r6, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002f52:	7c03      	ldrb	r3, [r0, #16]
{
 8002f54:	0004      	movs	r4, r0
 8002f56:	36fc      	adds	r6, #252	; 0xfc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d13b      	bne.n	8002fd4 <USBD_CDC_Init+0x86>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	2202      	movs	r2, #2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	2181      	movs	r1, #129	; 0x81
 8002f64:	f000 fe28 	bl	8003bb8 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002f68:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002f6a:	2380      	movs	r3, #128	; 0x80
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002f6c:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002f6e:	009b      	lsls	r3, r3, #2
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002f70:	0029      	movs	r1, r5
 8002f72:	2202      	movs	r2, #2
 8002f74:	0020      	movs	r0, r4
 8002f76:	f000 fe1f 	bl	8003bb8 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002f7a:	6735      	str	r5, [r6, #112]	; 0x70
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002f7c:	2308      	movs	r3, #8
 8002f7e:	2203      	movs	r2, #3
 8002f80:	2182      	movs	r1, #130	; 0x82
 8002f82:	0020      	movs	r0, r4
 8002f84:	f000 fe18 	bl	8003bb8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8002f88:	2601      	movs	r6, #1
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8002f8a:	2087      	movs	r0, #135	; 0x87
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8002f8c:	6426      	str	r6, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8002f8e:	0080      	lsls	r0, r0, #2
 8002f90:	f000 fea2 	bl	8003cd8 <USBD_static_malloc>
 8002f94:	23ae      	movs	r3, #174	; 0xae
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	0005      	movs	r5, r0
 8002f9a:	50e0      	str	r0, [r4, r3]
    ret = 1U;
 8002f9c:	0030      	movs	r0, r6
  if (pdev->pClassData == NULL)
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	d017      	beq.n	8002fd2 <USBD_CDC_Init+0x84>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	58e3      	ldr	r3, [r4, r3]
    hcdc->TxState = 0U;
 8002fa6:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4798      	blx	r3
    hcdc->TxState = 0U;
 8002fac:	2385      	movs	r3, #133	; 0x85
 8002fae:	2281      	movs	r2, #129	; 0x81
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	50ef      	str	r7, [r5, r3]
    hcdc->RxState = 0U;
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	50ef      	str	r7, [r5, r3]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002fb8:	7c23      	ldrb	r3, [r4, #16]
 8002fba:	0092      	lsls	r2, r2, #2
 8002fbc:	9301      	str	r3, [sp, #4]
 8002fbe:	42bb      	cmp	r3, r7
 8002fc0:	d111      	bne.n	8002fe6 <USBD_CDC_Init+0x98>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	58aa      	ldr	r2, [r5, r2]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	0031      	movs	r1, r6
 8002fca:	0020      	movs	r0, r4
 8002fcc:	f000 fe6c 	bl	8003ca8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8002fd0:	9801      	ldr	r0, [sp, #4]
}
 8002fd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002fd4:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002fd6:	2340      	movs	r3, #64	; 0x40
 8002fd8:	2202      	movs	r2, #2
 8002fda:	2181      	movs	r1, #129	; 0x81
 8002fdc:	f000 fdec 	bl	8003bb8 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002fe0:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002fe2:	2340      	movs	r3, #64	; 0x40
 8002fe4:	e7c4      	b.n	8002f70 <USBD_CDC_Init+0x22>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002fe6:	2340      	movs	r3, #64	; 0x40
 8002fe8:	58aa      	ldr	r2, [r5, r2]
 8002fea:	0031      	movs	r1, r6
 8002fec:	0020      	movs	r0, r4
 8002fee:	f000 fe5b 	bl	8003ca8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8002ff2:	0038      	movs	r0, r7
 8002ff4:	e7ed      	b.n	8002fd2 <USBD_CDC_Init+0x84>

08002ff6 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 8002ff6:	2302      	movs	r3, #2

  if (fops != NULL)
 8002ff8:	2900      	cmp	r1, #0
 8002ffa:	d003      	beq.n	8003004 <USBD_CDC_RegisterInterface+0xe>
  {
    pdev->pUserData = fops;
 8002ffc:	23af      	movs	r3, #175	; 0xaf
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	50c1      	str	r1, [r0, r3]
    ret = USBD_OK;
 8003002:	2300      	movs	r3, #0
  }

  return ret;
}
 8003004:	0018      	movs	r0, r3
 8003006:	4770      	bx	lr

08003008 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003008:	23ae      	movs	r3, #174	; 0xae
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	58c3      	ldr	r3, [r0, r3]

  hcdc->TxBuffer = pbuff;
 800300e:	2082      	movs	r0, #130	; 0x82
 8003010:	0080      	lsls	r0, r0, #2
 8003012:	5019      	str	r1, [r3, r0]
  hcdc->TxLength = length;
 8003014:	2184      	movs	r1, #132	; 0x84
 8003016:	0089      	lsls	r1, r1, #2

  return USBD_OK;
}
 8003018:	2000      	movs	r0, #0
  hcdc->TxLength = length;
 800301a:	505a      	str	r2, [r3, r1]
}
 800301c:	4770      	bx	lr

0800301e <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800301e:	23ae      	movs	r3, #174	; 0xae
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	58c2      	ldr	r2, [r0, r3]
 8003024:	3bb4      	subs	r3, #180	; 0xb4

  return USBD_OK;
}
 8003026:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8003028:	50d1      	str	r1, [r2, r3]
}
 800302a:	4770      	bx	lr

0800302c <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800302c:	23ae      	movs	r3, #174	; 0xae
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	58c2      	ldr	r2, [r0, r3]
{
 8003032:	b510      	push	{r4, lr}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8003034:	2302      	movs	r3, #2
  if (pdev->pClassData != NULL)
 8003036:	2a00      	cmp	r2, #0
 8003038:	d012      	beq.n	8003060 <USBD_CDC_TransmitPacket+0x34>
    if (hcdc->TxState == 0U)
 800303a:	2185      	movs	r1, #133	; 0x85
 800303c:	0089      	lsls	r1, r1, #2
 800303e:	5854      	ldr	r4, [r2, r1]
 8003040:	3b01      	subs	r3, #1
 8003042:	2c00      	cmp	r4, #0
 8003044:	d10c      	bne.n	8003060 <USBD_CDC_TransmitPacket+0x34>
      hcdc->TxState = 1U;
 8003046:	5053      	str	r3, [r2, r1]
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003048:	2384      	movs	r3, #132	; 0x84
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800304e:	390c      	subs	r1, #12
 8003050:	5852      	ldr	r2, [r2, r1]
 8003052:	3988      	subs	r1, #136	; 0x88
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003054:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003056:	39ff      	subs	r1, #255	; 0xff
 8003058:	b29b      	uxth	r3, r3
 800305a:	f000 fe15 	bl	8003c88 <USBD_LL_Transmit>
      return USBD_OK;
 800305e:	0023      	movs	r3, r4
  }
}
 8003060:	0018      	movs	r0, r3
 8003062:	bd10      	pop	{r4, pc}

08003064 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003064:	23ae      	movs	r3, #174	; 0xae
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	58c2      	ldr	r2, [r0, r3]
{
 800306a:	b510      	push	{r4, lr}
    }
    return USBD_OK;
  }
  else
  {
    return USBD_FAIL;
 800306c:	2402      	movs	r4, #2
  if (pdev->pClassData != NULL)
 800306e:	2a00      	cmp	r2, #0
 8003070:	d008      	beq.n	8003084 <USBD_CDC_ReceivePacket+0x20>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003072:	7c04      	ldrb	r4, [r0, #16]
 8003074:	3bb4      	subs	r3, #180	; 0xb4
 8003076:	58d2      	ldr	r2, [r2, r3]
 8003078:	2c00      	cmp	r4, #0
 800307a:	d105      	bne.n	8003088 <USBD_CDC_ReceivePacket+0x24>
      USBD_LL_PrepareReceive(pdev,
 800307c:	3b04      	subs	r3, #4
 800307e:	2101      	movs	r1, #1
 8003080:	f000 fe12 	bl	8003ca8 <USBD_LL_PrepareReceive>
  }
}
 8003084:	0020      	movs	r0, r4
 8003086:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8003088:	2340      	movs	r3, #64	; 0x40
 800308a:	2101      	movs	r1, #1
 800308c:	f000 fe0c 	bl	8003ca8 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8003090:	2400      	movs	r4, #0
 8003092:	e7f7      	b.n	8003084 <USBD_CDC_ReceivePacket+0x20>

08003094 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003094:	b510      	push	{r4, lr}
  if (pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8003096:	2302      	movs	r3, #2
  if (pdev == NULL)
 8003098:	2800      	cmp	r0, #0
 800309a:	d013      	beq.n	80030c4 <USBD_Init+0x30>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800309c:	23ad      	movs	r3, #173	; 0xad
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	58c4      	ldr	r4, [r0, r3]
 80030a2:	2c00      	cmp	r4, #0
 80030a4:	d001      	beq.n	80030aa <USBD_Init+0x16>
  {
    pdev->pClass = NULL;
 80030a6:	2400      	movs	r4, #0
 80030a8:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80030aa:	2900      	cmp	r1, #0
 80030ac:	d002      	beq.n	80030b4 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 80030ae:	23ac      	movs	r3, #172	; 0xac
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80030b4:	23a7      	movs	r3, #167	; 0xa7
 80030b6:	2101      	movs	r1, #1
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 80030bc:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80030be:	f000 fd2b 	bl	8003b18 <USBD_LL_Init>

  return USBD_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	0018      	movs	r0, r3
 80030c6:	bd10      	pop	{r4, pc}

080030c8 <USBD_RegisterClass>:
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80030c8:	2302      	movs	r3, #2
  if (pclass != NULL)
 80030ca:	2900      	cmp	r1, #0
 80030cc:	d003      	beq.n	80030d6 <USBD_RegisterClass+0xe>
    pdev->pClass = pclass;
 80030ce:	23ad      	movs	r3, #173	; 0xad
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	50c1      	str	r1, [r0, r3]
    status = USBD_OK;
 80030d4:	2300      	movs	r3, #0
  }

  return status;
}
 80030d6:	0018      	movs	r0, r3
 80030d8:	4770      	bx	lr

080030da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80030da:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80030dc:	f000 fd5c 	bl	8003b98 <USBD_LL_Start>

  return USBD_OK;
}
 80030e0:	2000      	movs	r0, #0
 80030e2:	bd10      	pop	{r4, pc}

080030e4 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80030e4:	23ad      	movs	r3, #173	; 0xad
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	58c3      	ldr	r3, [r0, r3]
{
 80030ea:	b510      	push	{r4, lr}
  if (pdev->pClass != NULL)
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <USBD_SetClassConfig+0x10>
  USBD_StatusTypeDef ret = USBD_FAIL;
 80030f0:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 80030f2:	bd10      	pop	{r4, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4798      	blx	r3
 80030f8:	2800      	cmp	r0, #0
 80030fa:	d0fa      	beq.n	80030f2 <USBD_SetClassConfig+0xe>
 80030fc:	e7f8      	b.n	80030f0 <USBD_SetClassConfig+0xc>

080030fe <USBD_ClrClassConfig>:
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80030fe:	23ad      	movs	r3, #173	; 0xad
{
 8003100:	b510      	push	{r4, lr}
  pdev->pClass->DeInit(pdev, cfgidx);
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	58c3      	ldr	r3, [r0, r3]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	4798      	blx	r3

  return USBD_OK;
}
 800310a:	2000      	movs	r0, #0
 800310c:	bd10      	pop	{r4, pc}
	...

08003110 <USBD_LL_SetupStage>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003110:	23aa      	movs	r3, #170	; 0xaa
 8003112:	009b      	lsls	r3, r3, #2
{
 8003114:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003116:	18c5      	adds	r5, r0, r3
{
 8003118:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800311a:	0028      	movs	r0, r5
 800311c:	f000 fb1b 	bl	8003756 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003120:	23a5      	movs	r3, #165	; 0xa5
 8003122:	2201      	movs	r2, #1
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8003128:	4b11      	ldr	r3, [pc, #68]	; (8003170 <USBD_LL_SetupStage+0x60>)
 800312a:	5ae2      	ldrh	r2, [r4, r3]
 800312c:	3b16      	subs	r3, #22
 800312e:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8003130:	3310      	adds	r3, #16
 8003132:	5ce1      	ldrb	r1, [r4, r3]
 8003134:	231f      	movs	r3, #31
 8003136:	400b      	ands	r3, r1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d00f      	beq.n	800315c <USBD_LL_SetupStage+0x4c>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d007      	beq.n	8003150 <USBD_LL_SetupStage+0x40>
 8003140:	2b02      	cmp	r3, #2
 8003142:	d010      	beq.n	8003166 <USBD_LL_SetupStage+0x56>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003144:	237f      	movs	r3, #127	; 0x7f
 8003146:	0020      	movs	r0, r4
 8003148:	4399      	bics	r1, r3
 800314a:	f000 fd57 	bl	8003bfc <USBD_LL_StallEP>
      break;
 800314e:	e003      	b.n	8003158 <USBD_LL_SetupStage+0x48>
      USBD_StdDevReq(pdev, &pdev->request);
 8003150:	0029      	movs	r1, r5
 8003152:	0020      	movs	r0, r4
 8003154:	f000 f914 	bl	8003380 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8003158:	2000      	movs	r0, #0
 800315a:	bd70      	pop	{r4, r5, r6, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800315c:	0029      	movs	r1, r5
 800315e:	0020      	movs	r0, r4
 8003160:	f000 fa3c 	bl	80035dc <USBD_StdItfReq>
      break;
 8003164:	e7f8      	b.n	8003158 <USBD_LL_SetupStage+0x48>
      USBD_StdEPReq(pdev, &pdev->request);
 8003166:	0029      	movs	r1, r5
 8003168:	0020      	movs	r0, r4
 800316a:	f000 fa61 	bl	8003630 <USBD_StdEPReq>
      break;
 800316e:	e7f3      	b.n	8003158 <USBD_LL_SetupStage+0x48>
 8003170:	000002ae 	.word	0x000002ae

08003174 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003174:	b570      	push	{r4, r5, r6, lr}
 8003176:	0004      	movs	r4, r0
 8003178:	0015      	movs	r5, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800317a:	2900      	cmp	r1, #0
 800317c:	d130      	bne.n	80031e0 <USBD_LL_DataOutStage+0x6c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800317e:	23a5      	movs	r3, #165	; 0xa5
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	58c2      	ldr	r2, [r0, r3]
 8003184:	2a03      	cmp	r2, #3
 8003186:	d123      	bne.n	80031d0 <USBD_LL_DataOutStage+0x5c>
    {
      if (pep->rem_length > pep->maxpacket)
 8003188:	0002      	movs	r2, r0
 800318a:	3255      	adds	r2, #85	; 0x55
 800318c:	32ff      	adds	r2, #255	; 0xff
 800318e:	68d3      	ldr	r3, [r2, #12]
 8003190:	6910      	ldr	r0, [r2, #16]
 8003192:	4283      	cmp	r3, r0
 8003194:	d90b      	bls.n	80031ae <USBD_LL_DataOutStage+0x3a>
      {
        pep->rem_length -= pep->maxpacket;
 8003196:	1a1b      	subs	r3, r3, r0
 8003198:	60d3      	str	r3, [r2, #12]

        USBD_CtlContinueRx(pdev, pdata,
 800319a:	b282      	uxth	r2, r0
 800319c:	4298      	cmp	r0, r3
 800319e:	d900      	bls.n	80031a2 <USBD_LL_DataOutStage+0x2e>
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	0029      	movs	r1, r5
 80031a4:	0020      	movs	r0, r4
 80031a6:	f000 fb37 	bl	8003818 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80031aa:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 80031ac:	e016      	b.n	80031dc <USBD_LL_DataOutStage+0x68>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80031ae:	23ad      	movs	r3, #173	; 0xad
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	58e3      	ldr	r3, [r4, r3]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d006      	beq.n	80031c8 <USBD_LL_DataOutStage+0x54>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80031ba:	22a7      	movs	r2, #167	; 0xa7
 80031bc:	0092      	lsls	r2, r2, #2
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80031be:	5ca2      	ldrb	r2, [r4, r2]
 80031c0:	2a03      	cmp	r2, #3
 80031c2:	d101      	bne.n	80031c8 <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 80031c4:	0020      	movs	r0, r4
 80031c6:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80031c8:	0020      	movs	r0, r4
 80031ca:	f000 fb2d 	bl	8003828 <USBD_CtlSendStatus>
 80031ce:	e7ec      	b.n	80031aa <USBD_LL_DataOutStage+0x36>
  return USBD_OK;
 80031d0:	000d      	movs	r5, r1
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80031d2:	2a05      	cmp	r2, #5
 80031d4:	d102      	bne.n	80031dc <USBD_LL_DataOutStage+0x68>
        pdev->ep0_state = USBD_EP0_IDLE;
 80031d6:	50e1      	str	r1, [r4, r3]
        USBD_LL_StallEP(pdev, 0U);
 80031d8:	f000 fd10 	bl	8003bfc <USBD_LL_StallEP>
}
 80031dc:	0028      	movs	r0, r5
 80031de:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 80031e0:	23ad      	movs	r3, #173	; 0xad
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 80031e6:	2502      	movs	r5, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f6      	beq.n	80031dc <USBD_LL_DataOutStage+0x68>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80031ee:	22a7      	movs	r2, #167	; 0xa7
 80031f0:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 80031f2:	5c82      	ldrb	r2, [r0, r2]
 80031f4:	2a03      	cmp	r2, #3
 80031f6:	d1f1      	bne.n	80031dc <USBD_LL_DataOutStage+0x68>
    pdev->pClass->DataOut(pdev, epnum);
 80031f8:	4798      	blx	r3
 80031fa:	e7d6      	b.n	80031aa <USBD_LL_DataOutStage+0x36>

080031fc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80031fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fe:	000d      	movs	r5, r1
 8003200:	0004      	movs	r4, r0
 8003202:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003204:	2d00      	cmp	r5, #0
 8003206:	d14b      	bne.n	80032a0 <USBD_LL_DataInStage+0xa4>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003208:	23a5      	movs	r3, #165	; 0xa5
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	58c3      	ldr	r3, [r0, r3]
 800320e:	2b02      	cmp	r3, #2
 8003210:	d13f      	bne.n	8003292 <USBD_LL_DataInStage+0x96>
    {
      if (pep->rem_length > pep->maxpacket)
 8003212:	6a02      	ldr	r2, [r0, #32]
 8003214:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003216:	42b2      	cmp	r2, r6
 8003218:	d912      	bls.n	8003240 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 800321a:	1b92      	subs	r2, r2, r6
 800321c:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800321e:	b292      	uxth	r2, r2
 8003220:	f000 fae2 	bl	80037e8 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003224:	002b      	movs	r3, r5
 8003226:	002a      	movs	r2, r5
 8003228:	0029      	movs	r1, r5
 800322a:	0020      	movs	r0, r4
 800322c:	f000 fd3c 	bl	8003ca8 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003230:	23a8      	movs	r3, #168	; 0xa8
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	5ce2      	ldrb	r2, [r4, r3]
 8003236:	2000      	movs	r0, #0
 8003238:	2a01      	cmp	r2, #1
 800323a:	d100      	bne.n	800323e <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800323c:	54e0      	strb	r0, [r4, r3]
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800323e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003240:	69c7      	ldr	r7, [r0, #28]
 8003242:	0031      	movs	r1, r6
 8003244:	0038      	movs	r0, r7
 8003246:	f7fc fff9 	bl	800023c <__aeabi_uidivmod>
 800324a:	1e0d      	subs	r5, r1, #0
 800324c:	d10c      	bne.n	8003268 <USBD_LL_DataInStage+0x6c>
 800324e:	42be      	cmp	r6, r7
 8003250:	d80a      	bhi.n	8003268 <USBD_LL_DataInStage+0x6c>
            (pep->total_length < pdev->ep0_data_len))
 8003252:	26a6      	movs	r6, #166	; 0xa6
 8003254:	00b6      	lsls	r6, r6, #2
            (pep->total_length >= pep->maxpacket) &&
 8003256:	59a3      	ldr	r3, [r4, r6]
 8003258:	429f      	cmp	r7, r3
 800325a:	d205      	bcs.n	8003268 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800325c:	000a      	movs	r2, r1
 800325e:	0020      	movs	r0, r4
 8003260:	f000 fac2 	bl	80037e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003264:	51a5      	str	r5, [r4, r6]
 8003266:	e7dd      	b.n	8003224 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003268:	23ad      	movs	r3, #173	; 0xad
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	58e3      	ldr	r3, [r4, r3]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d006      	beq.n	8003282 <USBD_LL_DataInStage+0x86>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003274:	22a7      	movs	r2, #167	; 0xa7
 8003276:	0092      	lsls	r2, r2, #2
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003278:	5ca2      	ldrb	r2, [r4, r2]
 800327a:	2a03      	cmp	r2, #3
 800327c:	d101      	bne.n	8003282 <USBD_LL_DataInStage+0x86>
            pdev->pClass->EP0_TxSent(pdev);
 800327e:	0020      	movs	r0, r4
 8003280:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8003282:	2180      	movs	r1, #128	; 0x80
 8003284:	0020      	movs	r0, r4
 8003286:	f000 fcb9 	bl	8003bfc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800328a:	0020      	movs	r0, r4
 800328c:	f000 fad8 	bl	8003840 <USBD_CtlReceiveStatus>
 8003290:	e7ce      	b.n	8003230 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003292:	2204      	movs	r2, #4
 8003294:	4393      	bics	r3, r2
 8003296:	d1cb      	bne.n	8003230 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8003298:	2180      	movs	r1, #128	; 0x80
 800329a:	f000 fcaf 	bl	8003bfc <USBD_LL_StallEP>
 800329e:	e7c7      	b.n	8003230 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 80032a0:	23ad      	movs	r3, #173	; 0xad
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 80032a6:	2002      	movs	r0, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0c7      	beq.n	800323e <USBD_LL_DataInStage+0x42>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80032ae:	22a7      	movs	r2, #167	; 0xa7
 80032b0:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 80032b2:	5ca2      	ldrb	r2, [r4, r2]
 80032b4:	2a03      	cmp	r2, #3
 80032b6:	d1c2      	bne.n	800323e <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum);
 80032b8:	0029      	movs	r1, r5
 80032ba:	0020      	movs	r0, r4
 80032bc:	4798      	blx	r3
  return USBD_OK;
 80032be:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80032c0:	e7bd      	b.n	800323e <USBD_LL_DataInStage+0x42>

080032c2 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80032c2:	2200      	movs	r2, #0
{
 80032c4:	b570      	push	{r4, r5, r6, lr}
 80032c6:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80032c8:	0011      	movs	r1, r2
 80032ca:	2340      	movs	r3, #64	; 0x40
 80032cc:	f000 fc74 	bl	8003bb8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80032d0:	0023      	movs	r3, r4
 80032d2:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80032d4:	2640      	movs	r6, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80032d6:	33fc      	adds	r3, #252	; 0xfc
 80032d8:	65dd      	str	r5, [r3, #92]	; 0x5c
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80032da:	669e      	str	r6, [r3, #104]	; 0x68

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80032dc:	2180      	movs	r1, #128	; 0x80
 80032de:	0033      	movs	r3, r6
 80032e0:	2200      	movs	r2, #0
 80032e2:	0020      	movs	r0, r4
 80032e4:	f000 fc68 	bl	8003bb8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80032e8:	23a7      	movs	r3, #167	; 0xa7
  pdev->ep0_state = USBD_EP0_IDLE;
 80032ea:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 80032ec:	009b      	lsls	r3, r3, #2
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80032ee:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80032f0:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80032f2:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80032f4:	3b08      	subs	r3, #8
 80032f6:	50e1      	str	r1, [r4, r3]
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;
 80032f8:	3310      	adds	r3, #16
  pdev->dev_config = 0U;
 80032fa:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80032fc:	50e1      	str	r1, [r4, r3]

  if (pdev->pClassData)
 80032fe:	3314      	adds	r3, #20
 8003300:	58e3      	ldr	r3, [r4, r3]
 8003302:	428b      	cmp	r3, r1
 8003304:	d005      	beq.n	8003312 <USBD_LL_Reset+0x50>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003306:	23ad      	movs	r3, #173	; 0xad
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	58e3      	ldr	r3, [r4, r3]
 800330c:	0020      	movs	r0, r4
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003312:	2000      	movs	r0, #0
 8003314:	bd70      	pop	{r4, r5, r6, pc}

08003316 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003316:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003318:	2000      	movs	r0, #0
 800331a:	4770      	bx	lr

0800331c <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800331c:	23a7      	movs	r3, #167	; 0xa7
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	5cc1      	ldrb	r1, [r0, r3]
 8003322:	4a03      	ldr	r2, [pc, #12]	; (8003330 <USBD_LL_Suspend+0x14>)
 8003324:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003326:	2204      	movs	r2, #4
 8003328:	54c2      	strb	r2, [r0, r3]

  return USBD_OK;
}
 800332a:	2000      	movs	r0, #0
 800332c:	4770      	bx	lr
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	0000029d 	.word	0x0000029d

08003334 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003334:	23a7      	movs	r3, #167	; 0xa7
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	5cc2      	ldrb	r2, [r0, r3]
 800333a:	2a04      	cmp	r2, #4
 800333c:	d102      	bne.n	8003344 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 800333e:	4a02      	ldr	r2, [pc, #8]	; (8003348 <USBD_LL_Resume+0x14>)
 8003340:	5c82      	ldrb	r2, [r0, r2]
 8003342:	54c2      	strb	r2, [r0, r3]
  }

  return USBD_OK;
}
 8003344:	2000      	movs	r0, #0
 8003346:	4770      	bx	lr
 8003348:	0000029d 	.word	0x0000029d

0800334c <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800334c:	23a7      	movs	r3, #167	; 0xa7
{
 800334e:	b510      	push	{r4, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	5cc3      	ldrb	r3, [r0, r3]
 8003354:	2b03      	cmp	r3, #3
 8003356:	d106      	bne.n	8003366 <USBD_LL_SOF+0x1a>
  {
    if (pdev->pClass->SOF != NULL)
 8003358:	23ad      	movs	r3, #173	; 0xad
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	58c3      	ldr	r3, [r0, r3]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d000      	beq.n	8003366 <USBD_LL_SOF+0x1a>
    {
      pdev->pClass->SOF(pdev);
 8003364:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8003366:	2000      	movs	r0, #0
 8003368:	bd10      	pop	{r4, pc}

0800336a <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 800336a:	b510      	push	{r4, lr}
 800336c:	0004      	movs	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800336e:	2180      	movs	r1, #128	; 0x80
 8003370:	f000 fc44 	bl	8003bfc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003374:	2100      	movs	r1, #0
 8003376:	0020      	movs	r0, r4
 8003378:	f000 fc40 	bl	8003bfc <USBD_LL_StallEP>
}
 800337c:	bd10      	pop	{r4, pc}
	...

08003380 <USBD_StdDevReq>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003380:	2260      	movs	r2, #96	; 0x60
 8003382:	780b      	ldrb	r3, [r1, #0]
{
 8003384:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003386:	4013      	ands	r3, r2
{
 8003388:	0004      	movs	r4, r0
 800338a:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800338c:	2b20      	cmp	r3, #32
 800338e:	d014      	beq.n	80033ba <USBD_StdDevReq+0x3a>
 8003390:	2b40      	cmp	r3, #64	; 0x40
 8003392:	d012      	beq.n	80033ba <USBD_StdDevReq+0x3a>
 8003394:	2b00      	cmp	r3, #0
 8003396:	d000      	beq.n	800339a <USBD_StdDevReq+0x1a>
 8003398:	e090      	b.n	80034bc <USBD_StdDevReq+0x13c>
      switch (req->bRequest)
 800339a:	7848      	ldrb	r0, [r1, #1]
 800339c:	2809      	cmp	r0, #9
 800339e:	d900      	bls.n	80033a2 <USBD_StdDevReq+0x22>
 80033a0:	e08c      	b.n	80034bc <USBD_StdDevReq+0x13c>
 80033a2:	f7fc febb 	bl	800011c <__gnu_thumb1_case_uhi>
 80033a6:	00e9      	.short	0x00e9
 80033a8:	008b0107 	.word	0x008b0107
 80033ac:	008b00ff 	.word	0x008b00ff
 80033b0:	0013007d 	.word	0x0013007d
 80033b4:	00d3008b 	.word	0x00d3008b
 80033b8:	009e      	.short	0x009e
      pdev->pClass->Setup(pdev, req);
 80033ba:	23ad      	movs	r3, #173	; 0xad
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	58e3      	ldr	r3, [r4, r3]
 80033c0:	0029      	movs	r1, r5
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	0020      	movs	r0, r4
 80033c6:	4798      	blx	r3
}
 80033c8:	2000      	movs	r0, #0
 80033ca:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  uint16_t len = 0U;
 80033cc:	466b      	mov	r3, sp
 80033ce:	1d9e      	adds	r6, r3, #6
 80033d0:	2300      	movs	r3, #0
 80033d2:	8033      	strh	r3, [r6, #0]
  switch (req->wValue >> 8)
 80033d4:	884b      	ldrh	r3, [r1, #2]
 80033d6:	0a18      	lsrs	r0, r3, #8
 80033d8:	3801      	subs	r0, #1
 80033da:	2806      	cmp	r0, #6
 80033dc:	d86e      	bhi.n	80034bc <USBD_StdDevReq+0x13c>
 80033de:	f7fc fe93 	bl	8000108 <__gnu_thumb1_case_uqi>
 80033e2:	2204      	.short	0x2204
 80033e4:	4a6d6d30 	.word	0x4a6d6d30
 80033e8:	54          	.byte	0x54
 80033e9:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80033ea:	23ac      	movs	r3, #172	; 0xac
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	58e3      	ldr	r3, [r4, r3]
 80033f0:	7c20      	ldrb	r0, [r4, #16]
 80033f2:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80033f4:	0031      	movs	r1, r6
 80033f6:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80033f8:	8831      	ldrh	r1, [r6, #0]
 80033fa:	2900      	cmp	r1, #0
 80033fc:	d00c      	beq.n	8003418 <USBD_StdDevReq+0x98>
 80033fe:	88ea      	ldrh	r2, [r5, #6]
 8003400:	2a00      	cmp	r2, #0
 8003402:	d009      	beq.n	8003418 <USBD_StdDevReq+0x98>
      len = MIN(len, req->wLength);
 8003404:	1c0b      	adds	r3, r1, #0
 8003406:	4291      	cmp	r1, r2
 8003408:	d900      	bls.n	800340c <USBD_StdDevReq+0x8c>
 800340a:	1c13      	adds	r3, r2, #0
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800340c:	0001      	movs	r1, r0
      len = MIN(len, req->wLength);
 800340e:	b29a      	uxth	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003410:	0020      	movs	r0, r4
      len = MIN(len, req->wLength);
 8003412:	8033      	strh	r3, [r6, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003414:	f000 f9da 	bl	80037cc <USBD_CtlSendData>
    if (req->wLength == 0U)
 8003418:	88eb      	ldrh	r3, [r5, #6]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1d4      	bne.n	80033c8 <USBD_StdDevReq+0x48>
        USBD_CtlSendStatus(pdev);
 800341e:	0020      	movs	r0, r4
 8003420:	f000 fa02 	bl	8003828 <USBD_CtlSendStatus>
 8003424:	e7d0      	b.n	80033c8 <USBD_StdDevReq+0x48>
 8003426:	23ad      	movs	r3, #173	; 0xad
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003428:	7c22      	ldrb	r2, [r4, #16]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	58e3      	ldr	r3, [r4, r3]
 800342e:	2a00      	cmp	r2, #0
 8003430:	d105      	bne.n	800343e <USBD_StdDevReq+0xbe>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003434:	0030      	movs	r0, r6
 8003436:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003438:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800343a:	7043      	strb	r3, [r0, #1]
 800343c:	e7dc      	b.n	80033f8 <USBD_StdDevReq+0x78>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	e7f8      	b.n	8003434 <USBD_StdDevReq+0xb4>
      switch ((uint8_t)(req->wValue))
 8003442:	b2d8      	uxtb	r0, r3
 8003444:	2805      	cmp	r0, #5
 8003446:	d839      	bhi.n	80034bc <USBD_StdDevReq+0x13c>
 8003448:	23ac      	movs	r3, #172	; 0xac
 800344a:	009b      	lsls	r3, r3, #2
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800344c:	58e3      	ldr	r3, [r4, r3]
      switch ((uint8_t)(req->wValue))
 800344e:	f7fc fe5b 	bl	8000108 <__gnu_thumb1_case_uqi>
 8003452:	0803      	.short	0x0803
 8003454:	100e0c0a 	.word	0x100e0c0a
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d02e      	beq.n	80034bc <USBD_StdDevReq+0x13c>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800345e:	7c20      	ldrb	r0, [r4, #16]
 8003460:	e7c8      	b.n	80033f4 <USBD_StdDevReq+0x74>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	e7f9      	b.n	800345a <USBD_StdDevReq+0xda>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	e7f7      	b.n	800345a <USBD_StdDevReq+0xda>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	e7f5      	b.n	800345a <USBD_StdDevReq+0xda>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	e7f3      	b.n	800345a <USBD_StdDevReq+0xda>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	e7f1      	b.n	800345a <USBD_StdDevReq+0xda>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003476:	7c23      	ldrb	r3, [r4, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d11f      	bne.n	80034bc <USBD_StdDevReq+0x13c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800347c:	23ad      	movs	r3, #173	; 0xad
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	58e3      	ldr	r3, [r4, r3]
 8003482:	0030      	movs	r0, r6
 8003484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003486:	4798      	blx	r3
 8003488:	e7b6      	b.n	80033f8 <USBD_StdDevReq+0x78>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800348a:	7c23      	ldrb	r3, [r4, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d115      	bne.n	80034bc <USBD_StdDevReq+0x13c>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003490:	23ad      	movs	r3, #173	; 0xad
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	58e3      	ldr	r3, [r4, r3]
 8003496:	0030      	movs	r0, r6
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800349c:	2307      	movs	r3, #7
 800349e:	e7cc      	b.n	800343a <USBD_StdDevReq+0xba>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80034a0:	888b      	ldrh	r3, [r1, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10a      	bne.n	80034bc <USBD_StdDevReq+0x13c>
 80034a6:	88cb      	ldrh	r3, [r1, #6]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d107      	bne.n	80034bc <USBD_StdDevReq+0x13c>
 80034ac:	884e      	ldrh	r6, [r1, #2]
 80034ae:	2e7f      	cmp	r6, #127	; 0x7f
 80034b0:	d804      	bhi.n	80034bc <USBD_StdDevReq+0x13c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80034b2:	25a7      	movs	r5, #167	; 0xa7
 80034b4:	00ad      	lsls	r5, r5, #2
 80034b6:	5d63      	ldrb	r3, [r4, r5]
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d103      	bne.n	80034c4 <USBD_StdDevReq+0x144>
        USBD_CtlError(pdev, req);
 80034bc:	0020      	movs	r0, r4
 80034be:	f7ff ff54 	bl	800336a <USBD_CtlError.constprop.1>
 80034c2:	e781      	b.n	80033c8 <USBD_StdDevReq+0x48>
      pdev->dev_address = dev_addr;
 80034c4:	4b43      	ldr	r3, [pc, #268]	; (80035d4 <USBD_StdDevReq+0x254>)
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80034c6:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 80034c8:	54e1      	strb	r1, [r4, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80034ca:	0020      	movs	r0, r4
 80034cc:	f000 fbcc 	bl	8003c68 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80034d0:	0020      	movs	r0, r4
 80034d2:	f000 f9a9 	bl	8003828 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80034d6:	2302      	movs	r3, #2
      if (dev_addr != 0U)
 80034d8:	2e00      	cmp	r6, #0
 80034da:	d100      	bne.n	80034de <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80034dc:	2301      	movs	r3, #1
 80034de:	5563      	strb	r3, [r4, r5]
 80034e0:	e772      	b.n	80033c8 <USBD_StdDevReq+0x48>
  cfgidx = (uint8_t)(req->wValue);
 80034e2:	7889      	ldrb	r1, [r1, #2]
 80034e4:	4d3c      	ldr	r5, [pc, #240]	; (80035d8 <USBD_StdDevReq+0x258>)
 80034e6:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80034e8:	2901      	cmp	r1, #1
 80034ea:	d8e7      	bhi.n	80034bc <USBD_StdDevReq+0x13c>
    switch (pdev->dev_state)
 80034ec:	23a7      	movs	r3, #167	; 0xa7
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	5ce2      	ldrb	r2, [r4, r3]
 80034f2:	2a02      	cmp	r2, #2
 80034f4:	d009      	beq.n	800350a <USBD_StdDevReq+0x18a>
 80034f6:	2a03      	cmp	r2, #3
 80034f8:	d014      	beq.n	8003524 <USBD_StdDevReq+0x1a4>
        USBD_CtlError(pdev, req);
 80034fa:	0020      	movs	r0, r4
 80034fc:	f7ff ff35 	bl	800336a <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8003500:	7829      	ldrb	r1, [r5, #0]
 8003502:	0020      	movs	r0, r4
 8003504:	f7ff fdfb 	bl	80030fe <USBD_ClrClassConfig>
 8003508:	e75e      	b.n	80033c8 <USBD_StdDevReq+0x48>
        if (cfgidx)
 800350a:	2900      	cmp	r1, #0
 800350c:	d087      	beq.n	800341e <USBD_StdDevReq+0x9e>
          pdev->dev_config = cfgidx;
 800350e:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003510:	2203      	movs	r2, #3
          pdev->dev_config = cfgidx;
 8003512:	6061      	str	r1, [r4, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003514:	54e2      	strb	r2, [r4, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003516:	0020      	movs	r0, r4
 8003518:	f7ff fde4 	bl	80030e4 <USBD_SetClassConfig>
 800351c:	2802      	cmp	r0, #2
 800351e:	d000      	beq.n	8003522 <USBD_StdDevReq+0x1a2>
 8003520:	e77d      	b.n	800341e <USBD_StdDevReq+0x9e>
 8003522:	e7cb      	b.n	80034bc <USBD_StdDevReq+0x13c>
        if (cfgidx == 0U)
 8003524:	2900      	cmp	r1, #0
 8003526:	d106      	bne.n	8003536 <USBD_StdDevReq+0x1b6>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003528:	2202      	movs	r2, #2
          USBD_ClrClassConfig(pdev, cfgidx);
 800352a:	0020      	movs	r0, r4
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800352c:	54e2      	strb	r2, [r4, r3]
          pdev->dev_config = cfgidx;
 800352e:	6061      	str	r1, [r4, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8003530:	f7ff fde5 	bl	80030fe <USBD_ClrClassConfig>
 8003534:	e773      	b.n	800341e <USBD_StdDevReq+0x9e>
        else if (cfgidx != pdev->dev_config)
 8003536:	6861      	ldr	r1, [r4, #4]
 8003538:	2901      	cmp	r1, #1
 800353a:	d100      	bne.n	800353e <USBD_StdDevReq+0x1be>
 800353c:	e76f      	b.n	800341e <USBD_StdDevReq+0x9e>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800353e:	b2c9      	uxtb	r1, r1
 8003540:	0020      	movs	r0, r4
 8003542:	f7ff fddc 	bl	80030fe <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8003546:	7829      	ldrb	r1, [r5, #0]
 8003548:	6061      	str	r1, [r4, #4]
 800354a:	e7e4      	b.n	8003516 <USBD_StdDevReq+0x196>
  if (req->wLength != 1U)
 800354c:	88ca      	ldrh	r2, [r1, #6]
 800354e:	2a01      	cmp	r2, #1
 8003550:	d1b4      	bne.n	80034bc <USBD_StdDevReq+0x13c>
    switch (pdev->dev_state)
 8003552:	23a7      	movs	r3, #167	; 0xa7
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	5ce3      	ldrb	r3, [r4, r3]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0af      	beq.n	80034bc <USBD_StdDevReq+0x13c>
 800355c:	2b02      	cmp	r3, #2
 800355e:	d906      	bls.n	800356e <USBD_StdDevReq+0x1ee>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003560:	1d21      	adds	r1, r4, #4
    switch (pdev->dev_state)
 8003562:	2b03      	cmp	r3, #3
 8003564:	d1aa      	bne.n	80034bc <USBD_StdDevReq+0x13c>
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003566:	0020      	movs	r0, r4
 8003568:	f000 f930 	bl	80037cc <USBD_CtlSendData>
 800356c:	e72c      	b.n	80033c8 <USBD_StdDevReq+0x48>
        pdev->dev_default_config = 0U;
 800356e:	2300      	movs	r3, #0
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8003570:	0021      	movs	r1, r4
        pdev->dev_default_config = 0U;
 8003572:	60a3      	str	r3, [r4, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8003574:	3108      	adds	r1, #8
 8003576:	e7f6      	b.n	8003566 <USBD_StdDevReq+0x1e6>
  switch (pdev->dev_state)
 8003578:	23a7      	movs	r3, #167	; 0xa7
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	5ce3      	ldrb	r3, [r4, r3]
 800357e:	3b01      	subs	r3, #1
 8003580:	2b02      	cmp	r3, #2
 8003582:	d89b      	bhi.n	80034bc <USBD_StdDevReq+0x13c>
      if (req->wLength != 0x2U)
 8003584:	88cb      	ldrh	r3, [r1, #6]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d198      	bne.n	80034bc <USBD_StdDevReq+0x13c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800358a:	3b01      	subs	r3, #1
 800358c:	60e3      	str	r3, [r4, #12]
      if (pdev->dev_remote_wakeup)
 800358e:	23a9      	movs	r3, #169	; 0xa9
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	58e3      	ldr	r3, [r4, r3]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <USBD_StdDevReq+0x21c>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003598:	2303      	movs	r3, #3
 800359a:	60e3      	str	r3, [r4, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800359c:	0021      	movs	r1, r4
 800359e:	2202      	movs	r2, #2
 80035a0:	310c      	adds	r1, #12
 80035a2:	e7e0      	b.n	8003566 <USBD_StdDevReq+0x1e6>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80035a4:	884b      	ldrh	r3, [r1, #2]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d000      	beq.n	80035ac <USBD_StdDevReq+0x22c>
 80035aa:	e70d      	b.n	80033c8 <USBD_StdDevReq+0x48>
    pdev->dev_remote_wakeup = 1U;
 80035ac:	22a9      	movs	r2, #169	; 0xa9
 80035ae:	0092      	lsls	r2, r2, #2
 80035b0:	50a3      	str	r3, [r4, r2]
 80035b2:	e734      	b.n	800341e <USBD_StdDevReq+0x9e>
  switch (pdev->dev_state)
 80035b4:	23a7      	movs	r3, #167	; 0xa7
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	5ce3      	ldrb	r3, [r4, r3]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d900      	bls.n	80035c2 <USBD_StdDevReq+0x242>
 80035c0:	e77c      	b.n	80034bc <USBD_StdDevReq+0x13c>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80035c2:	884b      	ldrh	r3, [r1, #2]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d000      	beq.n	80035ca <USBD_StdDevReq+0x24a>
 80035c8:	e6fe      	b.n	80033c8 <USBD_StdDevReq+0x48>
        pdev->dev_remote_wakeup = 0U;
 80035ca:	23a9      	movs	r3, #169	; 0xa9
 80035cc:	2200      	movs	r2, #0
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	50e2      	str	r2, [r4, r3]
 80035d2:	e724      	b.n	800341e <USBD_StdDevReq+0x9e>
 80035d4:	0000029e 	.word	0x0000029e
 80035d8:	200001a0 	.word	0x200001a0

080035dc <USBD_StdItfReq>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80035dc:	2260      	movs	r2, #96	; 0x60
 80035de:	780b      	ldrb	r3, [r1, #0]
{
 80035e0:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80035e2:	4013      	ands	r3, r2
{
 80035e4:	0004      	movs	r4, r0
 80035e6:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80035e8:	2b20      	cmp	r3, #32
 80035ea:	d003      	beq.n	80035f4 <USBD_StdItfReq+0x18>
 80035ec:	2b40      	cmp	r3, #64	; 0x40
 80035ee:	d001      	beq.n	80035f4 <USBD_StdItfReq+0x18>
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d119      	bne.n	8003628 <USBD_StdItfReq+0x4c>
      switch (pdev->dev_state)
 80035f4:	23a7      	movs	r3, #167	; 0xa7
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	5ce3      	ldrb	r3, [r4, r3]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d813      	bhi.n	8003628 <USBD_StdItfReq+0x4c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003600:	792b      	ldrb	r3, [r5, #4]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d810      	bhi.n	8003628 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003606:	23ad      	movs	r3, #173	; 0xad
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	58e3      	ldr	r3, [r4, r3]
 800360c:	0029      	movs	r1, r5
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	0020      	movs	r0, r4
 8003612:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003614:	88eb      	ldrh	r3, [r5, #6]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d104      	bne.n	8003624 <USBD_StdItfReq+0x48>
 800361a:	2800      	cmp	r0, #0
 800361c:	d102      	bne.n	8003624 <USBD_StdItfReq+0x48>
              USBD_CtlSendStatus(pdev);
 800361e:	0020      	movs	r0, r4
 8003620:	f000 f902 	bl	8003828 <USBD_CtlSendStatus>
}
 8003624:	2000      	movs	r0, #0
 8003626:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlError(pdev, req);
 8003628:	0020      	movs	r0, r4
 800362a:	f7ff fe9e 	bl	800336a <USBD_CtlError.constprop.1>
          break;
 800362e:	e7f9      	b.n	8003624 <USBD_StdItfReq+0x48>

08003630 <USBD_StdEPReq>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003630:	780a      	ldrb	r2, [r1, #0]
{
 8003632:	000b      	movs	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003634:	2160      	movs	r1, #96	; 0x60
{
 8003636:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003638:	400a      	ands	r2, r1
{
 800363a:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800363c:	2a20      	cmp	r2, #32
 800363e:	d017      	beq.n	8003670 <USBD_StdEPReq+0x40>
 8003640:	2a40      	cmp	r2, #64	; 0x40
 8003642:	d015      	beq.n	8003670 <USBD_StdEPReq+0x40>
 8003644:	2a00      	cmp	r2, #0
 8003646:	d10f      	bne.n	8003668 <USBD_StdEPReq+0x38>
  ep_addr  = LOBYTE(req->wIndex);
 8003648:	8898      	ldrh	r0, [r3, #4]
      switch (req->bRequest)
 800364a:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800364c:	b2c1      	uxtb	r1, r0
      switch (req->bRequest)
 800364e:	2a01      	cmp	r2, #1
 8003650:	d026      	beq.n	80036a0 <USBD_StdEPReq+0x70>
 8003652:	2a00      	cmp	r2, #0
 8003654:	d03e      	beq.n	80036d4 <USBD_StdEPReq+0xa4>
 8003656:	2a03      	cmp	r2, #3
 8003658:	d106      	bne.n	8003668 <USBD_StdEPReq+0x38>
          switch (pdev->dev_state)
 800365a:	22a7      	movs	r2, #167	; 0xa7
 800365c:	0092      	lsls	r2, r2, #2
 800365e:	5ca2      	ldrb	r2, [r4, r2]
 8003660:	2a02      	cmp	r2, #2
 8003662:	d02d      	beq.n	80036c0 <USBD_StdEPReq+0x90>
 8003664:	2a03      	cmp	r2, #3
 8003666:	d00c      	beq.n	8003682 <USBD_StdEPReq+0x52>
              USBD_CtlError(pdev, req);
 8003668:	0020      	movs	r0, r4
 800366a:	f7ff fe7e 	bl	800336a <USBD_CtlError.constprop.1>
              break;
 800366e:	e006      	b.n	800367e <USBD_StdEPReq+0x4e>
      pdev->pClass->Setup(pdev, req);
 8003670:	22ad      	movs	r2, #173	; 0xad
 8003672:	0092      	lsls	r2, r2, #2
 8003674:	58a2      	ldr	r2, [r4, r2]
 8003676:	0019      	movs	r1, r3
 8003678:	6892      	ldr	r2, [r2, #8]
 800367a:	0020      	movs	r0, r4
 800367c:	4790      	blx	r2
}
 800367e:	2000      	movs	r0, #0
 8003680:	bd70      	pop	{r4, r5, r6, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003682:	885a      	ldrh	r2, [r3, #2]
 8003684:	2a00      	cmp	r2, #0
 8003686:	d107      	bne.n	8003698 <USBD_StdEPReq+0x68>
                if ((ep_addr != 0x00U) &&
 8003688:	064a      	lsls	r2, r1, #25
 800368a:	d005      	beq.n	8003698 <USBD_StdEPReq+0x68>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800368c:	88db      	ldrh	r3, [r3, #6]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d102      	bne.n	8003698 <USBD_StdEPReq+0x68>
                  USBD_LL_StallEP(pdev, ep_addr);
 8003692:	0020      	movs	r0, r4
 8003694:	f000 fab2 	bl	8003bfc <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8003698:	0020      	movs	r0, r4
 800369a:	f000 f8c5 	bl	8003828 <USBD_CtlSendStatus>
              break;
 800369e:	e7ee      	b.n	800367e <USBD_StdEPReq+0x4e>
          switch (pdev->dev_state)
 80036a0:	22a7      	movs	r2, #167	; 0xa7
 80036a2:	0092      	lsls	r2, r2, #2
 80036a4:	5ca2      	ldrb	r2, [r4, r2]
 80036a6:	2a02      	cmp	r2, #2
 80036a8:	d00a      	beq.n	80036c0 <USBD_StdEPReq+0x90>
 80036aa:	2a03      	cmp	r2, #3
 80036ac:	d1dc      	bne.n	8003668 <USBD_StdEPReq+0x38>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80036ae:	885b      	ldrh	r3, [r3, #2]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1e4      	bne.n	800367e <USBD_StdEPReq+0x4e>
                if ((ep_addr & 0x7FU) != 0x00U)
 80036b4:	064b      	lsls	r3, r1, #25
 80036b6:	d0ef      	beq.n	8003698 <USBD_StdEPReq+0x68>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80036b8:	0020      	movs	r0, r4
 80036ba:	f000 faaf 	bl	8003c1c <USBD_LL_ClearStallEP>
 80036be:	e7eb      	b.n	8003698 <USBD_StdEPReq+0x68>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80036c0:	064b      	lsls	r3, r1, #25
 80036c2:	d0d1      	beq.n	8003668 <USBD_StdEPReq+0x38>
                USBD_LL_StallEP(pdev, ep_addr);
 80036c4:	0020      	movs	r0, r4
 80036c6:	f000 fa99 	bl	8003bfc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80036ca:	2180      	movs	r1, #128	; 0x80
 80036cc:	0020      	movs	r0, r4
 80036ce:	f000 fa95 	bl	8003bfc <USBD_LL_StallEP>
 80036d2:	e7d4      	b.n	800367e <USBD_StdEPReq+0x4e>
          switch (pdev->dev_state)
 80036d4:	23a7      	movs	r3, #167	; 0xa7
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	5ce3      	ldrb	r3, [r4, r3]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d017      	beq.n	800370e <USBD_StdEPReq+0xde>
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d1c2      	bne.n	8003668 <USBD_StdEPReq+0x38>
 80036e2:	220f      	movs	r2, #15
 80036e4:	2314      	movs	r3, #20
 80036e6:	400a      	ands	r2, r1
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80036e8:	435a      	muls	r2, r3
 80036ea:	18a2      	adds	r2, r4, r2
              if ((ep_addr & 0x80U) == 0x80U)
 80036ec:	0600      	lsls	r0, r0, #24
 80036ee:	d51e      	bpl.n	800372e <USBD_StdEPReq+0xfe>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80036f0:	6992      	ldr	r2, [r2, #24]
 80036f2:	2a00      	cmp	r2, #0
 80036f4:	d0b8      	beq.n	8003668 <USBD_StdEPReq+0x38>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80036f6:	257f      	movs	r5, #127	; 0x7f
 80036f8:	400d      	ands	r5, r1
 80036fa:	3501      	adds	r5, #1
 80036fc:	435d      	muls	r5, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80036fe:	237f      	movs	r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003700:	1965      	adds	r5, r4, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003702:	400b      	ands	r3, r1
 8003704:	d11e      	bne.n	8003744 <USBD_StdEPReq+0x114>
                pep->status = 0x0001U;
 8003706:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003708:	2202      	movs	r2, #2
 800370a:	0029      	movs	r1, r5
 800370c:	e00b      	b.n	8003726 <USBD_StdEPReq+0xf6>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800370e:	064b      	lsls	r3, r1, #25
 8003710:	d1aa      	bne.n	8003668 <USBD_StdEPReq+0x38>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003712:	0021      	movs	r1, r4
 8003714:	3155      	adds	r1, #85	; 0x55
 8003716:	31ff      	adds	r1, #255	; 0xff
 8003718:	0603      	lsls	r3, r0, #24
 800371a:	d501      	bpl.n	8003720 <USBD_StdEPReq+0xf0>
 800371c:	3941      	subs	r1, #65	; 0x41
 800371e:	39ff      	subs	r1, #255	; 0xff
              pep->status = 0x0000U;
 8003720:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003722:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 8003724:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003726:	0020      	movs	r0, r4
 8003728:	f000 f850 	bl	80037cc <USBD_CtlSendData>
              break;
 800372c:	e7a7      	b.n	800367e <USBD_StdEPReq+0x4e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800372e:	32fc      	adds	r2, #252	; 0xfc
 8003730:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003732:	2a00      	cmp	r2, #0
 8003734:	d100      	bne.n	8003738 <USBD_StdEPReq+0x108>
 8003736:	e797      	b.n	8003668 <USBD_StdEPReq+0x38>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003738:	257f      	movs	r5, #127	; 0x7f
 800373a:	400d      	ands	r5, r1
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800373c:	435d      	muls	r5, r3
 800373e:	3555      	adds	r5, #85	; 0x55
 8003740:	35ff      	adds	r5, #255	; 0xff
 8003742:	e7dc      	b.n	80036fe <USBD_StdEPReq+0xce>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8003744:	0020      	movs	r0, r4
 8003746:	f000 fa79 	bl	8003c3c <USBD_LL_IsStallEP>
 800374a:	2800      	cmp	r0, #0
 800374c:	d001      	beq.n	8003752 <USBD_StdEPReq+0x122>
                pep->status = 0x0001U;
 800374e:	2301      	movs	r3, #1
 8003750:	e7d9      	b.n	8003706 <USBD_StdEPReq+0xd6>
                pep->status = 0x0000U;
 8003752:	6028      	str	r0, [r5, #0]
 8003754:	e7d8      	b.n	8003708 <USBD_StdEPReq+0xd8>

08003756 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8003756:	780b      	ldrb	r3, [r1, #0]
 8003758:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800375a:	784b      	ldrb	r3, [r1, #1]
 800375c:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800375e:	78ca      	ldrb	r2, [r1, #3]
 8003760:	788b      	ldrb	r3, [r1, #2]
 8003762:	0212      	lsls	r2, r2, #8
 8003764:	189b      	adds	r3, r3, r2
 8003766:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8003768:	794a      	ldrb	r2, [r1, #5]
 800376a:	790b      	ldrb	r3, [r1, #4]
 800376c:	0212      	lsls	r2, r2, #8
 800376e:	189b      	adds	r3, r3, r2
 8003770:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8003772:	79ca      	ldrb	r2, [r1, #7]
 8003774:	798b      	ldrb	r3, [r1, #6]
 8003776:	0212      	lsls	r2, r2, #8
 8003778:	189b      	adds	r3, r3, r2
 800377a:	80c3      	strh	r3, [r0, #6]
}
 800377c:	4770      	bx	lr

0800377e <USBD_CtlError>:
{
 800377e:	b510      	push	{r4, lr}
 8003780:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8003782:	2180      	movs	r1, #128	; 0x80
 8003784:	f000 fa3a 	bl	8003bfc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003788:	2100      	movs	r1, #0
 800378a:	0020      	movs	r0, r4
 800378c:	f000 fa36 	bl	8003bfc <USBD_LL_StallEP>
}
 8003790:	bd10      	pop	{r4, pc}

08003792 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003792:	2300      	movs	r3, #0
 8003794:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8003796:	4298      	cmp	r0, r3
 8003798:	d101      	bne.n	800379e <USBD_GetString+0xc>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0U;
    }
  }
}
 800379a:	bd30      	pop	{r4, r5, pc}
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800379c:	002b      	movs	r3, r5
 800379e:	5cc4      	ldrb	r4, [r0, r3]
 80037a0:	1c5d      	adds	r5, r3, #1
 80037a2:	2c00      	cmp	r4, #0
 80037a4:	d1fa      	bne.n	800379c <USBD_GetString+0xa>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	3301      	adds	r3, #1
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80037ae:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80037b0:	2303      	movs	r3, #3
 80037b2:	704b      	strb	r3, [r1, #1]
 80037b4:	3b01      	subs	r3, #1
    while (*desc != '\0')
 80037b6:	7805      	ldrb	r5, [r0, #0]
 80037b8:	2d00      	cmp	r5, #0
 80037ba:	d0ee      	beq.n	800379a <USBD_GetString+0x8>
      unicode[idx++] = *desc++;
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	54cd      	strb	r5, [r1, r3]
 80037c0:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80037c2:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 80037c4:	3001      	adds	r0, #1
      unicode[idx++] =  0U;
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	548c      	strb	r4, [r1, r2]
 80037ca:	e7f4      	b.n	80037b6 <USBD_GetString+0x24>

080037cc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80037cc:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80037ce:	22a5      	movs	r2, #165	; 0xa5
{
 80037d0:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80037d2:	2402      	movs	r4, #2
 80037d4:	0092      	lsls	r2, r2, #2
 80037d6:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80037d8:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 80037da:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 80037dc:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80037de:	2100      	movs	r1, #0
 80037e0:	f000 fa52 	bl	8003c88 <USBD_LL_Transmit>

  return USBD_OK;
}
 80037e4:	2000      	movs	r0, #0
 80037e6:	bd10      	pop	{r4, pc}

080037e8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80037e8:	b510      	push	{r4, lr}
 80037ea:	0013      	movs	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80037ec:	000a      	movs	r2, r1
 80037ee:	2100      	movs	r1, #0
 80037f0:	f000 fa4a 	bl	8003c88 <USBD_LL_Transmit>

  return USBD_OK;
}
 80037f4:	2000      	movs	r0, #0
 80037f6:	bd10      	pop	{r4, pc}

080037f8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80037f8:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80037fa:	22a5      	movs	r2, #165	; 0xa5
{
 80037fc:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80037fe:	2403      	movs	r4, #3
 8003800:	0092      	lsls	r2, r2, #2
 8003802:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8003804:	0002      	movs	r2, r0
 8003806:	32fc      	adds	r2, #252	; 0xfc
 8003808:	6613      	str	r3, [r2, #96]	; 0x60
  pdev->ep_out[0].rem_length   = len;
 800380a:	6653      	str	r3, [r2, #100]	; 0x64

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800380c:	000a      	movs	r2, r1
 800380e:	2100      	movs	r1, #0
 8003810:	f000 fa4a 	bl	8003ca8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003814:	2000      	movs	r0, #0
 8003816:	bd10      	pop	{r4, pc}

08003818 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8003818:	b510      	push	{r4, lr}
 800381a:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800381c:	000a      	movs	r2, r1
 800381e:	2100      	movs	r1, #0
 8003820:	f000 fa42 	bl	8003ca8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003824:	2000      	movs	r0, #0
 8003826:	bd10      	pop	{r4, pc}

08003828 <USBD_CtlSendStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003828:	23a5      	movs	r3, #165	; 0xa5
 800382a:	2204      	movs	r2, #4
 800382c:	009b      	lsls	r3, r3, #2
{
 800382e:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003830:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003832:	2300      	movs	r3, #0
 8003834:	001a      	movs	r2, r3
 8003836:	0019      	movs	r1, r3
 8003838:	f000 fa26 	bl	8003c88 <USBD_LL_Transmit>

  return USBD_OK;
}
 800383c:	2000      	movs	r0, #0
 800383e:	bd10      	pop	{r4, pc}

08003840 <USBD_CtlReceiveStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003840:	23a5      	movs	r3, #165	; 0xa5
 8003842:	2205      	movs	r2, #5
 8003844:	009b      	lsls	r3, r3, #2
{
 8003846:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003848:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800384a:	2300      	movs	r3, #0
 800384c:	001a      	movs	r2, r3
 800384e:	0019      	movs	r1, r3
 8003850:	f000 fa2a 	bl	8003ca8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003854:	2000      	movs	r0, #0
 8003856:	bd10      	pop	{r4, pc}

08003858 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003858:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800385a:	4c11      	ldr	r4, [pc, #68]	; (80038a0 <MX_USB_DEVICE_Init+0x48>)
 800385c:	2200      	movs	r2, #0
 800385e:	4911      	ldr	r1, [pc, #68]	; (80038a4 <MX_USB_DEVICE_Init+0x4c>)
 8003860:	0020      	movs	r0, r4
 8003862:	f7ff fc17 	bl	8003094 <USBD_Init>
 8003866:	2800      	cmp	r0, #0
 8003868:	d001      	beq.n	800386e <MX_USB_DEVICE_Init+0x16>
  {
    Error_Handler();
 800386a:	f7fc fe21 	bl	80004b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800386e:	490e      	ldr	r1, [pc, #56]	; (80038a8 <MX_USB_DEVICE_Init+0x50>)
 8003870:	0020      	movs	r0, r4
 8003872:	f7ff fc29 	bl	80030c8 <USBD_RegisterClass>
 8003876:	2800      	cmp	r0, #0
 8003878:	d001      	beq.n	800387e <MX_USB_DEVICE_Init+0x26>
  {
    Error_Handler();
 800387a:	f7fc fe19 	bl	80004b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800387e:	490b      	ldr	r1, [pc, #44]	; (80038ac <MX_USB_DEVICE_Init+0x54>)
 8003880:	0020      	movs	r0, r4
 8003882:	f7ff fbb8 	bl	8002ff6 <USBD_CDC_RegisterInterface>
 8003886:	2800      	cmp	r0, #0
 8003888:	d001      	beq.n	800388e <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
 800388a:	f7fc fe11 	bl	80004b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800388e:	0020      	movs	r0, r4
 8003890:	f7ff fc23 	bl	80030da <USBD_Start>
 8003894:	2800      	cmp	r0, #0
 8003896:	d001      	beq.n	800389c <MX_USB_DEVICE_Init+0x44>
  {
    Error_Handler();
 8003898:	f7fc fe0a 	bl	80004b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800389c:	bd10      	pop	{r4, pc}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	20000414 	.word	0x20000414
 80038a4:	20000134 	.word	0x20000134
 80038a8:	20000014 	.word	0x20000014
 80038ac:	20000124 	.word	0x20000124

080038b0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80038b0:	2000      	movs	r0, #0
 80038b2:	4770      	bx	lr

080038b4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80038b4:	2000      	movs	r0, #0
 80038b6:	4770      	bx	lr

080038b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80038b8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80038ba:	4c05      	ldr	r4, [pc, #20]	; (80038d0 <CDC_Receive_FS+0x18>)
{
 80038bc:	0001      	movs	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80038be:	0020      	movs	r0, r4
 80038c0:	f7ff fbad 	bl	800301e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80038c4:	0020      	movs	r0, r4
 80038c6:	f7ff fbcd 	bl	8003064 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80038ca:	2000      	movs	r0, #0
 80038cc:	bd10      	pop	{r4, pc}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	20000414 	.word	0x20000414

080038d4 <CDC_Init_FS>:
{
 80038d4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80038d6:	4c06      	ldr	r4, [pc, #24]	; (80038f0 <CDC_Init_FS+0x1c>)
 80038d8:	2200      	movs	r2, #0
 80038da:	4906      	ldr	r1, [pc, #24]	; (80038f4 <CDC_Init_FS+0x20>)
 80038dc:	0020      	movs	r0, r4
 80038de:	f7ff fb93 	bl	8003008 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80038e2:	4905      	ldr	r1, [pc, #20]	; (80038f8 <CDC_Init_FS+0x24>)
 80038e4:	0020      	movs	r0, r4
 80038e6:	f7ff fb9a 	bl	800301e <USBD_CDC_SetRxBuffer>
}
 80038ea:	2000      	movs	r0, #0
 80038ec:	bd10      	pop	{r4, pc}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	20000414 	.word	0x20000414
 80038f4:	20000ac0 	.word	0x20000ac0
 80038f8:	200006d8 	.word	0x200006d8

080038fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80038fc:	000a      	movs	r2, r1
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80038fe:	21ae      	movs	r1, #174	; 0xae
{
 8003900:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003902:	4c08      	ldr	r4, [pc, #32]	; (8003924 <CDC_Transmit_FS+0x28>)
 8003904:	0089      	lsls	r1, r1, #2
{
 8003906:	0003      	movs	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003908:	5860      	ldr	r0, [r4, r1]
  if (hcdc->TxState != 0){
 800390a:	39a4      	subs	r1, #164	; 0xa4
 800390c:	5841      	ldr	r1, [r0, r1]
    return USBD_BUSY;
 800390e:	2001      	movs	r0, #1
  if (hcdc->TxState != 0){
 8003910:	2900      	cmp	r1, #0
 8003912:	d106      	bne.n	8003922 <CDC_Transmit_FS+0x26>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8003914:	0019      	movs	r1, r3
 8003916:	0020      	movs	r0, r4
 8003918:	f7ff fb76 	bl	8003008 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800391c:	0020      	movs	r0, r4
 800391e:	f7ff fb85 	bl	800302c <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
}
 8003922:	bd10      	pop	{r4, pc}
 8003924:	20000414 	.word	0x20000414

08003928 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003928:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800392a:	4801      	ldr	r0, [pc, #4]	; (8003930 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800392c:	800b      	strh	r3, [r1, #0]
}
 800392e:	4770      	bx	lr
 8003930:	20000150 	.word	0x20000150

08003934 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003934:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8003936:	4801      	ldr	r0, [pc, #4]	; (800393c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003938:	800b      	strh	r3, [r1, #0]
}
 800393a:	4770      	bx	lr
 800393c:	20000164 	.word	0x20000164

08003940 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8003940:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8003942:	2500      	movs	r5, #0
 8003944:	3a01      	subs	r2, #1
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	0052      	lsls	r2, r2, #1
 800394a:	1c8b      	adds	r3, r1, #2
 800394c:	18d2      	adds	r2, r2, r3
    if (((value >> 28)) < 0xA)
 800394e:	0f04      	lsrs	r4, r0, #28
 8003950:	b2e3      	uxtb	r3, r4
 8003952:	2c09      	cmp	r4, #9
 8003954:	d807      	bhi.n	8003966 <IntToUnicode+0x26>
      pbuf[2 * idx] = (value >> 28) + '0';
 8003956:	3330      	adds	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003958:	700b      	strb	r3, [r1, #0]
    pbuf[2 * idx + 1] = 0;
 800395a:	704d      	strb	r5, [r1, #1]
 800395c:	3102      	adds	r1, #2
    value = value << 4;
 800395e:	0100      	lsls	r0, r0, #4
  for (idx = 0; idx < len; idx++)
 8003960:	428a      	cmp	r2, r1
 8003962:	d1f4      	bne.n	800394e <IntToUnicode+0xe>
  }
}
 8003964:	bd30      	pop	{r4, r5, pc}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003966:	3337      	adds	r3, #55	; 0x37
 8003968:	e7f6      	b.n	8003958 <IntToUnicode+0x18>
	...

0800396c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800396c:	231a      	movs	r3, #26
{
 800396e:	b570      	push	{r4, r5, r6, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003970:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003972:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <USBD_FS_SerialStrDescriptor+0x34>)
 8003974:	4c0b      	ldr	r4, [pc, #44]	; (80039a4 <USBD_FS_SerialStrDescriptor+0x38>)
 8003976:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8003978:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <USBD_FS_SerialStrDescriptor+0x3c>)
  deviceserial0 += deviceserial2;
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 800397e:	2800      	cmp	r0, #0
 8003980:	d00b      	beq.n	800399a <USBD_FS_SerialStrDescriptor+0x2e>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003982:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <USBD_FS_SerialStrDescriptor+0x40>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003984:	1ca1      	adds	r1, r4, #2
 8003986:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003988:	681d      	ldr	r5, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800398a:	f7ff ffd9 	bl	8003940 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800398e:	0021      	movs	r1, r4
 8003990:	2204      	movs	r2, #4
 8003992:	3112      	adds	r1, #18
 8003994:	0028      	movs	r0, r5
 8003996:	f7ff ffd3 	bl	8003940 <IntToUnicode>
}
 800399a:	0020      	movs	r0, r4
 800399c:	bd70      	pop	{r4, r5, r6, pc}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	1ffff7ac 	.word	0x1ffff7ac
 80039a4:	20000168 	.word	0x20000168
 80039a8:	1ffff7b4 	.word	0x1ffff7b4
 80039ac:	1ffff7b0 	.word	0x1ffff7b0

080039b0 <USBD_FS_ManufacturerStrDescriptor>:
{
 80039b0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80039b2:	4c04      	ldr	r4, [pc, #16]	; (80039c4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 80039b4:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80039b6:	4804      	ldr	r0, [pc, #16]	; (80039c8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80039b8:	0021      	movs	r1, r4
 80039ba:	f7ff feea 	bl	8003792 <USBD_GetString>
}
 80039be:	0020      	movs	r0, r4
 80039c0:	bd10      	pop	{r4, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	20000ea8 	.word	0x20000ea8
 80039c8:	08003db1 	.word	0x08003db1

080039cc <USBD_FS_ProductStrDescriptor>:
{
 80039cc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80039ce:	4c04      	ldr	r4, [pc, #16]	; (80039e0 <USBD_FS_ProductStrDescriptor+0x14>)
{
 80039d0:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80039d2:	4804      	ldr	r0, [pc, #16]	; (80039e4 <USBD_FS_ProductStrDescriptor+0x18>)
 80039d4:	0021      	movs	r1, r4
 80039d6:	f7ff fedc 	bl	8003792 <USBD_GetString>
}
 80039da:	0020      	movs	r0, r4
 80039dc:	bd10      	pop	{r4, pc}
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	20000ea8 	.word	0x20000ea8
 80039e4:	08003dc4 	.word	0x08003dc4

080039e8 <USBD_FS_ConfigStrDescriptor>:
{
 80039e8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80039ea:	4c04      	ldr	r4, [pc, #16]	; (80039fc <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80039ec:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80039ee:	4804      	ldr	r0, [pc, #16]	; (8003a00 <USBD_FS_ConfigStrDescriptor+0x18>)
 80039f0:	0021      	movs	r1, r4
 80039f2:	f7ff fece 	bl	8003792 <USBD_GetString>
}
 80039f6:	0020      	movs	r0, r4
 80039f8:	bd10      	pop	{r4, pc}
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	20000ea8 	.word	0x20000ea8
 8003a00:	08003d98 	.word	0x08003d98

08003a04 <USBD_FS_InterfaceStrDescriptor>:
{
 8003a04:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003a06:	4c04      	ldr	r4, [pc, #16]	; (8003a18 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8003a08:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003a0a:	4804      	ldr	r0, [pc, #16]	; (8003a1c <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003a0c:	0021      	movs	r1, r4
 8003a0e:	f7ff fec0 	bl	8003792 <USBD_GetString>
}
 8003a12:	0020      	movs	r0, r4
 8003a14:	bd10      	pop	{r4, pc}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	20000ea8 	.word	0x20000ea8
 8003a1c:	08003da3 	.word	0x08003da3

08003a20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003a20:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_PCD_MspInit+0x30>)
 8003a24:	6802      	ldr	r2, [r0, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d111      	bne.n	8003a4e <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003a2a:	2080      	movs	r0, #128	; 0x80
 8003a2c:	4a09      	ldr	r2, [pc, #36]	; (8003a54 <HAL_PCD_MspInit+0x34>)
 8003a2e:	0400      	lsls	r0, r0, #16
 8003a30:	69d1      	ldr	r1, [r2, #28]
 8003a32:	4301      	orrs	r1, r0
 8003a34:	61d1      	str	r1, [r2, #28]
 8003a36:	69d3      	ldr	r3, [r2, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003a38:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8003a3a:	4003      	ands	r3, r0
 8003a3c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003a3e:	201f      	movs	r0, #31
 8003a40:	0011      	movs	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8003a42:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003a44:	f7fc fe22 	bl	800068c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8003a48:	201f      	movs	r0, #31
 8003a4a:	f7fc fe49 	bl	80006e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003a4e:	bd07      	pop	{r0, r1, r2, pc}
 8003a50:	40005c00 	.word	0x40005c00
 8003a54:	40021000 	.word	0x40021000

08003a58 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003a58:	23ac      	movs	r3, #172	; 0xac
{
 8003a5a:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	18c1      	adds	r1, r0, r3
 8003a60:	3340      	adds	r3, #64	; 0x40
 8003a62:	58c0      	ldr	r0, [r0, r3]
 8003a64:	f7ff fb54 	bl	8003110 <USBD_LL_SetupStage>
}
 8003a68:	bd10      	pop	{r4, pc}

08003a6a <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003a6a:	2328      	movs	r3, #40	; 0x28
 8003a6c:	434b      	muls	r3, r1
 8003a6e:	18c3      	adds	r3, r0, r3
 8003a70:	337d      	adds	r3, #125	; 0x7d
 8003a72:	33ff      	adds	r3, #255	; 0xff
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	23bc      	movs	r3, #188	; 0xbc
{
 8003a78:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	58c0      	ldr	r0, [r0, r3]
 8003a7e:	f7ff fb79 	bl	8003174 <USBD_LL_DataOutStage>
}
 8003a82:	bd10      	pop	{r4, pc}

08003a84 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003a84:	2328      	movs	r3, #40	; 0x28
 8003a86:	434b      	muls	r3, r1
 8003a88:	18c3      	adds	r3, r0, r3
 8003a8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a8c:	23bc      	movs	r3, #188	; 0xbc
{
 8003a8e:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	58c0      	ldr	r0, [r0, r3]
 8003a94:	f7ff fbb2 	bl	80031fc <USBD_LL_DataInStage>
}
 8003a98:	bd10      	pop	{r4, pc}

08003a9a <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003a9a:	23bc      	movs	r3, #188	; 0xbc
{
 8003a9c:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	58c0      	ldr	r0, [r0, r3]
 8003aa2:	f7ff fc53 	bl	800334c <USBD_LL_SOF>
}
 8003aa6:	bd10      	pop	{r4, pc}

08003aa8 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003aa8:	6883      	ldr	r3, [r0, #8]
{ 
 8003aaa:	b570      	push	{r4, r5, r6, lr}
 8003aac:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d001      	beq.n	8003ab6 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8003ab2:	f7fc fcfd 	bl	80004b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003ab6:	25bc      	movs	r5, #188	; 0xbc
 8003ab8:	00ad      	lsls	r5, r5, #2
 8003aba:	2101      	movs	r1, #1
 8003abc:	5960      	ldr	r0, [r4, r5]
 8003abe:	f7ff fc2a 	bl	8003316 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003ac2:	5960      	ldr	r0, [r4, r5]
 8003ac4:	f7ff fbfd 	bl	80032c2 <USBD_LL_Reset>
}
 8003ac8:	bd70      	pop	{r4, r5, r6, pc}
	...

08003acc <HAL_PCD_SuspendCallback>:
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003acc:	23bc      	movs	r3, #188	; 0xbc
{
 8003ace:	b510      	push	{r4, lr}
 8003ad0:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	58c0      	ldr	r0, [r0, r3]
 8003ad6:	f7ff fc21 	bl	800331c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003ada:	69a3      	ldr	r3, [r4, #24]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d004      	beq.n	8003aea <HAL_PCD_SuspendCallback+0x1e>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003ae0:	2306      	movs	r3, #6
 8003ae2:	4a02      	ldr	r2, [pc, #8]	; (8003aec <HAL_PCD_SuspendCallback+0x20>)
 8003ae4:	6911      	ldr	r1, [r2, #16]
 8003ae6:	430b      	orrs	r3, r1
 8003ae8:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8003aea:	bd10      	pop	{r4, pc}
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <HAL_PCD_ResumeCallback>:
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8003af0:	6983      	ldr	r3, [r0, #24]
{
 8003af2:	b510      	push	{r4, lr}
 8003af4:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d006      	beq.n	8003b08 <HAL_PCD_ResumeCallback+0x18>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003afa:	2106      	movs	r1, #6
 8003afc:	4a05      	ldr	r2, [pc, #20]	; (8003b14 <HAL_PCD_ResumeCallback+0x24>)
 8003afe:	6913      	ldr	r3, [r2, #16]
 8003b00:	438b      	bics	r3, r1
 8003b02:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8003b04:	f7fc fba0 	bl	8000248 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003b08:	23bc      	movs	r3, #188	; 0xbc
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	58e0      	ldr	r0, [r4, r3]
 8003b0e:	f7ff fc11 	bl	8003334 <USBD_LL_Resume>
}
 8003b12:	bd10      	pop	{r4, pc}
 8003b14:	e000ed00 	.word	0xe000ed00

08003b18 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
 8003b18:	23bc      	movs	r3, #188	; 0xbc
{
 8003b1a:	b570      	push	{r4, r5, r6, lr}
 8003b1c:	0005      	movs	r5, r0
  hpcd_USB_FS.pData = pdev;
 8003b1e:	481c      	ldr	r0, [pc, #112]	; (8003b90 <USBD_LL_Init+0x78>)
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	50c5      	str	r5, [r0, r3]
  hpcd_USB_FS.Instance = USB;
 8003b24:	4b1b      	ldr	r3, [pc, #108]	; (8003b94 <USBD_LL_Init+0x7c>)
  pdev->pData = &hpcd_USB_FS;
 8003b26:	24b0      	movs	r4, #176	; 0xb0
  hpcd_USB_FS.Instance = USB;
 8003b28:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003b2e:	3b06      	subs	r3, #6
 8003b30:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003b32:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003b34:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 8003b36:	00a4      	lsls	r4, r4, #2
 8003b38:	5128      	str	r0, [r5, r4]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003b3a:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003b3c:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003b3e:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003b40:	f7fd fa02 	bl	8000f48 <HAL_PCD_Init>
 8003b44:	2800      	cmp	r0, #0
 8003b46:	d001      	beq.n	8003b4c <USBD_LL_Init+0x34>
    Error_Handler( );
 8003b48:	f7fc fcb2 	bl	80004b0 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	5928      	ldr	r0, [r5, r4]
 8003b50:	0011      	movs	r1, r2
 8003b52:	2318      	movs	r3, #24
 8003b54:	f7fd ffc8 	bl	8001ae8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003b58:	5928      	ldr	r0, [r5, r4]
 8003b5a:	2358      	movs	r3, #88	; 0x58
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2180      	movs	r1, #128	; 0x80
 8003b60:	f7fd ffc2 	bl	8001ae8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8003b64:	5928      	ldr	r0, [r5, r4]
 8003b66:	23c0      	movs	r3, #192	; 0xc0
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2181      	movs	r1, #129	; 0x81
 8003b6c:	f7fd ffbc 	bl	8001ae8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8003b70:	2388      	movs	r3, #136	; 0x88
 8003b72:	5928      	ldr	r0, [r5, r4]
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	2200      	movs	r2, #0
 8003b78:	2101      	movs	r1, #1
 8003b7a:	f7fd ffb5 	bl	8001ae8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8003b7e:	2380      	movs	r3, #128	; 0x80
 8003b80:	5928      	ldr	r0, [r5, r4]
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	2200      	movs	r2, #0
 8003b86:	2182      	movs	r1, #130	; 0x82
 8003b88:	f7fd ffae 	bl	8001ae8 <HAL_PCDEx_PMAConfig>
}
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	bd70      	pop	{r4, r5, r6, pc}
 8003b90:	200010a8 	.word	0x200010a8
 8003b94:	40005c00 	.word	0x40005c00

08003b98 <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 8003b98:	23b0      	movs	r3, #176	; 0xb0
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	58c0      	ldr	r0, [r0, r3]
{
 8003b9e:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8003ba0:	f7fd fa3e 	bl	8001020 <HAL_PCD_Start>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	2803      	cmp	r0, #3
 8003ba8:	d801      	bhi.n	8003bae <USBD_LL_Start+0x16>
 8003baa:	4b02      	ldr	r3, [pc, #8]	; (8003bb4 <USBD_LL_Start+0x1c>)
 8003bac:	5c1b      	ldrb	r3, [r3, r0]
}
 8003bae:	0018      	movs	r0, r3
 8003bb0:	bd10      	pop	{r4, pc}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	08003dda 	.word	0x08003dda

08003bb8 <USBD_LL_OpenEP>:
{
 8003bb8:	b510      	push	{r4, lr}
 8003bba:	0014      	movs	r4, r2
 8003bbc:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003bbe:	0023      	movs	r3, r4
 8003bc0:	24b0      	movs	r4, #176	; 0xb0
 8003bc2:	00a4      	lsls	r4, r4, #2
 8003bc4:	5900      	ldr	r0, [r0, r4]
 8003bc6:	f7fd fe97 	bl	80018f8 <HAL_PCD_EP_Open>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	2803      	cmp	r0, #3
 8003bce:	d801      	bhi.n	8003bd4 <USBD_LL_OpenEP+0x1c>
 8003bd0:	4b01      	ldr	r3, [pc, #4]	; (8003bd8 <USBD_LL_OpenEP+0x20>)
 8003bd2:	5c1b      	ldrb	r3, [r3, r0]
}
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	bd10      	pop	{r4, pc}
 8003bd8:	08003dda 	.word	0x08003dda

08003bdc <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003bdc:	23b0      	movs	r3, #176	; 0xb0
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	58c0      	ldr	r0, [r0, r3]
{
 8003be2:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003be4:	f7fd feb9 	bl	800195a <HAL_PCD_EP_Close>
 8003be8:	2302      	movs	r3, #2
 8003bea:	2803      	cmp	r0, #3
 8003bec:	d801      	bhi.n	8003bf2 <USBD_LL_CloseEP+0x16>
 8003bee:	4b02      	ldr	r3, [pc, #8]	; (8003bf8 <USBD_LL_CloseEP+0x1c>)
 8003bf0:	5c1b      	ldrb	r3, [r3, r0]
}
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	bd10      	pop	{r4, pc}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	08003dda 	.word	0x08003dda

08003bfc <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003bfc:	23b0      	movs	r3, #176	; 0xb0
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	58c0      	ldr	r0, [r0, r3]
{
 8003c02:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003c04:	f7fd ff17 	bl	8001a36 <HAL_PCD_EP_SetStall>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	2803      	cmp	r0, #3
 8003c0c:	d801      	bhi.n	8003c12 <USBD_LL_StallEP+0x16>
 8003c0e:	4b02      	ldr	r3, [pc, #8]	; (8003c18 <USBD_LL_StallEP+0x1c>)
 8003c10:	5c1b      	ldrb	r3, [r3, r0]
}
 8003c12:	0018      	movs	r0, r3
 8003c14:	bd10      	pop	{r4, pc}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	08003dda 	.word	0x08003dda

08003c1c <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003c1c:	23b0      	movs	r3, #176	; 0xb0
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	58c0      	ldr	r0, [r0, r3]
{
 8003c22:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003c24:	f7fd ff32 	bl	8001a8c <HAL_PCD_EP_ClrStall>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	2803      	cmp	r0, #3
 8003c2c:	d801      	bhi.n	8003c32 <USBD_LL_ClearStallEP+0x16>
 8003c2e:	4b02      	ldr	r3, [pc, #8]	; (8003c38 <USBD_LL_ClearStallEP+0x1c>)
 8003c30:	5c1b      	ldrb	r3, [r3, r0]
}
 8003c32:	0018      	movs	r0, r3
 8003c34:	bd10      	pop	{r4, pc}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	08003dda 	.word	0x08003dda

08003c3c <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003c3c:	23b0      	movs	r3, #176	; 0xb0
  if((ep_addr & 0x80) == 0x80)
 8003c3e:	b24a      	sxtb	r2, r1
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 8003c44:	2a00      	cmp	r2, #0
 8003c46:	da07      	bge.n	8003c58 <USBD_LL_IsStallEP+0x1c>
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003c48:	227f      	movs	r2, #127	; 0x7f
 8003c4a:	4011      	ands	r1, r2
 8003c4c:	3101      	adds	r1, #1
 8003c4e:	3a57      	subs	r2, #87	; 0x57
 8003c50:	4351      	muls	r1, r2
 8003c52:	185b      	adds	r3, r3, r1
 8003c54:	7898      	ldrb	r0, [r3, #2]
}
 8003c56:	4770      	bx	lr
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003c58:	2228      	movs	r2, #40	; 0x28
 8003c5a:	4351      	muls	r1, r2
 8003c5c:	185b      	adds	r3, r3, r1
 8003c5e:	336b      	adds	r3, #107	; 0x6b
 8003c60:	33ff      	adds	r3, #255	; 0xff
 8003c62:	7818      	ldrb	r0, [r3, #0]
 8003c64:	e7f7      	b.n	8003c56 <USBD_LL_IsStallEP+0x1a>
	...

08003c68 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003c68:	23b0      	movs	r3, #176	; 0xb0
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	58c0      	ldr	r0, [r0, r3]
{
 8003c6e:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003c70:	f7fd f9e9 	bl	8001046 <HAL_PCD_SetAddress>
 8003c74:	2302      	movs	r3, #2
 8003c76:	2803      	cmp	r0, #3
 8003c78:	d801      	bhi.n	8003c7e <USBD_LL_SetUSBAddress+0x16>
 8003c7a:	4b02      	ldr	r3, [pc, #8]	; (8003c84 <USBD_LL_SetUSBAddress+0x1c>)
 8003c7c:	5c1b      	ldrb	r3, [r3, r0]
}
 8003c7e:	0018      	movs	r0, r3
 8003c80:	bd10      	pop	{r4, pc}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	08003dda 	.word	0x08003dda

08003c88 <USBD_LL_Transmit>:
{
 8003c88:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003c8a:	24b0      	movs	r4, #176	; 0xb0
 8003c8c:	00a4      	lsls	r4, r4, #2
 8003c8e:	5900      	ldr	r0, [r0, r4]
 8003c90:	f7fd feb4 	bl	80019fc <HAL_PCD_EP_Transmit>
 8003c94:	2302      	movs	r3, #2
 8003c96:	2803      	cmp	r0, #3
 8003c98:	d801      	bhi.n	8003c9e <USBD_LL_Transmit+0x16>
 8003c9a:	4b02      	ldr	r3, [pc, #8]	; (8003ca4 <USBD_LL_Transmit+0x1c>)
 8003c9c:	5c1b      	ldrb	r3, [r3, r0]
}
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	bd10      	pop	{r4, pc}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	08003dda 	.word	0x08003dda

08003ca8 <USBD_LL_PrepareReceive>:
{
 8003ca8:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003caa:	24b0      	movs	r4, #176	; 0xb0
 8003cac:	00a4      	lsls	r4, r4, #2
 8003cae:	5900      	ldr	r0, [r0, r4]
 8003cb0:	f7fd fe7a 	bl	80019a8 <HAL_PCD_EP_Receive>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	2803      	cmp	r0, #3
 8003cb8:	d801      	bhi.n	8003cbe <USBD_LL_PrepareReceive+0x16>
 8003cba:	4b02      	ldr	r3, [pc, #8]	; (8003cc4 <USBD_LL_PrepareReceive+0x1c>)
 8003cbc:	5c1b      	ldrb	r3, [r3, r0]
}
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	bd10      	pop	{r4, pc}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	08003dda 	.word	0x08003dda

08003cc8 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003cc8:	23b0      	movs	r3, #176	; 0xb0
{
 8003cca:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	58c0      	ldr	r0, [r0, r3]
 8003cd0:	f7fd fe8b 	bl	80019ea <HAL_PCD_EP_GetRxCount>
}
 8003cd4:	bd10      	pop	{r4, pc}
	...

08003cd8 <USBD_static_malloc>:
}
 8003cd8:	4800      	ldr	r0, [pc, #0]	; (8003cdc <USBD_static_malloc+0x4>)
 8003cda:	4770      	bx	lr
 8003cdc:	200001a4 	.word	0x200001a4

08003ce0 <USBD_static_free>:
}
 8003ce0:	4770      	bx	lr
	...

08003ce4 <__libc_init_array>:
 8003ce4:	b570      	push	{r4, r5, r6, lr}
 8003ce6:	2600      	movs	r6, #0
 8003ce8:	4d0c      	ldr	r5, [pc, #48]	; (8003d1c <__libc_init_array+0x38>)
 8003cea:	4c0d      	ldr	r4, [pc, #52]	; (8003d20 <__libc_init_array+0x3c>)
 8003cec:	1b64      	subs	r4, r4, r5
 8003cee:	10a4      	asrs	r4, r4, #2
 8003cf0:	42a6      	cmp	r6, r4
 8003cf2:	d109      	bne.n	8003d08 <__libc_init_array+0x24>
 8003cf4:	2600      	movs	r6, #0
 8003cf6:	f000 f82b 	bl	8003d50 <_init>
 8003cfa:	4d0a      	ldr	r5, [pc, #40]	; (8003d24 <__libc_init_array+0x40>)
 8003cfc:	4c0a      	ldr	r4, [pc, #40]	; (8003d28 <__libc_init_array+0x44>)
 8003cfe:	1b64      	subs	r4, r4, r5
 8003d00:	10a4      	asrs	r4, r4, #2
 8003d02:	42a6      	cmp	r6, r4
 8003d04:	d105      	bne.n	8003d12 <__libc_init_array+0x2e>
 8003d06:	bd70      	pop	{r4, r5, r6, pc}
 8003d08:	00b3      	lsls	r3, r6, #2
 8003d0a:	58eb      	ldr	r3, [r5, r3]
 8003d0c:	4798      	blx	r3
 8003d0e:	3601      	adds	r6, #1
 8003d10:	e7ee      	b.n	8003cf0 <__libc_init_array+0xc>
 8003d12:	00b3      	lsls	r3, r6, #2
 8003d14:	58eb      	ldr	r3, [r5, r3]
 8003d16:	4798      	blx	r3
 8003d18:	3601      	adds	r6, #1
 8003d1a:	e7f2      	b.n	8003d02 <__libc_init_array+0x1e>
 8003d1c:	08003de0 	.word	0x08003de0
 8003d20:	08003de0 	.word	0x08003de0
 8003d24:	08003de0 	.word	0x08003de0
 8003d28:	08003de4 	.word	0x08003de4

08003d2c <memcpy>:
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	b510      	push	{r4, lr}
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d100      	bne.n	8003d36 <memcpy+0xa>
 8003d34:	bd10      	pop	{r4, pc}
 8003d36:	5ccc      	ldrb	r4, [r1, r3]
 8003d38:	54c4      	strb	r4, [r0, r3]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	e7f8      	b.n	8003d30 <memcpy+0x4>

08003d3e <memset>:
 8003d3e:	0003      	movs	r3, r0
 8003d40:	1812      	adds	r2, r2, r0
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d100      	bne.n	8003d48 <memset+0xa>
 8003d46:	4770      	bx	lr
 8003d48:	7019      	strb	r1, [r3, #0]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	e7f9      	b.n	8003d42 <memset+0x4>
	...

08003d50 <_init>:
 8003d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d56:	bc08      	pop	{r3}
 8003d58:	469e      	mov	lr, r3
 8003d5a:	4770      	bx	lr

08003d5c <_fini>:
 8003d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d62:	bc08      	pop	{r3}
 8003d64:	469e      	mov	lr, r3
 8003d66:	4770      	bx	lr
